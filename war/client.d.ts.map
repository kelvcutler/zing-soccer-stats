{"version":3,"sources":["../aaswZing/Zing/share/DB.ts","../aaswZing/Zing/data/ServerContext.ts","../aaswZing/Zing/data/UserManager.ts","../aaswZing/Zing/data/RightsManager.ts","../aaswZing/Zing/data/Query.ts","../aaswZing/Zing/data/DataSource.ts","../aaswZing/Zing/data/DataObj.ts","../aaswZing/Zing/data/HTTPDataSource.ts","../aaswZing/Zing/data/MemDataSource.ts","../aaswZing/Zing/data/CacheDataSource.ts","models/ZPerson.ts","models/Person.ts","models/ZTeam.ts","models/Team.ts","models/ZPlayer.ts","models/Player.ts","models/ZGameEvent.ts","models/GameEvent.ts","models/ZGame.ts","models/Game.ts","models/ZMake.ts","common/AllRightsManager.ts","../aaswZing/Zing/zui/ZUITypes.ts","../aaswZing/Zing/zui/ZUI.ts","../aaswZing/Zing/zui/TextUI.ts","../aaswZing/Zing/zui/ButtonUI.ts","../aaswZing/Zing/zui/InputUI.ts","../aaswZing/Zing/zui/TextFieldUI.ts","../aaswZing/Zing/zui/PageManager.ts","../aaswZing/Zing/zui/TabUI.ts","../aaswZing/Zing/zui/DivUI.ts","../aaswZing/Zing/zui/TypeSwitchUI.ts","../aaswZing/Zing/zui/OpenCloseUI.ts","../aaswZing/Zing/zui/KeyListUI.ts","../aaswZing/Zing/zui/Messages.ts","../aaswZing/Zing/zui/SelectUI.ts","../aaswZing/Zing/zui/Modal.ts","../aaswZing/Zing/zui/HTMLEditUI.ts","../aaswZing/Zing/zui/ClickWrapperUI.ts","../aaswZing/Zing/zui/BreakUI.ts","../aaswZing/Zing/zui/ObjListUI.ts","../aaswZing/Zing/zui/FileDropTargetUI.ts","../aaswZing/Zing/zui/IconButtonUI.ts","../aaswZing/Zing/zui/ColorPickerUI.ts","../aaswZing/Zing/zui/SliderUI.ts","../aaswZing/Zing/zui/StyleCheckUI.ts","../aaswZing/Zing/zui/DoneIndicatorUI.ts","../aaswZing/Zing/zui/DropDownChoiceUI.ts","../aaswZing/Zing/zui/DateTimeUI.ts","../aaswZing/Zing/zui/DragDropWrapperUI.ts","../aaswZing/Zing/zui/ImageUI.ts","../aaswZing/Zing/zui/ProcessLogUI.ts","../aaswZing/Zing/zui/DataTableUIAbs.ts","../aaswZing/Zing/analysis/DataTableAbs.ts","../aaswZing/Zing/analysis/DataRowAbs.ts","../aaswZing/Zing/analysis/DataRow.ts","../aaswZing/Zing/analysis/DataColumnAbs.ts","../aaswZing/Zing/analysis/DataColumn.ts","../aaswZing/Zing/analysis/DataTable.ts","../aaswZing/Zing/zui/DataTableUI.ts","../aaswZing/Zing/analysis/DataTableRowLabeledAbs.ts","../aaswZing/Zing/analysis/DataTableRowLabeled.ts","../aaswZing/Zing/zui/DataTableRowLabeledUI.ts","../aaswZing/Zing/zui/ChartUI.ts","../aaswZing/Zing/textprocessing/LineDiff.ts","../aaswZing/Zing/textprocessing/StringDiff.ts","../aaswZing/Zing/zui/TextEditUI.ts","client/pages/HomePage.ts","client/views/PersonCard.ts","client/views/PersonSelector.ts","client/pages/TeamPage.ts","client/main.ts","../aaswZing/Zing/data/clientRefs.ts","../aaswZing/Zing/textprocessing/package.ts","../aaswZing/Zing/zui/refs.ts","client/pages/package.ts"],"names":[],"mappings":"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","file":"client.d.ts","sourcesContent":["/**\n* The DB module contains some basic debugging aids. In particular\n* it provides mechanisms for writing outputs to the console log so that they appear in \n* a nested outline.\n*/\nmodule DB {\n    function quiet():boolean{\n        try {\n            if (process.env.DB==\"quiet\")\n                return true;\n        } catch (e){\n            return false;\n        }\n        return false;\n    }\n    var level = 0;\n    /**\n    * This will open a new level of indentation\n    * @param message is the message to be output with the level header\n    * @param obj an optional object that will be provided with the header.\n    * In many browsers this object can be opened and explored in depth by the debugger.\n    */\n    export function start(message: string, obj?: any) {\n        if (quiet()) return\n        if (dbon) {\n            msg(\">\" + message, obj);\n            level++;\n        }\n    }\n    /**\n    * This will output a message at the current level of indentation\n    * @param message is the message to be output \n    * @param obj an optional object that will be provided with the message.\n    * In many browsers this object can be opened and explored in depth by the debugger.\n    */\n    export function end(message: string, obj?: any) {\n        if (quiet()) return\n        if (dbon) {\n            level--;\n            if (level < 0)\n                level = 0;\n            msg(\"<\" + message, obj);\n        }\n\n    }\n    var dbop:boolean=false;\n    export function dbOnPage(db:boolean){\n        dbop=db;\n    }\n    /**\n    * This will close a level of indentation\n    * @param message is the message to be output with the level footer\n    * @param obj an optional object that will be provided with the footer.\n    * In many browsers this object can be opened and explored in depth by the debugger.\n    */\n    export function msg(message: string, obj?: any) {\n        if (quiet()) return\n        if (dbon) {\n            var pre = \"\";\n            for (var i = 0; i < level; i++) {\n                pre += \"   \";\n            }\n            if (obj)\n                console.log(pre + message, obj);\n            else\n                console.log(pre + message);\n            if (dbop){\n                let span = document.createElement(\"div\");\n                span.innerHTML=pre+message;\n                span.style.cssText=\"width:100%\";\n                let dbout = document.getElementById(\"dbout\");\n                if (dbout)\n                    dbout.append(span);\n            }\n        }\n    }\n\n    export function stackTrace(message: string) {\n        if (quiet()) return\n        try {\n            throw new Error(message);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    var dbon: boolean = true;\n    /**\n    * turns on debugging messages\n    */\n    export function on(msg: string) {\n        dbon = true;\n        start(\"+++\" + msg);\n    }\n    /**\n    * turns off debugging messages\n    */\n    export function off(msg: string) {\n        end(\"---\" + msg);\n        dbon = false;\n    }\n    var dbCounts = {};\n    export function count(name:string) {\n    \tlet count = dbCounts[name];\n    \tif (count)\n    \t\tcount++;\n    \telse\n    \t\tcount=1;\n    \tdbCounts[name]=count;\n    }\n    export function showCount(name:string){\n    \tlet count = dbCounts[name];\n    \tif (!count) count=0;\n    \tDB.msg(name,count);\n    }\n    export function showCounts(msg?:string){\n    \tlet m:string = \"counts \";\n    \tif (msg) m+=msg;\n    \tDB.start(m);\n    \tfor (let name in dbCounts){\n    \t\tDB.showCount(name);\n    \t}\n    \tDB.end(m);\n    }\n    export function clearCounts(name?:string){\n    \tif (name){\n    \t\tdbCounts[name]=0;\n    \t} else {\n    \t\tfor (let key in dbCounts){\n    \t\t\tDB.clearCounts(key);\n    \t\t}\n    \t}\n    }\n    var autoInterval=null;\n    export function countsAutoShow(millis:number){\n    \tif (autoInterval)\n    \t\tautoInterval.clearInterval();\n    \tautoInterval = setInterval(()=>{\n    \t\tDB.showCounts();\n    \t},millis);\n    }\n    export function noCountsAutoShow(){\n    \tclearInterval(autoInterval);\n    }\n\n}","\nclass ServerContext{\n    request:any;\n    response:any;\n    isLogin:boolean;\n    constructor(request,response){\n        this.request=request;\n        this.response=response;\n        this.isLogin=false;\n    }\n    setUserKey(userKey:string){\n        this.response.cookie(\"currentUserKey\",userKey);\n    }\n    getUserKey():string {\n        let key = this.request.cookies[\"currentUserKey\"];\n        return key;\n    }\n}","class UserManager {\n    protected currentUserName:string;\n    dataSource:DataSource;\n    protected currentUserKey:string;\n    constructor(){\n        this.currentUserName=null;\n        this.dataSource=null;\n        this.currentUserKey=null;\n    }\n    get userName():string { return this.currentUserName}\n    login(userName:string,password:string,done:(err:string,user:DataObj)=>void,\n            serverContext:ServerContext){\n        if (this.dataSource.isRemote()){\n            this.dataSource.httpLogin(userName,password,(err:string,user:DataObj)=>{\n                if (err) {\n                    done(err,null);\n                } else {\n                    this.currentUserName=userName;\n                    this.currentUserKey=user._key;\n                    done(null,user);\n                }\n            });\n        }else {\n            this.currentUserName=userName;\n            this.currentUserKey=null;\n            done(null,null);\n        }\n    }\n\n    logout(done:(err:string)=>void){\n        if (this.dataSource.isRemote()){\n            this.dataSource.httpLogout((err:string)=>{\n                if (err) {\n                    done(err);\n                } else {\n                    this.currentUserName=null;\n                    this.currentUserKey=null;\n                    done(null);\n                }\n            })\n        } else {\n            this.currentUserName=null;\n            this.currentUserKey=null;\n            done(null)\n        }\n    }\n    createUser(userDesc:any,password:string,done:(err:string)=>void,\n            serverContext:ServerContext){\n        done(null);\n    }\n    getUserKey(serverContext?:ServerContext):string{\n        if (serverContext){\n            return serverContext.getUserKey();\n        } else {\n            return this.currentUserKey;\n        }\n    }\n    getUser(done:(user:DataObj)=>void,serverContext?:ServerContext) {\n        let userKey = this.getUserKey(serverContext);\n        this.dataSource.GET(userKey,(err:string,user:DataObj)=>{\n            done(user);\n        },false,serverContext);\n    }\n    serverSideLogin(userName:string,password:string,serverContext:ServerContext,done:(err:string,user:DataObj)=>void){\n        DB.msg(\"serverSideLogin not implemented for this \",this);\n        done(\"no serverside login\",null);\n    }\n    serverSideLogout(serverContext:ServerContext,done:(err:string)=>void){\n        DB.msg(\"serverSideLogout not implemented for this \",this);\n        done(\"no serverside logout\");\n    }\n}","/// <reference path=\"UserManager.ts\"/>\n/// <reference path=\"ServerContext.ts\"/>\n/// <reference path=\"DataObj.ts\"/>\n\nabstract class RightsManager {\n    dataSource: DataSource;\n    userManager: UserManager;\n    constructor(dataSource: DataSource, userManager: UserManager) {\n        this.dataSource = dataSource;\n        this.userManager = userManager;\n        this.userManager.dataSource = this.dataSource;\n    }\n    /* Each of these methods verifies the ability for the current user\n        to execute the corresponding method on the DataSource.\n        If there are no problems, then null is returned.\n        Otherwise a descriptive message string is returned showing the violation\n    */\n\n    abstract checkGET(key: string, serverContext: ServerContext, done: (granted: boolean) => void);\n    checkGETm(keys: string[], serverContext: ServerContext, done: (granted: boolean) => void) {\n        this.checkAllGET(keys, 0, serverContext, done);\n    }\n    abstract checkGETBlob(blobKey: string, serverContext, done: (granted: boolean) => void);\n    abstract checkPUT(obj: DataObj, serverContext: ServerContext, done: (granted: boolean) => void);\n    checkPUTm(objs: DataObj[], serverContext: ServerContext, done: (granted: boolean) => void) {\n        this.checkAllPUT(objs, 0, serverContext, done);\n    }\n    abstract checkPUTBlob(serverContext: ServerContext, done: (granted: boolean) => void);\n    abstract checkDELETE(key: string, serverContext: ServerContext, done: (granted: boolean) => void);\n    abstract checkFIND(typeCode: string, search: Query, serverContext: ServerContext, done: (granted: boolean) => void);\n    login(userId: string, password: string, done: (err: string, user: DataObj) => void, serverContext: ServerContext) {\n        if (this.userManager)\n            this.userManager.login(userId, password, done, serverContext);\n        else\n            done(\"RightsManager has no UserManager to login\", null);\n    }\n    createUser(userDesc: any, password: string, done: (err: string) => void, serverContext: ServerContext) {\n        if (this.userManager)\n            this.userManager.createUser(userDesc, password, done, serverContext);\n        else\n            done(\"RightsManager has no UserManager to create user\");\n    }\n\n    protected checkAllGET(keys: string[], idx: number, serverContext: ServerContext, done: (granted: boolean) => void) {\n        if (idx >= keys.length) {\n            done(true);\n        } else {\n            let obj = keys[idx];\n            this.checkGET(obj, serverContext, (granted: boolean) => {\n                if (granted) {\n                    this.checkAllGET(keys, idx + 1, serverContext, done);\n                } else {\n                    done(false);\n                }\n            })\n        }\n    }\n    protected checkAllPUT(objs: DataObj[], idx: number, serverContext: ServerContext, done: (granted: boolean) => void) {\n        if (idx >= objs.length) {\n            done(true);\n        } else {\n            let obj = objs[idx];\n            this.checkPUT(obj, serverContext, (granted: boolean) => {\n                if (granted) {\n                    this.checkAllPUT(objs, idx + 1, serverContext, done);\n                } else {\n                    done(false);\n                }\n            })\n        }\n    }\n}","/** \n * These objects can be used to create queries that can be used in searches\n */\n\ntype QueryValue = number |string | boolean | Query\ntype NumberQuery = number | Query;\ntype StringQuery = string | Query;\ntype BooleanQuery = boolean | Query;\nclass Query{\n    exp:any;\n    private constructor(exp:any){\n        this.exp=exp;\n    }\n    static OR(options:QueryValue[]):Query{\n        let desc = { $$:\"OR\", options: options }\n        return new Query(desc);\n    }\n    static AND(options:QueryValue[]):Query{\n        return new Query ({ $$:\"AND\",options:options})\n    }\n    static range(from:QueryValue,to:QueryValue):Query{\n        return new Query({ $$:\"RANGE\", from:from,to:to})\n    }\n    static anything():Query{\n        return new Query({$$:\"ANY\"})\n    }\n    static dict(desc:{[attName:string]:QueryValue}):Query{\n        let d:any ={$$:\"DICT\"};\n        for (let k in desc){\n            d[k]=desc[k];\n        }\n        return new Query(d)\n    }\n    static is(value:number|string|boolean):Query{\n        return new Query( { $$:\"IS\",value:value})\n    }\n    static listContains(query:QueryValue):Query{\n        return new Query( {$$:\"LC\",query:query})\n    }\n    static match(q1:QueryValue,q2:QueryValue):boolean{\n        if (!q1)\n            if (!q2) return true;\n            else return false;\n        else\n            if (!q2) return false;\n        if (typeof q1 != typeof q2) return false;\n        switch(typeof q1){\n            case \"number\":\n            case \"string\":\n            case \"boolean\":\n                return q1==q2;\n            default:{\n                return this.matchQuery(<Query>q1,<Query>q2);\n            }\n        }\n    }\n    matches(val:any):boolean{\n        if (val instanceof DataObj) return this.matchesDO(val);\n        switch(this.exp.$$){\n            case \"OR\":\n                for (let i in this.exp.options){\n                    let opt = this.exp.options[i];\n                    if (Query.matchesQV(opt,val)) return true;\n                }\n                return false;\n            case \"AND\":\n                for (let i in this.exp.options){\n                    let opt = this.exp.options[i];\n                    if (!Query.matchesQV(opt,val)) return false\n                }\n                return true;\n            case \"RANGE\":\n                return this.rangeMatch(this.exp.from,this.exp.to,val);\n            case \"ANY\":\n                return true;\n            case \"DICT\":\n                return this.dictMatch(this.exp,val);\n            case \"IS\":\n                return this.exp.value == val;\n            case \"LC\":\n                for (let i in val){\n                    let v = val[i];\n                    if (Query.matchesQV(this.exp.query,v)) return true;\n                }\n                return false;\n\n        }\n    }\n    static matchesQV(qv:QueryValue,val:any):boolean{\n        switch(typeof qv){\n            case \"number\":\n            case \"string\":\n            case \"boolean\":\n                return qv == val;\n            default:\n                return qv.matches(val);\n        }\n    }\n    attribute(attName:string):number | string | boolean | Query{\n        if (this.exp.$$ != \"DICT\") return null;\n        let att = this.exp[attName];\n        return att;\n    }\n\n    toJSON():any{\n        let src = this.exp;\n        let rslt:any = { $$:src.$$ }\n        switch(this.exp[\"$$\"]){\n            case \"OR\":\n            case \"AND\":\n                rslt.options = this.queryValueListToJSON(src.options)\n                break;\n            case \"RANGE\":\n                rslt.from = this.queryValueToJSON(src.from);\n                rslt.to = this.queryValueToJSON(src.to);\n                break;\n            case \"ANY\":\n                break;\n            case \"DICT\":\n                rslt=this.dictToJSON(src);\n                break;\n            case \"IS\":\n                rslt.value = this.queryValueToJSON(src.value);\n                break;\n            case \"LC\":\n                rslt.value = this.queryValueToJSON(src.query);\n                break;\n        }\n        return rslt;\n    }\n    \n    static fromJSON(json:any):QueryValue{\n        switch(typeof json){\n            case \"number\":\n            case \"string\":\n            case \"boolean\":\n                return json;\n            default:\n                switch(json.$$){\n                    case \"OR\":\n                        return Query.OR(Query.listFromJSON(json.options));\n                    case \"AND\":\n                        return Query.AND(Query.listFromJSON(json.options));\n                    case \"RANGE\":\n                        return Query.range(Query.fromJSON(json.from),Query.fromJSON(json.to))\n                    case \"ANY\":\n                        return Query.anything();\n                    case \"DICT\":\n                        let dict = {};\n                        for (let i in json){\n                            if (i!=\"$$\"){\n                                dict[i]=Query.fromJSON(json[i]);\n                            }\n                        }\n                        return Query.dict(dict);\n                    case \"IS\":\n                        return Query.is(json.value)\n                    case \"LC\":\n                        return Query.listContains(Query.fromJSON(json.query))\n                }\n        }\n    }\n    private queryValueListToJSON(list:QueryValue[]):any{\n        let rslt = [];\n        for (let i in list){\n            let item = list[i];\n            rslt.push(this.queryValueToJSON(item))\n        }\n        return rslt;\n    }\n    private queryValueToJSON(val:QueryValue){\n        switch(typeof val){\n            case \"number\":\n            case \"string\":\n            case \"boolean\":\n                return val;\n            default:\n                return val.toJSON();\n        }\n    }\n    private dictToJSON(desc:{[attName:string]:QueryValue}):any{\n        let rslt:any={ $$:\"DICT\"};\n        for (let i in desc){\n            rslt[i] = this.queryValueToJSON(desc[i])\n        }\n        return rslt;\n    }\n\n    private static listFromJSON(list:any[]):QueryValue[] {\n        let rslt:QueryValue[]=[];\n        for (let i in list){\n            let item = Query.fromJSON(list[i]);\n            rslt.push(item);\n        }\n        return rslt;\n    }\n\n    toMongo():any{\n        let rslt:any={};\n        \n        switch(this.exp.$$){\n            case \"OR\":\n                let oList:[]=this.mongoOptionsList(this.exp.options);\n                return { $or: oList }\n            case \"AND\":\n                return { $and: this.mongoOptionsList(this.exp.options)}\n            case \"RANGE\":\n                if (this.exp.from ){\n                    rslt.$gte = this.exp.from;\n                }\n                if (this.exp.to){\n                    rslt.$lte = this.exp.to;\n                }\n                return rslt;\n            case \"ANY\":\n                return { $exists: true};\n            case \"DICT\":\n                for (let i in this.exp){\n                    if (i!=\"$$\"){\n                        let v = this.exp[i];\n                        if (v) {\n                            if (v.exp && v.exp.$$ && v.exp.$$==\"DICT\"){\n                                Query.mongoCollapseDICT(rslt,i,v.exp);\n                            } else\n                                rslt[i]=Query.toMongoValue(v)\n                        } else if (v==0)\n                            rslt[i]=Query.toMongoValue(v)\n                    }\n                }\n                return rslt;\n            case \"IS\":\n                return this.exp.value;\n            case \"LC\":\n                return { $elemMatch: Query.toMongoValue(this.exp.query)}\n            default:\n                return { badoperator:this.exp.$$}\n        }\n    }\n    private static mongoCollapseDICT(rslt:{},key:string,v:{}){\n        for (let k in v){\n            if (k!=\"$$\"){\n                rslt[key+\".\"+k]=v[k];\n            }\n        }\n    }\n    private mongoOptionsList(options:QueryValue[]){\n        let rslt:any=[];\n        for (let i in options){\n            let option = options[i];\n            let mongOpt = Query.toMongoValue(option);\n            rslt.push(mongOpt);\n        }\n        return rslt;\n    }\n    private static toMongoValue(val:QueryValue){\n        switch(typeof val){\n            case \"number\":\n            case \"string\":\n            case \"boolean\":\n                return val;\n            default:\n                return val.toMongo();\n        }\n    }\n    private static matchQuery(q1:Query,q2:Query):boolean{\n        if (q1.exp.$$ != q2.exp.$$) return false;\n        switch(q1.exp.$$){\n            case \"OR\":\n            case \"AND\":\n                return this.matchOptionLists(q1.exp.options,q2.exp.options)\n            case \"RANGE\":\n                return this.match(q1.exp.from,q2.exp.from) && this.match(q1.exp.to,q2.exp.to);\n            case \"ANY\":\n                return true;\n            case \"DICT\":\n                return this.matchDicts(q1.exp,q2.exp);\n            case \"IS\":\n                return q1.exp.value == q2.exp.value;\n            case \"LC\":\n                return this.match(q1.exp.query,q2.exp.query);\n            default:\n                DB.msg(\"matchQuery got invalid $$\",q1.exp.$$);\n                return false;\n        }\n    }\n    private static matchOptionLists(l1:QueryValue[],l2:QueryValue[]):boolean{\n        if (l1.length!=l2.length) return false;\n        for (let i in l1){\n            let q=l1[i];\n            if (!this.matchOptions(q,l2)) return false;\n        }\n        for (let i in l2){\n            let q=l2[i];\n            if (!this.matchOptions(q,l1)) return false;\n        }\n        return true;\n    }\n    private static matchOptions(q:QueryValue,list:QueryValue[]):boolean{\n        for (let i in list){\n            let lq = list[i];\n            if (this.match(q,lq)) return true;\n        }\n        return false;\n    }\n    private static matchDicts(d1:{},d2:{}):boolean{\n        for (let k in d1){\n            let a1=d1[k];\n            let a2=d2[k];\n            if (!this.match(a1,a2)) return false;\n        }\n        for (let k in d2){\n            let a1=d1[k];\n            let a2=d2[k];\n            if (!this.match(a1,a2)) return false;\n        }\n        return true;\n    }\n    \n    private rangeMatch(from,to,val){\n        let fromTrue = true;\n        if (from){\n            switch(typeof from){\n                case \"number\":\n                    fromTrue=from<=val;\n                    break;\n                case \"string\":\n                    fromTrue = from.localeCompare(val)>=0;\n                    break;\n                default:\n                    fromTrue=false;\n                    break;\n            }\n        }\n        let toTrue = true;\n        if (to){\n            switch(typeof to){\n                case \"number\":\n                    toTrue=val<=to;\n                    break;\n                case \"string\":\n                    toTrue = val.localeCompare(to)>=0;\n                    break;\n                default:\n                    toTrue=false;\n                    break;\n            }\n        }\n        return fromTrue && toTrue;\n    }\n    private dictMatch(dict:{[attName:string]:QueryValue},val):boolean{\n        if (typeof val != \"object\") return false;\n        for (let att in dict){\n            if (att!=\"$$\"){\n                let dVal = dict[att];\n                let vVal = val[att];\n                if (!Query.matchesQV(dVal,vVal)) return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    matchesDO(obj:DataObj):boolean{\n        switch(this.exp.$$){\n            case \"OR\":\n                for (let i in this.exp.options){\n                    let opt = this.exp.options[i];\n                    if (Query.matchesQV(opt,obj)) return true;\n                }\n                return false;\n            case \"AND\":\n                for (let i in this.exp.options){\n                    let opt = this.exp.options[i];\n                    if (!Query.matchesQV(opt,obj)) return false\n                }\n                return true;\n            case \"RANGE\":\n                return false;// no ranges on DataObj\n            case \"ANY\":\n                return true;\n            case \"DICT\":\n                return this.dictMatchDO(this.exp,obj);\n            case \"IS\":\n                return false; // no is test for DataObj\n            case \"LC\":\n                return false; // no list contains on DataObj\n        }\n    }\n    private dictMatchDO(dict:{[attName:string]:QueryValue},obj:DataObj):boolean{\n        for (let att in dict){\n            if (att!=\"$$\"){\n                let dVal = dict[att];\n                let oVal = obj[\"get\"+att]();\n                if (!Query.matchesQV(dVal,oVal)) return false;\n            }\n        }\n        return true;\n    }\n}","/// <reference path=\"../share/DB.ts\"/>\n/// <reference path=\"DataObj.ts\"/>\n/// <reference path=\"RightsManager.ts\"/>\n/// <reference path=\"Query.ts\"/>\n\n/*type DataSearchRangeSpec = { from: string | number, to: string | number};\ntype NumberQuery = number | {from?:number,to?:number};\ntype StringQuery = string | {from?:string, to?:string};\ntype FieldQuery = NumberQuery | StringQuery | boolean;\ntype DataSearchSpec = { [fieldName:string]:FieldQuery}*/\ninterface DataMonitor {\n    notify();\n}\nclass DataSource {\n    private rightsManager_:RightsManager; // any will be replaced with actual interface later\n    private dataMonitor:DataMonitor;\n    constructor(){\n        DataObj.globalSource=this;\n    }\n    setDataMonitor(dataMonitor:DataMonitor){\n        this.dataMonitor=dataMonitor;\n    }\n    getRightsManager():RightsManager{\n        return this.rightsManager_;\n    }\n    setRightsManager(rm:RightsManager){\n        this.rightsManager_=rm;\n    }\n    isRemote():boolean { return false}\n    notify(){\n        if (this.dataMonitor) \n            this.dataMonitor.notify();\n    }\n    GET(key:string, done:(err:string,data:DataObj)=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        done(null,null);\n    }\n    canGet(key:string,serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm = this.rightsManager_;\n        if (rm){\n            rm.checkGET(key,serverContext,done);\n        } else {\n            done(false);\n        }\n    } \n    cGET(key:string,forceRequest?:boolean):DataObj{\n        DB.msg( \"cGET This data source has no caching\");\n        return null;\n    }\n    GETm(keys:string[],done:(err:string,data:DataObj[])=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        done(null,null);\n    }\n    canGETm(keys:string[],serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm=this.rightsManager_\n        if (rm){\n            rm.checkGETm(keys,serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    cGETm(keys:string[],forceRequest?:boolean):DataObj[]{\n        DB.msg( \"cGETm This data source has no caching\");\n        return null;\n    }\n    \n    PUT(obj:DataObj,done:(err:string,newObj:DataObj)=>void,serverContext:ServerContext){\n        done(null,null);\n    }\n    canPUT(obj:DataObj,serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm=this.rightsManager_;\n        if (rm){\n            rm.checkPUT(obj,serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    canGETBlob(blobKey:string,serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm=this.rightsManager_;\n        if(rm){\n            rm.checkGETBlob(blobKey,serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    GETBlob(blobKey:string,serverContext:ServerContext,done:(err:string,blob:BlobStoreRec)=>void){\n        DB.msg(\"data source has no downloadFile\",this);\n    }\n    canPUTBlob(serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm = this.rightsManager_;\n        if (rm){\n            rm.checkPUTBlob(serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    PUTBlob(blob:Blob,name:string,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        done(null,null);\n    }\n    PUTFileBlob(file:File,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        done(null,null);\n    }\n    PUTm(objs:DataObj[],done:(err:string,newObjs:DataObj[])=>void,serverContext:ServerContext){\n        done(null,null);\n    }\n    canPUTm(objs:DataObj[],serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm=this.rightsManager_;\n        if (rm){\n            rm.checkPUTm(objs,serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    DELETE(key:string,done?:(err:string)=>void){\n        done(null)\n    }\n    canDELETE(key:string,serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm=this.rightsManager_;\n        if (rm){\n            rm.checkDELETE(key,serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    FIND(typeCode:string, search:Query,done:(err:string,keys:string[],objs:DataObj[])=>void,\n            keysOnly:boolean,forceRequest:boolean,serverContext:ServerContext){\n        done(null,null,null);\n    }\n    protected getFromKeys(keys:string[],idx:number,objs:DataObj[],done:(objs:DataObj[])=>void,serverContext:ServerContext){\n        if (idx>=keys.length){\n            done(objs);\n        } else {\n            this.GET(keys[idx],(err:string,data:DataObj)=>{\n                if (!err){\n                    objs.push(data);\n                    this.getFromKeys(keys,idx+1,objs,done,serverContext);\n                }\n            },false,serverContext);\n        }\n    }\n    canFIND(typeCode:string,search:Query,serverContext:ServerContext,done:(granted:boolean)=>void){\n        let rm=this.rightsManager_;\n        if (rm){\n            rm.checkFIND(typeCode,search,serverContext,done);\n        } else {\n            done(false);\n        }\n    }\n    cFIND(typeCode:string,search:Query,keysOnly:boolean,forceRequest:boolean):string[]{\n        DB.msg( \"cFIND no caching on this data service\");\n        return null;\n    }\n    static collectionFromKey(key:string):string{\n        if (!key){\n            DB.msg(\"no key for collection\");\n            return \"\";\n        }\n        let parts = key.split(\"_\");\n        let typeCode = parts[0];\n        let colCode = DataObj.typeToCollection(typeCode);\n        return colCode;\n    }\n    static typeFromKey(key:string):string{\n        let parts = key.split(\"_\");\n        return parts[0];\n    }\n    static idFromKey(key:string):string {\n        let parts = key.split(\"_\");\n        return parts[1];\n    }\n    static generateKey(typeCode:string):string {\n        let id = Math.random()*1000000;\n        id = Math.floor(id);\n        return typeCode+\"_\"+id;\n    }\n    static filterKeyList(expectedCode:string, keyList:string[]):string[] {\n        let rslt:string[] = [];\n        for (let idx in keyList){\n            let key = keyList[idx];\n            let ty = DataSource.typeFromKey(key);\n            if (DataObj.checkTypeCode(expectedCode,ty)){\n                rslt.push(key);\n            }\n        }\n        return rslt;\n    }\n    touched(obj:DataObj):boolean{\n        this.notify();\n        return true;\n    }\n    login(userId:string,password:string,done:(err:string)=>void,serverContext?:ServerContext){\n        if (this.getRightsManager())\n            this.getRightsManager().login(userId,password,done,serverContext);\n        else\n            done(\"DataSource has no RightsManager to login\");\n    }\n    httpLogin(userId:string,password:string,done:(err:string,user:DataObj)=>void){\n        done(\"No httpLogin for this data source\",null);\n    }\n    httpLogout(done:(err:string)=>void){\n        done(\"No httpLogin for this data source\");\n    }\n    createUser(userDesc:any,password:string,done:(err:string)=>void,serverContext?:ServerContext){\n        if (this.getRightsManager())\n            this.getRightsManager().createUser(userDesc,password,done,serverContext);\n        else\n            done(\"DataSource has no RightsManager to create user\");\n    }\n\n}\n","/// <reference path=\"ServerContext.ts\"/>\n/// <reference path=\"./DataSource.ts\"/>\n\n\n//\nclass DataObj {\n\tprotected _type:string;\n\t_key:string;\n\tparent:DataObj;\n\tdataSource: DataSource;\n\tstatic globalSource:DataSource;\n\tprivate blockTouch_:boolean;\n\tconstructor (json:any){\n\t\tthis.blockTouch_=false;\n\t\tthis._type = this.getTypeCode();\n\t\tthis._key = json._key;\n\t\tif (!json._key && json._id){\n\t\t\tthis._key = this.getTypeCode()+\"_\"+json._id;\n\t\t}\n\t\tthis.parent=null;\n\t}\n\t\n\tgetTypeCode():string{\n\t\treturn null;\n\t}\n\tgetDataSource():DataSource{\n\t\tif (this.dataSource)\n\t\t\treturn this.dataSource;\n\t\telse if (this.parent)\n\t\t\treturn this.parent.getDataSource();\n\t\telse if (DataObj.globalSource)\n\t\t\treturn DataObj.globalSource;\n\t\telse\n\t\t\treturn null;\n\t}\n\tgetUserManager():UserManager{\n\t\tlet ds = this.getDataSource();\n\t\tif (ds){\n\t\t\tlet rm = ds.getRightsManager();\n\t\t\tif (rm){\n\t\t\t\tlet um = rm.userManager;\n\t\t\t\treturn um;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\ttouch():boolean{ // touch will return false if any permissions are violated.\n\t\tif (this.blockTouch_) return true;\n\t\tif (this.dataSource){\n\t\t\tif (this.dataSource.touched(this)){ // the dataSource is the prime mechanism for permissions\n\t\t\t\tif (this.parent)\n\t\t\t\t\treturn this.parent.touch();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.parent)\n\t\t\t\treturn this.parent.touch();\n\t\t\telse\n\t\t\t\treturn true;\n\t\t}\n\t}\n\tblockTouch(on:boolean){\n\t\tthis.blockTouch_=on;\n\t\tif(!on) this.touch();\n\t}\n\ttoJSON():any{\n        return null;\n\t}\n\tstatic GET(key:string, done:(err:string,newObj:DataObj)=>void,forceRequest:boolean,\n\t\t\tserverContext:ServerContext){\n\t\tlet ds = DataObj.globalSource;\n\t\tif (ds){\n\t\t\tds.canGet(key,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.GET(key,done,forceRequest,serverContext);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR GET on ${key} had rights fail`,null);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tdone(`ERR GET on ${key} has no dataSource`,null);\n\t\t}\n\t}\n\tstatic cGET(key:string,forceRequest:boolean){\n\t\tlet ds=DataObj.globalSource;\n\t\tif (ds){\n\t\t\treturn ds.cGET(key,forceRequest);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tstatic GETm(keys:string[], done:(err:string,newObjs:DataObj[])=>void,forceRequest:boolean,\n\t\t\tserverContext:ServerContext){\n\t\tlet ds = DataObj.globalSource;\n\t\tif (ds){\n\t\t\tds.canGETm(keys,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.GETm(keys,done,forceRequest,serverContext);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR GETm  had rights fail`,null);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tdone(`ERR GETm has no dataSource`,null);\n\t\t}\n\t}\n\t\n\tstatic cGETm(keys:string[],forceRequest?:boolean):DataObj[]{\n\t\tlet ds= DataObj.globalSource;\n\t\tif (ds){\n\t\t\treturn ds.cGETm(keys,forceRequest);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tGETFileBlob(blobKey:string,serverContext:ServerContext,done:(err:string,blob:BlobStoreRec)=>void){\n\t\tlet ds = this.getDataSource();\n\t\tif (ds){\n\t\t\tds.canGETBlob(blobKey,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.GETBlob(blobKey,serverContext,done);\n\t\t\t\t} else {\n\t\t\t\t\tdone(\"ERR GETBlobFile had rights fail\",null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tPUT(done:(err:string,newObj:DataObj)=>void,serverContext?:ServerContext){\n\t\tlet ds = this.getDataSource();\n\t\tif (ds){\n\t\t\tds.canPUT(this,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.PUT(this,done,serverContext);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR PUT on ${this._key} had rights fail`,null);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tdone(`ERR PUT on ${this._key} has no dataSource`,null);\n\t\t}\n\t}\n\tstatic PUTFileBlob(file:File,done:(err:string,blobKey:string)=>void,serverContext?:ServerContext){\n\t\tlet ds=this.globalSource;\n\t\tif (ds){\n\t\t\tds.canPUTBlob(serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.PUTFileBlob(file,serverContext,done);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR PUTFileBlob  had rights fail`,null);\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tdone(`ERR PUTFileBlob has no dataSource`,null);\n\t\t}\n\t}\n\tstatic PUTBlob(blob:Blob,name:string,done:(err:string,blobKey:string)=>void,serverContext?:ServerContext){\n\t\tlet ds=this.globalSource;\n\t\tif (ds){\n\t\t\tds.canPUTBlob(serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.PUTBlob(blob,name,serverContext,done);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR PUTFileBlob  had rights fail`,null);\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tdone(`ERR PUTBlob has no dataSource`,null);\n\t\t}\t\t\n\t}\n\tstatic GETBlob(blobKey:string,serverContext:ServerContext,done:(err:string,blob:BlobStoreRec)=>void){\n\t\tlet ds=this.globalSource;\n\t\tif (ds){\n\t\t\tds.canGETBlob(blobKey,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.GETBlob(blobKey,serverContext,done);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR getFileBlob had rights fail`,null);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n    }\n\tstatic PUTm(objs:DataObj[],done:(err:string, newObjs:DataObj[])=>void,serverContext:ServerContext){\n\t\tlet ds = this.globalSource;\n\t\tif (ds){\n\t\t\tds.canPUTm(objs,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.PUTm(objs,done,serverContext);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR PUTm had rights fail`,null);\n\t\t\t\t}\n\t\t\t});\n\t\t}else {\n\t\t\tdone(`ERR PUTm  has no DataObj.globalSource`,null);\n\t\t}\n\t}\n\tDELETE(done?:(err:string)=>void,serverContext?:ServerContext){\n\t\tlet ds = this.getDataSource();\n\t\tif (ds){\n\t\t\tds.canDELETE(this._key,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.DELETE(this._key,done);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR DELETE on ${this._key} has rights fail`);\n\t\t\t\t}\n\t\t\t})\t\n\t\t} else {\n\t\t\tdone(`ERR DELETE on ${this._key} has no dataSource`);\n\t\t}\n\t}\n\tstatic FIND(typeCode:string,search:Query,done:(err:string,keys:string[])=>void,\n\t\t\tkeysOnly:boolean,forceRequest:boolean,serverContext:ServerContext){\n\t\tlet ds=DataObj.globalSource;\n\t\tif (ds){\n\t\t\tds.canFIND(typeCode,search,serverContext,(granted:boolean)=>{\n\t\t\t\tif (granted){\n\t\t\t\t\tds.FIND(typeCode,search,done,keysOnly,forceRequest,serverContext);\n\t\t\t\t} else {\n\t\t\t\t\tdone(`ERR FIND on ${typeCode} had rights fail`,null);\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tdone(`ERR FIND on ${typeCode} has no dataSource`,null);\n\t\t}\n\t}\n\tstatic cFIND(typeCode:string,search:Query,keysOnly:boolean,forceRequest:boolean):string[]{\n\t\tlet ds= DataObj.globalSource;\n\t\tif (ds){\n\t\t\treturn ds.cFIND(typeCode,search,keysOnly,forceRequest);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tstatic checkTypeCode(expectedType:string, receivedType:string):boolean{\n\t\tif (!expectedType) return true;\n\t\tif (!receivedType) return true;\n\t\treturn DataObj.canA[expectedType][receivedType];\n\t}\n\tstatic make:(expectedType:string,json:any)=>DataObj;\n\tstatic makeList:(expectedType:string,json:any[],parent:DataObj)=>DataObj[];\n\tstatic makeDict:(expectedType:string,json:any,parent:DataObj)=>{[k:string]:DataObj};\n\tprivate static classInfo_:DataObjClassInfo;\n\tstatic set classInfo(info:DataObjClassInfo){\n\t\tDataObj.classInfo_=info;\n\t\tDataObj.buildTypeToCollection();\n\t\tDataObj.buildCanAssign();\n\t}\n\tstatic get classInfo():DataObjClassInfo{\n\t\treturn DataObj.classInfo_;\n\t}\n\tprivate static tToC:{ [typeCode:string]:string};\n\tprivate static canA:{ [superCode:string]:{[typeCode:string]:boolean}};\n\tprivate static sRoots: { [rootClassName:string]:boolean}=null;\n\tprivate static buildTypeToCollection(){\n\t\tDataObj.tToC={};\n\t\tDataObj.sRoots={};\n\t\tfor ( let typeCode in DataObj.classInfo_){\n\t\t\tDataObj.tToC[typeCode]=DataObj.topSuperCode(typeCode);\n\t\t}\n\t}\n\tstatic typeCodeToName(typeCode:string){\n\t\tlet ci = this.classInfo[typeCode];\n\t\tlet cn = ci.className;\n\t\treturn cn;\n\t}\n\tstatic typeToCollection(typeCode:string){\n\t\treturn DataObj.tToC[typeCode];\n\t}\n\tstatic collections():{ [rootClassName:string]:boolean }{\n\t\treturn DataObj.sRoots;\n\t}\n\tprivate static topSuperCode(typeCode:string):string{\n\t\tlet ci = DataObj.classInfo_[typeCode];\n\t\tif (ci && ci.superCode && ci.superCode.length>0 && typeCode != ci.superCode){\n\t\t\treturn this.topSuperCode(ci.superCode);\n\t\t} else {\n\t\t\tDataObj.sRoots[typeCode]=true;\n\t\t\treturn typeCode;\n\t\t}\n\t}\n\tprivate static buildCanAssign(){\n\t\tDataObj.canA = {};\n\t\tfor (let typeCode in DataObj.classInfo_){\n\t\t\tDataObj.superCanAssign(typeCode,typeCode);\n\t\t}\n\t}\n\tprivate static superCanAssign(superCode,typeCode){\n\t\tlet ca = DataObj.canA;\n\t\tif (!ca[superCode])\n\t\t\tca[superCode]={};\n\t\tca[superCode][typeCode]=true;\n\t\tlet ci = DataObj.classInfo_[superCode];\n\t\tif (ci){\n\t\t\tlet sc = ci.superCode;\n\t\t\tif (sc && sc.length>0)\n\t\t\t\tthis.superCanAssign(sc,typeCode);\n\t\t}\n\t}\n\n}\n\ntype DataObjClassInfo = { \n\t[typeCode:string]:{ \n\t\tclassName:string, \n\t\tsuperCode?:string,\n\t\tkeyed:boolean,\n\t\tfields: {\n\t\t\t[fieldName:string]: { type:string, isList:boolean, isDict:boolean}\n\t\t}\n\t}\n}\n\ntype MongoBinary = any;\ntype BlobStoreRec = {\n\t_key?:string,\n\tname:string,\n\ttype:string,\n\tnextBlob?:string,\n\tdata: MongoBinary\n}","/// <reference path=\"./DataObj.ts\"/>\n\n\nclass HTTPDataSource extends DataSource {\n    urlRoot:string;\n    constructor(urlRoot?:string){\n        super();\n        this.urlRoot=urlRoot;\n    }\n    isRemote():boolean { return true; }\n    GET(key:string, done:(err:string,data:DataObj)=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        let _this=this;\n        if (!key){\n            done(null,null);\n            return;\n        }\n        let url = `${this.urlRoot}data/get/${key}`;\n        let typeCode=DataSource.collectionFromKey(key);\n        DB.msg(\"HTTP GET \",url);\n        let http = new XMLHttpRequest();\n        http.open(\"GET\",url);\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    let obj = DataObj.make(typeCode,json)\n                    obj.dataSource=_this;\n                    done(null,obj);\n                    _this.notify();\n                } else\n                    done(\"\"+this.status+\" \"+this.statusText,null);\n            }\n        }\n        http.send();\n    }\n    httpLogin(userName:string, password:string,done:(err:string,user:DataObj)=>void){\n        DB.msg(\"http login\",userName);\n        let http = new XMLHttpRequest();\n        let url = `${this.urlRoot}login?userName=\"${userName}\"&password=\"${password}\"`;\n        http.open(\"GET\",url);\n        http.onreadystatechange=function(){\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let userJSONStr = this.responseText;\n                    let userJSON = JSON.parse(userJSONStr);\n                    let user = DataObj.make(null,userJSON);\n                    done(null,user);\n                } else {\n                    done(`${this.status} ${this.responseText}`,null);\n                }\n            }\n        }\n        http.send();\n\n    }\n    httpLogout(done:(err:string)=>void){\n        DB.msg(\"http logout\");\n        let http = new XMLHttpRequest();\n        let url = `${this.urlRoot}logout`;\n        http.open(\"GET\",url);\n        http.onreadystatechange=function(){\n            if (this.readyState==4){\n                if (this.status == 200){\n                    done(null);\n                } else {\n                    done(`${this.status} ${this.responseText}`);\n                }\n            }\n        }\n        http.send();\n    }\n    getCurrentUserKey(done:(userKey:string)=>void,request?,response?){\n        DB.msg(\"http getCurrentUserKey\");\n        let http = new XMLHttpRequest();\n        let url = `${this.urlRoot}currentuser`;\n        http.open(\"GET\",url);\n        http.onreadystatechange=function(){\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let userKey = this.responseText;\n                    if (userKey.length==0){\n                        done(null);\n                    } else {\n                        done(userKey);\n                    }\n                } else {\n                    done(null);\n                }\n            }\n        }\n        http.send();\n    }\n    GETm(keys:string[],done:(err:string,data:DataObj[])=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        let _this=this;\n        if (!keys){\n            done(null,[]);\n            return;\n        }\n        let url=`${this.urlRoot}data/getm`;\n        let http=new XMLHttpRequest();\n        http.open(\"POST\",url);\n        http.setRequestHeader(\"Content-Type\",\"application/json\");\n        let jstr = JSON.stringify({ keys:keys });\n        http.send(jstr);\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    let rslt:DataObj[] = [];\n                    for (let i in json){\n                        let objDesc = json[i];\n                        let mobj:DataObj = DataObj.make(null,objDesc);\n                        mobj.dataSource=_this;\n                        rslt.push(mobj);\n                    }\n                    if (done) done(null,rslt);\n                    _this.notify();\n                } else\n                    if (done) done(\"\"+this.status+\" \"+this.statusText,null);\n            }\n        }\n    }\n    GETBlob(blobKey:string,serverContext:ServerContext,done:(err:string,blob:BlobStoreRec)=>void){\n        if (blobKey){\n            let url = HTTPDataSource.urlFromBlobKey(blobKey);\n            window.location.href=url;\n        }\n    }\n    static urlFromBlobKey(blobKey:string){\n        let url = `/blob/${blobKey}`;\n        return url;\n    }\n    PUT(obj:DataObj,done:(err:string,newObj:DataObj)=>void,serverContext:ServerContext){\n        let _this=this;\n        let typeCode = obj.getTypeCode();\n        let url = `${this.urlRoot}data/put/${obj._key}`;\n        DB.msg(\"HTTP PUT \",url);\n        let http = new XMLHttpRequest();\n        http.open(\"POST\",url);\n        http.setRequestHeader(\"Content-Type\",\"application/json\");\n        let sjson = obj.toJSON();\n        let jstr = JSON.stringify(sjson);\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    let mobj = DataObj.make(typeCode,json);\n                    mobj.dataSource=_this;\n                    if (done) done(null,mobj);\n                    _this.notify();\n                } else {\n                    DB.msg(`PUT failure ${this.status} ${this.statusText}`,obj);\n                    if (done) done(\"\"+this.status+\" \"+this.statusText,null);\n                }\n            }\n        }\n        http.send(jstr);\n    }\n\n    createUser(userDesc:any,password:string,done:(err:string)=>void){\n        let url = `${this.urlRoot}createuser?password=\"${password}\"`;\n        let http = new XMLHttpRequest();\n        http.open(\"POST\",url);\n        http.setRequestHeader(\"Content-Type\",\"application/json\");\n        let jstr = JSON.stringify(userDesc);\n        http.onreadystatechange=function(){\n            if (this.readyState==4){\n                if (this.status==200){\n                    done(null);\n                } else {\n                    done(`${this.status} ${this.responseText}`);\n                }\n            }\n        }\n        http.send(jstr);\n    }\n    PUTm(objs:DataObj[],done:(err:string,newObjs:DataObj[])=>void,serverContext:ServerContext){\n        let _this=this;\n\n        let url = `${this.urlRoot}data/putm`;\n        let http = new XMLHttpRequest();\n        let toSend=[];\n        for (let i in objs){\n            toSend.push(objs[i].toJSON());\n        }\n        http.open(\"POST\",url);\n        http.setRequestHeader(\"Content-Type\",\"application/json\");\n        let jstr = JSON.stringify(toSend);\n        http.send(jstr);\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    let rslt:DataObj[] = [];\n                    for (let i in json){\n                        let objDesc = json[i];\n                        let mobj = DataObj.make(null,objDesc);\n                        mobj.dataSource=_this;\n                        rslt.push(mobj);\n                    }\n                    if (done) done(null,rslt);\n                    _this.notify();\n                } else\n                    if (done) done(\"\"+this.status+\" \"+this.statusText,null);\n            }\n        }\n    }\n    PUTFileBlob(file:File,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        let _this = this;\n        let url=`${this.urlRoot}blob`;\n        let formData = new FormData();\n        formData.append('name',file.name)\n        formData.append('file',file);\n\n        let http = new XMLHttpRequest();\n        http.open(\"POST\",url,true);\n        http.send(formData);\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    if (done) done(null,json.blobKey);\n                } else\n                    if (done) done(\"\"+this.status+\" \"+this.statusText,null);\n                    _this.notify();\n            }\n        }\n    }\n    \n    PUTBlob(blob:Blob,name:string,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        let _this = this;\n        let url=`${this.urlRoot}blob`;\n        let formData = new FormData();\n        DB.msg(\"HTTPDataSource.PUTBlob not done\")\n        formData.append('name',name)\n        formData.append('data',blob);\n        //formData.append('file',file);\n\n        let http = new XMLHttpRequest();\n        http.open(\"POST\",url,true);\n        http.send(formData);\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    if (done) done(null,json.blobKey);\n                } else\n                    if (done) done(\"\"+this.status+\" \"+this.statusText,null);\n                    _this.notify();\n            }\n        }\n    }\n    DELETE(key:string,done?:(err:string)=>void){\n        let _this = this;\n        let url = `${this.urlRoot}data/delete/${key}`;\n        DB.msg(\"HTTP DELETE \",url);\n        let http = new XMLHttpRequest();\n        http.open(\"DELETE\",url);\n        http.send();\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    if (done) done(null);\n                    _this.notify();\n                } else\n                    if (done) done(\"\"+this.status+\" \"+this.statusText);\n            }\n        }\n    }\n    FIND(typeCode:string, search:Query,done:(err:string,keys:string[],objs:DataObj[])=>void,\n            keysOnly:boolean,forceRequest:boolean,serverContext:ServerContext){\n        let _this=this;\n        let colCode = DataObj.typeToCollection(typeCode);\n        let url = `${this.urlRoot}data/find/${colCode}?`;\n        let start=true;\n        let query=this.buildSearchQuery(search);\n        \n        if (keysOnly){\n            query+=\"&keysonly=1\"\n        }\n        url+=query;\n        DB.msg(\"HTTP FIND \",url);\n        let http = new XMLHttpRequest();\n        http.open(\"GET\",url);\n        http.send();\n        http.onreadystatechange=function() {\n            if (this.readyState==4){\n                if (this.status == 200){\n                    let json = JSON.parse(http.responseText);\n                    let keys = json.keys;\n                    let objs = json.objs;\n                    let dObjs:DataObj[] = []\n                    if (objs){\n                        for (let o in objs){\n                            let objJson = objs[o];\n                            let obj = DataObj.make(null,objJson);\n                            dObjs.push(obj);\n                        }\n                    }\n                    if (done) done(null,keys,dObjs);\n                    _this.notify();\n                } else {\n                    if (done) done(\"\"+this.status+\" \"+this.responseText,null,null);\n                }\n            }\n        }\n    }\n    private buildSearchQuery(search:Query):string{\n        return \"q=\"+JSON.stringify(search.toJSON());\n\n    }\n\n}","/// <reference path=\"DataSource.ts\"/>\n\nclass MemDataSource extends DataSource {\n    datastore:any;\n    constructor(){\n        super();\n        this.datastore={};\n    }\n\n    GET(key:string, done:(err:string,data:DataObj)=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        let _this=this;\n        \n        let collectionKey = DataSource.collectionFromKey(key);\n        let id = DataSource.idFromKey(key);\n        let collection = this.datastore[collectionKey];\n        if (!collection){\n            this.datastore[collectionKey]={}\n            collection = this.datastore[collectionKey];\n        }\n        let rec = collection[id];\n        if (rec) {\n            rec = DataObj.make(collectionKey,rec);\n            rec.dataSource=_this;\n            done(null,rec);\n        } else\n            done(\"key not found \"+key,null);\n        \n    }\n    cGET(key:string,forceRequest?:boolean):DataObj{\n        let collectionKey = DataSource.collectionFromKey(key);\n        let id = DataSource.idFromKey(key);\n        let collection = this.datastore[collectionKey];\n        if (!collection){\n            this.datastore[collectionKey]={}\n            collection = this.datastore[collectionKey];\n        }\n        let rec = collection[id];\n        if (rec) {\n            rec = DataObj.make(collectionKey,rec);\n            rec.dataSource=this;\n            return rec;\n        } else{\n            return null;\n        }\n    }\n    GETm(keys:string[], done:(err:string,data:DataObj[])=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        this.multiGet(0,keys,[],done,forceRequest);\n    }\n    private multiGet(idx:number,keys:string[],rslt:DataObj[],done:(err:string,data:DataObj[])=>void,forceRequest:boolean){\n        if (idx>=keys.length) {\n            done(null,rslt);\n        } else {\n            this.GET(keys[idx],(err:string,data:DataObj)=>{\n                if (err) {\n                    done(err,rslt);\n                } else {\n                    rslt.push(data);\n                    this.multiGet(idx+1,keys,rslt,done,forceRequest);\n                }\n            },forceRequest,null);\n        }\n    }\n    GETBlob(blobKey:string,serverContext:ServerContext,done:(err:string,blob:BlobStoreRec)=>void){\n\n        let collection = this.datastore[\"BLOB\"];\n        if (collection){\n            let file:File = collection[blobKey];\n            DB.msg(\"downloadFile memdatasource not done\",file);\n        }\n    }\n    cGETm(keys:string[],forceRequest?:boolean):DataObj[]{\n        let rslt:DataObj[] = [];\n        for (let i in keys){\n            let key = keys[i];\n            let obj = this.cGET(key,forceRequest);\n            if (obj)\n                rslt.push(obj);\n        }\n        return rslt;\n    }\n    PUT(obj:DataObj,done:(err:string,newObj:DataObj)=>void, serverContext:ServerContext){\n        \n        let _this=this;\n\n        let key = obj._key;\n        if (!key){\n            let tc = obj.getTypeCode();\n            key = DataSource.generateKey(tc);\n            obj._key=key;\n        }\n        let collectionKey = obj.getTypeCode();\n        let collection = this.datastore[collectionKey];\n        if (!collection){\n            this.datastore[collectionKey]={}\n            collection = this.datastore[collectionKey];\n        }\n        let id = DataSource.idFromKey(key);\n        collection[id]=obj.toJSON();\n        obj.dataSource = _this;\n        done(null,obj);\n    }\n    PUTm(objs:DataObj[],done:(err:string,newObjs:DataObj[])=>void,\n            serverContext:ServerContext){\n        this.multiPut(0,objs,[],done,serverContext);\n    }    \n    \n    private multiPut(idx:number,objs:DataObj[],rslt:DataObj[],done:(err:string,newObjs:DataObj[])=>void,\n            serverContext:ServerContext){\n        if (idx>=objs.length){\n            done(null,rslt);\n        } else {\n            this.PUT(objs[idx],(err:string,data:DataObj)=>{\n                if (err){\n                    done(err,rslt);\n                } else {\n                    rslt.push(data);\n                    this.multiPut(idx+1,objs,rslt,done,serverContext);\n                }\n            },serverContext)\n        }\n    }\n    PUTFileBlob(file:File,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        let key = DataSource.generateKey(\"BLOB\");\n        let collection = this.datastore[\"BLOB\"];\n        if (!collection){\n            this.datastore[\"BLOB\"]={};\n            collection = this.datastore[\"BLOB\"];\n        }\n        let id = DataSource.idFromKey(key);\n        collection[id]={ _id:id, _key:key, file:file};\n        done(null,key);\n    }\n    PUTBlob(blob:Blob,name:string,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        let key = DataSource.generateKey(\"BLOB\");\n        let collection = this.datastore[\"BLOB\"];\n        if (!collection){\n            this.datastore[\"BLOB\"]={};\n            collection = this.datastore[\"BLOB\"];\n        }\n        let id = DataSource.idFromKey(key);\n        collection[id]={ _id:id, _key:key, blob:blob};\n        done(null,key);\n    }\n    DELETE(key:string,done?:(err:string)=>void){\n        super.DELETE(key,(err:string)=>{\n            if (err) {\n                if(done) done(err);\n            } else {\n                let collectionKey = DataSource.collectionFromKey(key);\n                let id = DataSource.idFromKey(key);\n                let collection = this.datastore[collectionKey];\n                if (collection) {\n                    let rec=collection[id];\n                    collection[id]=null;\n                    if (!rec){\n                        if (done) done(\"no such object \"+key);\n                    } else {\n                        if (done) done(null);\n                    }\n                } else {\n                    if (done) done(\"no such object \"+key);\n                }\n            \n            }\n        })\n    }\n    FIND(typeCode:string, search:Query,done:(err:string,keys:string[],objs:DataObj[])=>void,\n            keysOnly:boolean,forceRequest:boolean,serverContext:ServerContext){\n\n        let colCode = DataObj.typeToCollection(typeCode);\n        let collection = this.datastore[colCode];\n        let rslt:string[]=[];\n        if (collection){\n            for (let id in collection){\n                let rec = collection[id];\n                let match=true;\n                for (let field in search){\n                    let srch = search[field];\n                    let recVal = rec[field];\n                    if (!this.matches(srch,recVal))\n                        match=false;\n                }\n                if (match)\n                    rslt.push(rec._t_+\"_\"+id);\n            }\n            if (keysOnly){\n                done(null,rslt,[]);\n            } else {\n                let dObjs:DataObj[] = [];\n                this.getFromKeys(rslt,0,dObjs,(objs:DataObj[])=>{\n                    done(null,rslt,objs);\n                },serverContext);\n            }\n        } else {\n            done(null,rslt,[]);\n        }\n\n    }\n    matches(srch:QueryValue, val:any):boolean{\n        return Query.matchesQV(srch,val)\n    }\n    cFIND(typeCode:string,search:Query,forceRequest?:boolean):string[]{\n\n        let colCode = DataObj.typeToCollection(typeCode);\n        let collection = this.datastore[colCode];\n        let rslt:string[]=[];\n        if (collection){\n            for (let id in collection){\n                let rec = collection[id];\n                let match=true;\n                for (let field in search){\n                    let val = search[field];\n                    let recVal = rec[field];\n                    if (!recVal || recVal!=val)\n                        match=false;\n                }\n                if (match)\n                    rslt.push(rec._t_+\"_\"+id);\n            }\n            return rslt;\n        } else {\n            return null;\n        }\n\n    }\n}","/// <reference path=\"DataSource.ts\"/>\n\n\n\nclass CacheDataSource extends DataSource {\n    actualSource:DataSource;\n    static objLeaseTime:number = 1000*60*5; // five minutes\n    static updateLatency:number = 500;\n    \n    constructor(actualSource:DataSource,dataMonitor?:DataMonitor){\n        super();\n        this.actualSource = actualSource;\n        this.setDataMonitor(dataMonitor);\n        this.recentCache={};\n        this.prevCache={};\n        this.recentFindCache={};\n        this.prevFindCache={};\n    }\n    setDataMonitor(dataMonitor:DataMonitor){\n        super.setDataMonitor(dataMonitor);\n        this.actualSource.setDataMonitor(dataMonitor)\n    }\n    setRightsManager(rm:RightsManager){\n        super.setRightsManager(rm);\n        this.actualSource.setRightsManager(rm);\n    }\n    isRemote():boolean { return this.actualSource.isRemote();}\n    GET(key:string, done:(err:string,data:DataObj)=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        let co:CacheObj = this.getCachedObj(key);\n        if (co){\n            if (co.requestInProgress){\n                // wait and redo request\n                setTimeout(()=>{\n                    this.GET(key,done,forceRequest,serverContext);\n                },1000)\n                return;\n            } else {\n                if (!forceRequest && co.obj){\n                    done(null,co.obj);\n                    return;\n                } else {\n                    co.requestInProgress=true;\n                }\n            }\n        } else {\n            co = new CacheObj(null);\n            co.requestInProgress=true;\n            this.recentCache[key]=co;\n        }\n        this.actualSource.GET(key,(err:string,data:DataObj)=>{\n            if (err){\n                done(err,null);\n                return;\n            }\n            \n            data.dataSource=this;\n            this.cacheObj(data);\n            done(null,data);\n            this.notify();\n        },forceRequest,serverContext);\n    }\n    cGET(key:string,forceRequest?:boolean):DataObj{\n        let cObj:CacheObj = this.getCachedObj(key);\n\n        if (cObj){\n            if (cObj.requestInProgress){\n                return null;\n            } else if (forceRequest){\n                cObj.requestInProgress=true;\n            } else {\n                return cObj.obj;\n            }\n        }/*else {\n            let co = new CacheObj(null);\n            co.requestInProgress=true;\n            this.recentCache[key]=co;\n        }*/\n        this.GET(key,()=>{},forceRequest,null);           // invoke get without waiting\n        return null;\n    }\n    GETm(keys:string[],done:(err:string,data:DataObj[])=>void,forceRequest:boolean,\n            serverContext:ServerContext){\n        if (!keys || keys.length==0) {\n            done(null,[]);\n            return;\n        }\n        if (forceRequest){\n            this.getMActual(keys,(err:string,data:DataObj[])=>{\n                done(err,data);\n            },forceRequest,serverContext)\n        } else {\n            if (this.cacheRequestInProgress(keys)){\n                // another request already in progress\n                // wait and reprocess request\n                setTimeout(()=>{\n                    this.GETm(keys,(subErr:string,subData:DataObj[])=>{\n                        done(subErr,subData);\n                    },forceRequest,serverContext)\n                },1000)\n            } else {\n                let cObjs:DataObj[] = this.getCachedObjs(keys);\n                if (cObjs){\n                    done(null,cObjs);\n                } else {\n                    this.getMActual(keys,(err:string,data:DataObj[])=>{\n                        done(err,data)\n                    },forceRequest,serverContext)\n                }\n            }\n        }\n    }\n    private getMActual(keys:string[],done:(err:string,data:DataObj[])=>void,\n            forceRequest:boolean,serverContext:ServerContext){\n        this.actualSource.GETm(keys,(err:string,data:DataObj[])=>{\n            if (err){\n                done(err,null);\n                return;\n            }\n            \n            for (let i in data)\n                data[i].dataSource = this;\n            this.cacheObjs(data);\n            done(null,data);\n        },forceRequest,serverContext);\n    }\n    cGETm(keys:string[],forceRequest?:boolean):DataObj[]{\n        //DB.start(\"CacheDataSource.cGETm\",keys);\n        if (!keys || keys.length==0) {\n            //DB.end(\"CacheDataSource.cGETm no keys\")\n            return [];\n        }\n        let cObjs:DataObj[] = this.getCachedObjs(keys);\n\n        let remainingKeys:string[]=[];\n        if (forceRequest){\n            remainingKeys=keys;\n        } else if (cObjs){\n            for (let k in keys){\n                let found=false;\n                let key =keys[k];\n                for (let o in cObjs){\n                    let obj = cObjs[o];\n                    if (obj && key==obj._key){\n                        found=true;\n                        break;\n                    }\n                }\n                if (!found){\n                    remainingKeys.push(key);\n                }\n            }\n            if (remainingKeys.length>0){\n                //DB.msg(\"CacheDataSource.cGETm getting somekeys\",keys)\n                this.GETm(remainingKeys,()=>{},forceRequest,null);  // force a get without waiting for response\n            }\n            //DB.end(\"CacheDataSource.cGETm GETm\",cObjs)\n            return cObjs;\n        } else {\n            //DB.msg(\"CacheDataSource.cGETm get all\",keys);\n            this.GETm(keys,()=>{},forceRequest,null);\n            //DB.end(\"CacheDataSource.cGETm\")\n            return null;\n        }\n               \n    }\n    GETBlob(blobKey:string,serverContext:ServerContext,done:(err:string,blob:BlobStoreRec)=>void){\n\n        this.actualSource.GETBlob(blobKey,serverContext,done);\n    }\n    PUT(obj:DataObj,done:(err:string,newObj:DataObj)=>void,serverContext:ServerContext){\n        obj.dataSource = this;\n        let typeCode = obj.getTypeCode()\n        this.clearFindCache(typeCode);\n        this.actualSource.PUT(obj,(err:string,putObj:DataObj)=>{\n            this.clearFindCache(typeCode);\n            if (putObj)\n                this.cacheObj(putObj);\n            //DB.msg(\"CacheDataSource PUT complete\")\n            done(err,putObj);\n        },serverContext);\n    }\n    PUTm(objs:DataObj[],done:(err:string,newObjs:DataObj[])=>void, serverContext:ServerContext){\n        for (let i in objs)\n            objs[i].dataSource = this;\n        if (objs && objs.length>0){\n            let typeCode = objs[0].getTypeCode()\n            this.clearFindCache(typeCode);\n        }\n        this.actualSource.PUTm(objs,done,serverContext);\n    }\n    PUTFileBlob(file:File,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        this.actualSource.PUTFileBlob(file,serverContext,done);\n    }\n    PUTBlob(blob:Blob,name:string,serverContext:ServerContext,done:(err:string,blobKey:string)=>void){\n        this.actualSource.PUTBlob(blob,name,serverContext,done);\n    }\n    DELETE(key:string,done?:(err:string)=>void){\n        this.delObjCache(key);\n        this.actualSource.DELETE(key,(delErr:string)=>{\n            this.delObjCache(key);\n            //DB.msg(\"CacheDataSource DELETE complete\")\n            if (done) done(delErr);\n        });\n    }\n    FIND(typeCode:string, search:Query,done:(err:string,keys:string[],objs:DataObj[])=>void,\n            keysOnly:boolean,forceRequest:boolean, serverContext:ServerContext){\n        let findKeys:FindCacheObj = this.getCachedFind(typeCode,search);\n\n        if (findKeys){\n            if (findKeys.requestInProgress){\n                setTimeout(()=>{\n                    this.FIND(typeCode,search,done,keysOnly,false,serverContext);\n                },1000);\n                return;\n            } else if (forceRequest){\n                findKeys.requestInProgress=true;\n                this.doFind(typeCode,search,done,keysOnly,serverContext);\n            } else {\n                if (findKeys.getKeys()){\n                    if (keysOnly){\n                        done(null,findKeys.getKeys(),[]);\n                    } else {\n                        this.GETm(findKeys.getKeys(),(getmErr:string,getMData:DataObj[])=>{\n                            if (getMData){\n                                done(null,findKeys.getKeys(),getMData)\n                            } else {\n                                done(getmErr,findKeys.getKeys(),[])\n                            }\n                        },false,serverContext)\n                    }\n                } \n            }\n        } else {\n            this.doFind(typeCode,search,done,keysOnly,serverContext);\n        }\n    }\n    private doFind(typeCode:string,search:Query,done:(err:string,keys:string[],objs:DataObj[])=>void,\n            keysOnly:boolean,serverContext:ServerContext){\n        this.registerInProgress(typeCode,search);\n        this.actualSource.FIND(typeCode,search,(err:string,keys:string[],objs:DataObj[])=>{\n            if (err){\n                done(err,null,null);\n                return;\n            }\n            this.cacheFind(typeCode,search,keys,objs);\n            done(err,keys,objs);\n        },keysOnly,false,serverContext);\n    }\n    private registerInProgress(typeCode:string,search:Query){\n        let newFindCache =new FindCacheObj(search,[]);\n        newFindCache.requestInProgress=true;\n        if (!this.recentFindCache[typeCode])\n            this.recentFindCache[typeCode]=[];\n        this.recentFindCache[typeCode].push(newFindCache)\n    }\n    cFIND(typeCode:string,search:Query,keysOnly:boolean,forceRequest:boolean):string[]{\n\n        let findKeys:FindCacheObj = this.getCachedFind(typeCode,search);\n        let rslt:string[] = [];\n        if (findKeys){\n            if (findKeys.requestInProgress){\n                return findKeys.getKeys();\n            } else if (forceRequest){\n                this.FIND(typeCode,search,()=>{\n                },keysOnly,forceRequest,null)\n                return findKeys.getKeys();\n            } else { // return what was in the cache\n                \n                rslt=findKeys.getKeys();\n                return rslt;\n            }\n        } else { // nothing in the cache\n            \n            this.FIND(typeCode,search,()=>{\n                \n            },keysOnly,forceRequest,null)\n            return null;\n        }\n    }\n    touched(obj:DataObj):boolean{\n        this.scheduleUpdate(obj);\n        return true;\n    }\n    login(userId:string,password:string,done:(err:string)=>void,serverContext:ServerContext){\n        this.actualSource.login(userId,password,done,serverContext);\n    }\n    httpLogin(userName:string, password:string,done:(err:string,user:DataObj)=>void){\n        this.actualSource.httpLogin(userName,password,(aErr:string,aUser:DataObj)=>{\n            if (aErr){\n                done(aErr,null);\n            } else {\n                this.cacheObj(aUser);\n                done(null,aUser);\n            }\n        });\n    }\n    createUser(userDesc:any,password:string,done:(err:string)=>void,serverContext:ServerContext){\n        this.actualSource.createUser(userDesc,password,done,serverContext);\n    }\n     \n\n    private MAX_CACHE=1000;\n    private cacheCount=0;\n    private recentCache:{ [key:string]:CacheObj};\n    private prevCache: { [key:string]:CacheObj}\n    private checkCacheSize(){\n        this.cacheCount++;\n        if (this.cacheCount>this.MAX_CACHE){\n            this.cacheCount=0;\n            this.prevCache=this.recentCache;\n            this.recentCache={};\n        }\n    }\n\n    private cacheObj(obj:DataObj){\n        // this will put a single object in the cache and initiate notification.\n        let key = obj._key;\n        let recentObj = this.recentCache[key];\n        let prevObj = this.prevCache[key];\n        let now = Date.now();\n        if (recentObj){\n            this.recentCache[key]=new CacheObj(obj);\n            obj.dataSource=this;\n        } else if (prevObj){\n            this.recentCache[key]=new CacheObj(obj);\n            obj.dataSource=this;\n            this.prevCache[key]=null;\n            this.checkCacheSize();\n        } else {\n            this.recentCache[key]=new CacheObj(obj);\n            obj.dataSource=this;\n            this.checkCacheSize();\n        }\n        this.notify();\n    }\n    private cacheObjs(objs:DataObj[]){\n        for (let i in objs){\n            let obj = objs[i];\n            this.cacheObj(obj);\n        }\n    }\n    private getCachedObj(key:string):CacheObj{\n        let recentObj = this.recentCache[key];\n        let prevObj = this.prevCache[key];\n        let now = Date.now();\n        if (recentObj){\n            if (recentObj.expired()){\n                this.recentCache[key]=null;\n            } else \n                return recentObj;\n        } else if (prevObj){\n            if (prevObj.expired()){\n                this.prevCache[key]=null;\n            } else \n                return prevObj;\n        } else {\n            this.checkCacheSize();\n            return null;\n        }\n    }\n    private cacheRequestInProgress(keys:string[]):boolean {\n        for (let i in keys){\n            let key=keys[i];\n            let cache:CacheObj = this.getCachedObj(key);\n            if (cache && cache.requestInProgress)\n                return true;\n        }\n        return false;\n    }\n    private getCachedObjs(keys:string[]):DataObj[]{\n        let rslt:DataObj[] = [];\n        for (let i in keys){\n            let key = keys[i];\n            let obj:CacheObj = this.getCachedObj(key);\n            if (obj && obj.obj){\n                rslt.push(obj.obj);\n            }\n        }\n        if (rslt.length==0)\n            rslt=null;\n        return rslt;\n    }\n    private delObjCache(key:string){\n        let objTypeCode = key.split(\"_\")[0];\n        this.clearFindCache(objTypeCode);\n        let recentObj = this.recentCache[key];\n        if (recentObj)\n            this.recentCache[key]=null;\n        let prevObj = this.prevCache[key];\n        if (prevObj)\n            this.prevCache[key]=null;\n        this.notify();\n    }\n\n    private MAX_FIND_CACHE=100;\n    private findCacheCount=0;\n    private recentFindCache:{ [typeCode:string]:FindCacheObj[] };\n    private prevFindCache:{ [typeCode:string]:FindCacheObj[] };\n    private checkFindCacheSize(){\n        this.findCacheCount++;\n        if (this.findCacheCount>this.MAX_FIND_CACHE){\n            this.findCacheCount=0;\n            this.prevFindCache = this.recentFindCache;\n            this.recentFindCache={};\n        }\n    }\n    private cacheFind(typeCode:string, search:Query,keys:string[],objs:DataObj[]){\n        let recentSearch:FindCacheObj = this.locateFind(this.recentFindCache,typeCode,search);\n        if (recentSearch){\n            recentSearch.setData(search,keys);\n            //DB.msg(\"cacheFind recentSearch\",recentSearch);\n        } else {\n            let prevSearch:FindCacheObj= this.locateFind(this.prevFindCache,typeCode,search);\n            if (prevSearch){\n                prevSearch.setData(search,keys);\n                if (!this.recentFindCache[typeCode])\n                    this.recentFindCache[typeCode]=[];\n                //DB.msg(\"cacheFind prevSearch\",prevSearch);\n                this.recentFindCache[typeCode].push(prevSearch);\n                this.checkFindCacheSize();\n            } else {\n                let newSearch = new FindCacheObj(search,keys);\n                if (!this.recentFindCache[typeCode])\n                    this.recentFindCache[typeCode]=[];\n                //DB.msg(\"cacheFind newSearch\",newSearch)\n                this.recentFindCache[typeCode].push(newSearch);\n                this.checkFindCacheSize();\n            }\n        }\n        this.cacheObjs(objs);\n        this.notify();\n    }\n    private getCachedFind(typeCode:string,search:Query):FindCacheObj {\n        let recentSearch:FindCacheObj = this.locateFind(this.recentFindCache,typeCode,search);\n        if (recentSearch){\n            if (recentSearch.expired()){\n                this.purgeFind(this.recentFindCache,typeCode,search);\n            } else \n                return recentSearch;\n        } \n        let prevSearch:FindCacheObj= this.locateFind(this.prevFindCache,typeCode,search);\n        if (prevSearch){\n            if (prevSearch.expired()){\n                this.purgeFind(this.prevFindCache,typeCode,search)\n                \n            } else {\n                return prevSearch;\n            }\n        } \n        return null;\n    \n    }\n    private locateFind(cache:{ [typeCode:string]:FindCacheObj[] },typeCode:string,search:Query):FindCacheObj{\n        let searches:FindCacheObj[] = cache[typeCode];\n        if (searches){\n            for (let i in searches){\n                let srch = searches[i];\n                if (srch) {\n                    if (Query.match(srch.search,search)){\n                        return srch;\n                    }\n                }\n            }\n            return null;\n        } else {\n            return null;\n        }\n    }\n    private purgeFind(cache:{ [typeCode:string]:FindCacheObj[] },typeCode:string,search:Query):void{\n        let searches = cache[typeCode];\n        if (searches){\n            for (let i in searches){\n                let srch:FindCacheObj = searches[i];\n                if (srch) {\n                    if (Query.match(srch.search,search)){\n                        searches[i]=null;\n                    }\n                }\n            }\n            return null;\n        } else {\n            return null;\n        }\n    }\n    private clearFindCache(objTypeCode:string){\n        let possibleTypeCodes=this.superTypeCodes(objTypeCode);\n        for (let c in possibleTypeCodes){\n            let tc = possibleTypeCodes[c];\n            this.recentFindCache[tc]=[];\n            this.prevFindCache[tc]=[];\n        }\n    }\n    private superTypeCodes(typeCode:string):string[]{\n        let rslt:string[] = [];\n        let classInfo = DataObj.classInfo;\n        let cli = classInfo[typeCode];\n        while (cli){\n            rslt.push(typeCode);\n            typeCode = cli.superCode;\n            cli = classInfo[typeCode];\n        }\n        return rslt;\n    }\n\n    private pendingUpdates:{ [key:string]:DataObj };\n    private pendingUpdateTimerStarted:boolean;\n    private scheduleUpdate(obj:DataObj){\n        if (!obj) return;\n        if (!this.pendingUpdates)\n            this.pendingUpdates={};\n        this.pendingUpdates[obj._key]=obj;\n        if (!this.pendingUpdateTimerStarted){\n            this.pendingUpdateTimerStarted=null;\n            setTimeout(()=>{\n                let updates = this.pendingUpdates;\n                this.pendingUpdates={};\n                let updateList:DataObj[] = [];\n                for (let key in updates){\n                    let updateObj = updates[key];\n                    updateList.push(updateObj);\n                }\n                this.PUTm(updateList,(err:string,newObjs:DataObj[])=>{\n                    // nothing\n                },null);\n            },CacheDataSource.updateLatency);\n        } \n    }\n}\nclass CacheObj{\n    timeCached:number;\n    requestInProgress:boolean;\n    obj:DataObj;\n    constructor(obj:DataObj){\n        this.timeCached=Date.now();\n        this.requestInProgress = false;\n        this.obj=obj;\n    }\n    expired():boolean{\n        let now = Date.now();\n        let time = now - this.timeCached;\n        if (time>CacheDataSource.objLeaseTime)\n            if (this.requestInProgress) {\n                if (time > 2*CacheDataSource.objLeaseTime){\n                    this.timeCached = now-CacheDataSource.objLeaseTime;\n                    return true; // this will force a new request even if one is in progress\n                } else {\n                    return false;\n                }\n            } else {\n                return true;\n            }\n        else\n            return false;\n    }\n}\nclass FindCacheObj extends CacheObj{\n    search:Query;\n    private keys_:string[];\n    private keyMap:{ [key:string]:boolean};\n    setKeys(newKeys:string[]){\n        this.keys_=newKeys;\n        this.keyMap = {};\n        for (let i in newKeys){\n            let key = newKeys[i];\n            this.keyMap[key]=true;\n        }\n    }\n    getKeys():string[]{\n        return this.keys_;\n    }\n    constructor(search:Query,keys:string[]){\n        super(null);\n        this.search = search;\n        this.keys_=keys;\n    }\n    setData(search:Query,keys:string[]){\n        this.timeCached=Date.now();\n        this.requestInProgress = false;\n        this.search = search;\n        this.setKeys( keys);\n    }\n\n    checkDelete(key:string){\n        if (this.keyMap[key]){\n            this.keyMap[key]=false;\n            this.rebuildKeysFromMap();\n        }\n    }\n    checkForUpdate(obj:DataObj){\n        let key = obj._key;\n        if (key){\n            if (this.keyMap[key]){\n                if (this.search.matches(obj)){\n                    return;\n                } else {\n                    this.keyMap[key]=false;\n                    this.rebuildKeysFromMap();\n                }\n            } else {\n                if (this.search.matches(obj)){\n                    this.keyMap[key]=true;\n                    this.rebuildKeysFromMap();\n                } else\n                    return;\n            }\n        }\n    }\n    private rebuildKeysFromMap(){\n        this.keys_=[];\n        for (let key in this.keyMap){\n            if (this.keyMap[key])\n                this.keys_.push(key);\n        }\n    }\n}\n","\nclass ZPerson extends DataObj{\n   protected FirstName_:string;\n   protected LastName_:string;\n   protected Email_:string;\n   protected Phone_:string;\n   constructor(json:any){\n      super(json);\n      if (json.FirstName){\n         this.FirstName_=json.FirstName;\n      }\n      if (json.LastName){\n         this.LastName_=json.LastName;\n      }\n      if (json.Email){\n         this.Email_=json.Email;\n      }\n      if (json.Phone){\n         this.Phone_=json.Phone;\n      }\n   }\n   getTypeCode():string { return 'P';}\n   getFirstName():string {\n      return this.FirstName_;\n   }\n   setFirstName(newVal: string) {\n      if (this.FirstName_ != newVal){\n         this.FirstName_=newVal;\n         this.touch();\n      }\n   }\n   getLastName():string {\n      return this.LastName_;\n   }\n   setLastName(newVal: string) {\n      if (this.LastName_ != newVal){\n         this.LastName_=newVal;\n         this.touch();\n      }\n   }\n   getEmail():string {\n      return this.Email_;\n   }\n   setEmail(newVal: string) {\n      if (this.Email_ != newVal){\n         this.Email_=newVal;\n         this.touch();\n      }\n   }\n   getPhone():string {\n      return this.Phone_;\n   }\n   setPhone(newVal: string) {\n      if (this.Phone_ != newVal){\n         this.Phone_=newVal;\n         this.touch();\n      }\n   }\n   static GET(key:string,done:(err:string,data:Person)=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('P',tc)){ done(\"ERR wrong key \"+key+\" for Person.GET\",null);return}\n      super.GET(key,(err:string,data:DataObj)=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Person>data);\n         }\n      },forceRequest,serverContext)\n   }\n   static cGET(key:string,forceRequest?:boolean):Person{\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('P',tc)){ DB.msg(\"ERR wrong key \"+key+\" for Person.GET\",null); return null}\n      return <Person>(super.cGET(key,forceRequest));\n   }\n   static GETm(keys:string[],done:(err:string,data:Person[])=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      if (!keys || keys.length==0){\n         done(null,[])\n         return\n      }\n      let tc=DataSource.typeFromKey(keys[0]);\n      if (!DataObj.checkTypeCode('P',tc)){ done(\"ERR wrong key \"+keys[0]+\" for Person.GETm\",null); return}\n      super.GETm(keys,(err:string,data:DataObj[])=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Person[]>data);\n         }\n      },forceRequest,serverContext)\n   }\n   toJSON():any{\n      let rslt:any = {};\n      rslt._key=this._key\n      rslt._t_=\"P\";\n      rslt.FirstName=this.getFirstName();\n      rslt.LastName=this.getLastName();\n      rslt.Email=this.getEmail();\n      rslt.Phone=this.getPhone();\n      return rslt;\n   }\n   \n   static byName(FirstName:StringQuery,LastName:StringQuery,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"P\",Query.dict({FirstName:FirstName ,LastName:LastName }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byNameC(FirstName:StringQuery,LastName:StringQuery,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"P\",Query.dict({FirstName:FirstName ,LastName:LastName }),keysOnly,forceRequest)\n   }\n}\n","/// <reference path=\"ZPerson.ts\" />\n\nclass Person extends ZPerson {\n  getFullName() {\n    if (this.getFirstName() && this.getLastName()) {\n      return `${this.getFirstName()} ${this.getLastName}`\n    }\n  }\n\n  getDescription(includeEmail: boolean = false) {\n    if (includeEmail && this.getEmail()) {\n      return `${this.getFullName()} (${this.getEmail})`\n    }\n    return this.getFullName()\n  }\n\n  static allPersons(): string[] {\n    return super.cFIND(\"P\", Query.dict({}), false, false);\n  }\n}","/// <reference path=\"Person.ts\"/>\n\nclass ZTeam extends DataObj{\n   protected TeamName_:string;\n   protected SeasonLabel_:string;\n   protected Coach_:string;\n   protected AssistantCoach_:string;\n   protected TeamManager_:string;\n   constructor(json:any){\n      super(json);\n      if (json.TeamName){\n         this.TeamName_=json.TeamName;\n      }\n      if (json.SeasonLabel){\n         this.SeasonLabel_=json.SeasonLabel;\n      }\n      if (json.Coach){\n         this.Coach_=json.Coach;\n      } else {\n         this.Coach_=null;\n      }\n      if (json.AssistantCoach){\n         this.AssistantCoach_=json.AssistantCoach;\n      } else {\n         this.AssistantCoach_=null;\n      }\n      if (json.TeamManager){\n         this.TeamManager_=json.TeamManager;\n      } else {\n         this.TeamManager_=null;\n      }\n   }\n   getTypeCode():string { return 'T';}\n   getTeamName():string {\n      return this.TeamName_;\n   }\n   setTeamName(newVal: string) {\n      if (this.TeamName_ != newVal){\n         this.TeamName_=newVal;\n         this.touch();\n      }\n   }\n   getSeasonLabel():string {\n      return this.SeasonLabel_;\n   }\n   setSeasonLabel(newVal: string) {\n      if (this.SeasonLabel_ != newVal){\n         this.SeasonLabel_=newVal;\n         this.touch();\n      }\n   }\n   getCoach():string {\n      return this.Coach_;\n   }\n   setCoach(newVal: string) {\n      if (this.Coach_ != newVal){\n         this.Coach_=newVal;\n         this.touch();\n      }\n   }\n   getAssistantCoach():string {\n      return this.AssistantCoach_;\n   }\n   setAssistantCoach(newVal: string) {\n      if (this.AssistantCoach_ != newVal){\n         this.AssistantCoach_=newVal;\n         this.touch();\n      }\n   }\n   getTeamManager():string {\n      return this.TeamManager_;\n   }\n   setTeamManager(newVal: string) {\n      if (this.TeamManager_ != newVal){\n         this.TeamManager_=newVal;\n         this.touch();\n      }\n   }\n   static GET(key:string,done:(err:string,data:Team)=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('T',tc)){ done(\"ERR wrong key \"+key+\" for Team.GET\",null);return}\n      super.GET(key,(err:string,data:DataObj)=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Team>data);\n         }\n      },forceRequest,serverContext)\n   }\n   static cGET(key:string,forceRequest?:boolean):Team{\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('T',tc)){ DB.msg(\"ERR wrong key \"+key+\" for Team.GET\",null); return null}\n      return <Team>(super.cGET(key,forceRequest));\n   }\n   static GETm(keys:string[],done:(err:string,data:Team[])=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      if (!keys || keys.length==0){\n         done(null,[])\n         return\n      }\n      let tc=DataSource.typeFromKey(keys[0]);\n      if (!DataObj.checkTypeCode('T',tc)){ done(\"ERR wrong key \"+keys[0]+\" for Team.GETm\",null); return}\n      super.GETm(keys,(err:string,data:DataObj[])=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Team[]>data);\n         }\n      },forceRequest,serverContext)\n   }\n   toJSON():any{\n      let rslt:any = {};\n      rslt._key=this._key\n      rslt._t_=\"T\";\n      rslt.TeamName=this.getTeamName();\n      rslt.SeasonLabel=this.getSeasonLabel();\n      rslt.Coach=this.getCoach();\n      rslt.AssistantCoach=this.getAssistantCoach();\n      rslt.TeamManager=this.getTeamManager();\n      return rslt;\n   }\n   \n   static byName(TeamName:StringQuery,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"T\",Query.dict({TeamName:TeamName }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byNameC(TeamName:StringQuery,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"T\",Query.dict({TeamName:TeamName }),keysOnly,forceRequest)\n   }\n}\n","/// <reference path=\"ZTeam.ts\" />\n\nclass Team extends ZTeam {\n\n  static makeNew(name: string,\n    done: (err: string, team: Team) => void) {\n    let newTeam = new Team({ TeamName: name });\n    newTeam.PUT((err: string, team: Team) => {\n      done(err, team);\n    })\n  }\n\n\n  static allTeams(): string[] {\n    return super.cFIND(\"T\", Query.dict({}), false, false);\n  }\n}","/// <reference path=\"Person.ts\"/>\n\nclass ZPlayer extends DataObj{\n   protected Person_:string;\n   protected JerseyNumber_:number;\n   protected Position_:string;\n   protected SecondaryPosition_:string;\n   constructor(json:any){\n      super(json);\n      if (json.Person){\n         this.Person_=json.Person;\n      } else {\n         this.Person_=null;\n      }\n      if (json.JerseyNumber){\n         this.JerseyNumber_=json.JerseyNumber;\n      } else {\n         this.JerseyNumber_=0;\n      }\n      if (json.Position){\n         this.Position_=json.Position;\n      }\n      if (json.SecondaryPosition){\n         this.SecondaryPosition_=json.SecondaryPosition;\n      }\n   }\n   getTypeCode():string { return 'PL';}\n   getPerson():string {\n      return this.Person_;\n   }\n   setPerson(newVal: string) {\n      if (this.Person_ != newVal){\n         this.Person_=newVal;\n         this.touch();\n      }\n   }\n   getJerseyNumber():number {\n      return this.JerseyNumber_;\n   }\n   setJerseyNumber(newVal: number) {\n      if (this.JerseyNumber_ != newVal){\n         this.JerseyNumber_=newVal;\n         this.touch();\n      }\n   }\n   getPosition():string {\n      return this.Position_;\n   }\n   setPosition(newVal: string) {\n      if (this.Position_ != newVal){\n         this.Position_=newVal;\n         this.touch();\n      }\n   }\n   getSecondaryPosition():string {\n      return this.SecondaryPosition_;\n   }\n   setSecondaryPosition(newVal: string) {\n      if (this.SecondaryPosition_ != newVal){\n         this.SecondaryPosition_=newVal;\n         this.touch();\n      }\n   }\n   static GET(key:string,done:(err:string,data:Player)=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('PL',tc)){ done(\"ERR wrong key \"+key+\" for Player.GET\",null);return}\n      super.GET(key,(err:string,data:DataObj)=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Player>data);\n         }\n      },forceRequest,serverContext)\n   }\n   static cGET(key:string,forceRequest?:boolean):Player{\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('PL',tc)){ DB.msg(\"ERR wrong key \"+key+\" for Player.GET\",null); return null}\n      return <Player>(super.cGET(key,forceRequest));\n   }\n   static GETm(keys:string[],done:(err:string,data:Player[])=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      if (!keys || keys.length==0){\n         done(null,[])\n         return\n      }\n      let tc=DataSource.typeFromKey(keys[0]);\n      if (!DataObj.checkTypeCode('PL',tc)){ done(\"ERR wrong key \"+keys[0]+\" for Player.GETm\",null); return}\n      super.GETm(keys,(err:string,data:DataObj[])=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Player[]>data);\n         }\n      },forceRequest,serverContext)\n   }\n   toJSON():any{\n      let rslt:any = {};\n      rslt._key=this._key\n      rslt._t_=\"PL\";\n      rslt.Person=this.getPerson();\n      rslt.JerseyNumber=this.getJerseyNumber();\n      rslt.Position=this.getPosition();\n      rslt.SecondaryPosition=this.getSecondaryPosition();\n      return rslt;\n   }\n   \n   static byPerson(Person:string,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"PL\",Query.dict({Person:Person }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byPersonC(Person:string,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"PL\",Query.dict({Person:Person }),keysOnly,forceRequest)\n   }\n   \n   static byNumber(JerseyNumber:NumberQuery,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"PL\",Query.dict({JerseyNumber:JerseyNumber }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byNumberC(JerseyNumber:NumberQuery,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"PL\",Query.dict({JerseyNumber:JerseyNumber }),keysOnly,forceRequest)\n   }\n}\n","/// <reference path=\"ZPlayer.ts\" />\n\nclass Player extends ZPlayer {\n\n}","/// <reference path=\"Player.ts\"/>\n\nclass ZGameEvent extends DataObj{\n   protected EventType_:string;\n   protected Time_:number;\n   protected Player_:string;\n   protected HomeScoreIncreased_:boolean;\n   protected AwayScoreIncreased_:boolean;\n   constructor(json:any){\n      super(json);\n      if (json.EventType){\n         this.EventType_=json.EventType;\n      }\n      if (json.Time){\n         this.Time_=json.Time;\n      } else {\n         this.Time_=0;\n      }\n      if (json.Player){\n         this.Player_=json.Player;\n      } else {\n         this.Player_=null;\n      }\n      this.HomeScoreIncreased_=json.HomeScoreIncreased;\n      this.AwayScoreIncreased_=json.AwayScoreIncreased;\n   }\n   getTypeCode():string { return 'GE';}\n   getEventType():string {\n      return this.EventType_;\n   }\n   setEventType(newVal: string) {\n      if (this.EventType_ != newVal){\n         this.EventType_=newVal;\n         this.touch();\n      }\n   }\n   getTime():number {\n      return this.Time_;\n   }\n   setTime(newVal: number) {\n      if (this.Time_ != newVal){\n         this.Time_=newVal;\n         this.touch();\n      }\n   }\n   getPlayer():string {\n      return this.Player_;\n   }\n   setPlayer(newVal: string) {\n      if (this.Player_ != newVal){\n         this.Player_=newVal;\n         this.touch();\n      }\n   }\n   getHomeScoreIncreased():boolean {\n      return this.HomeScoreIncreased_;\n   }\n   setHomeScoreIncreased(newVal: boolean) {\n      if (this.HomeScoreIncreased_ != newVal){\n         this.HomeScoreIncreased_=newVal;\n         this.touch();\n      }\n   }\n   getAwayScoreIncreased():boolean {\n      return this.AwayScoreIncreased_;\n   }\n   setAwayScoreIncreased(newVal: boolean) {\n      if (this.AwayScoreIncreased_ != newVal){\n         this.AwayScoreIncreased_=newVal;\n         this.touch();\n      }\n   }\n   toJSON():any{\n      let rslt:any = {};\n      rslt._t_=\"GE\";\n      rslt.EventType=this.getEventType();\n      rslt.Time=this.getTime();\n      rslt.Player=this.getPlayer();\n      rslt.HomeScoreIncreased=this.getHomeScoreIncreased();\n      rslt.AwayScoreIncreased=this.getAwayScoreIncreased();\n      return rslt;\n   }\n}\n","/// <reference path=\"ZGameEvent.ts\" />\n\nclass GameEvent extends ZGameEvent {\n\n\n}","/// <reference path=\"Team.ts\"/>\n/// <reference path=\"GameEvent.ts\"/>\n\nclass ZGame extends DataObj{\n   protected Team_:string;\n   protected HomeGame_:boolean;\n   protected Date_:string;\n   protected StartTime_:number;\n   protected EndTime_:number;\n   protected WinResult_:string;\n   protected GameEvents_:GameEvent[];\n   constructor(json:any){\n      super(json);\n      if (json.Team){\n         this.Team_=json.Team;\n      } else {\n         this.Team_=null;\n      }\n      this.HomeGame_=json.HomeGame;\n      if (json.Date){\n         this.Date_=json.Date;\n      }\n      if (json.StartTime){\n         this.StartTime_=json.StartTime;\n      } else {\n         this.StartTime_=0;\n      }\n      if (json.EndTime){\n         this.EndTime_=json.EndTime;\n      } else {\n         this.EndTime_=0;\n      }\n      if (json.WinResult){\n         this.WinResult_=json.WinResult;\n      }\n      if (json.GameEvents){\n         this.GameEvents_=<GameEvent[]>(DataObj.makeList('GE',json.GameEvents,this));\n      } else {\n         this.GameEvents_=[];\n      }\n   }\n   getTypeCode():string { return 'G';}\n   getTeam():string {\n      return this.Team_;\n   }\n   setTeam(newVal: string) {\n      if (this.Team_ != newVal){\n         this.Team_=newVal;\n         this.touch();\n      }\n   }\n   getHomeGame():boolean {\n      return this.HomeGame_;\n   }\n   setHomeGame(newVal: boolean) {\n      if (this.HomeGame_ != newVal){\n         this.HomeGame_=newVal;\n         this.touch();\n      }\n   }\n   getDate():string {\n      return this.Date_;\n   }\n   setDate(newVal: string) {\n      if (this.Date_ != newVal){\n         this.Date_=newVal;\n         this.touch();\n      }\n   }\n   getStartTime():number {\n      return this.StartTime_;\n   }\n   setStartTime(newVal: number) {\n      if (this.StartTime_ != newVal){\n         this.StartTime_=newVal;\n         this.touch();\n      }\n   }\n   getEndTime():number {\n      return this.EndTime_;\n   }\n   setEndTime(newVal: number) {\n      if (this.EndTime_ != newVal){\n         this.EndTime_=newVal;\n         this.touch();\n      }\n   }\n   getWinResult():string {\n      return this.WinResult_;\n   }\n   setWinResult(newVal: string) {\n      if (this.WinResult_ != newVal){\n         this.WinResult_=newVal;\n         this.touch();\n      }\n   }\n   getGameEvents():GameEvent[] {\n      let tmp:GameEvent[] = [];\n      for (let i in this.GameEvents_){\n         tmp.push(this.GameEvents_[i]);\n      }\n      return tmp;\n   }\n   setGameEvents(val: GameEvent[]) {\n      let tmp:GameEvent[] = [];\n      for (let i in val){\n         tmp.push(val[i]);\n         val[i].parent=this;\n      }\n      this.GameEvents_ = tmp;\n      this.touch();\n   }\n   static GET(key:string,done:(err:string,data:Game)=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('G',tc)){ done(\"ERR wrong key \"+key+\" for Game.GET\",null);return}\n      super.GET(key,(err:string,data:DataObj)=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Game>data);\n         }\n      },forceRequest,serverContext)\n   }\n   static cGET(key:string,forceRequest?:boolean):Game{\n      let tc=DataSource.typeFromKey(key);\n      if (!DataObj.checkTypeCode('G',tc)){ DB.msg(\"ERR wrong key \"+key+\" for Game.GET\",null); return null}\n      return <Game>(super.cGET(key,forceRequest));\n   }\n   static GETm(keys:string[],done:(err:string,data:Game[])=>void,forceRequest?:boolean,serverContext?:ServerContext){\n      if (!keys || keys.length==0){\n         done(null,[])\n         return\n      }\n      let tc=DataSource.typeFromKey(keys[0]);\n      if (!DataObj.checkTypeCode('G',tc)){ done(\"ERR wrong key \"+keys[0]+\" for Game.GETm\",null); return}\n      super.GETm(keys,(err:string,data:DataObj[])=>{\n         if (err){\n            done(err,null);\n         } else {\n            done(null,<Game[]>data);\n         }\n      },forceRequest,serverContext)\n   }\n   toJSON():any{\n      let rslt:any = {};\n      rslt._key=this._key\n      rslt._t_=\"G\";\n      rslt.Team=this.getTeam();\n      rslt.HomeGame=this.getHomeGame();\n      rslt.Date=this.getDate();\n      rslt.StartTime=this.getStartTime();\n      rslt.EndTime=this.getEndTime();\n      rslt.WinResult=this.getWinResult();\n      rslt.GameEvents=[];\n      let tmp_GameEvents=this.getGameEvents()\n      for (let i in tmp_GameEvents){\n         rslt.GameEvents.push((tmp_GameEvents[i]).toJSON());\n      }\n      return rslt;\n   }\n   \n   static byDate(Date:StringQuery,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"G\",Query.dict({Date:Date }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byDateC(Date:StringQuery,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"G\",Query.dict({Date:Date }),keysOnly,forceRequest)\n   }\n   \n   static byHome(HomeGame:boolean,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"G\",Query.dict({HomeGame:HomeGame }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byHomeC(HomeGame:boolean,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"G\",Query.dict({HomeGame:HomeGame }),keysOnly,forceRequest)\n   }\n   \n   static byWinResult(WinResult:StringQuery,done:(err:string,keys:string[])=>void,keysOnly?:boolean,forceRequest?:boolean,serverContext?:ServerContext){\n      super.FIND(\"G\",Query.dict({WinResult:WinResult }),done,keysOnly,forceRequest,serverContext)\n   }\n   \n   static byWinResultC(WinResult:StringQuery,keysOnly?:boolean,forceRequest?:boolean):string[]{\n      let ds = DataObj.globalSource;\n      return super.cFIND(\"G\",Query.dict({WinResult:WinResult }),keysOnly,forceRequest)\n   }\n}\n","/// <reference path=\"ZGame.ts\"/>\n\nclass Game extends ZGame {\n\n}","/// <reference path=\"Team.ts\"/>\n/// <reference path=\"Person.ts\"/>\n/// <reference path=\"Player.ts\"/>\n/// <reference path=\"Game.ts\"/>\n/// <reference path=\"GameEvent.ts\"/>\n\nfunction ZMake(expectedType:string,json:any):DataObj {\n   let type:string=json._t_;\n   if (!DataObj.checkTypeCode(expectedType,type)){\n      console.log('ERR expecting '+expectedType+' got '+type,json);\n      return null\n   }\n   if (!type){\n      type=expectedType;\n   }\n   switch(type){\n      \n      case \"T\":\n         return new Team(json);\n      case \"P\":\n         return new Person(json);\n      case \"PL\":\n         return new Player(json);\n      case \"G\":\n         return new Game(json);\n      case \"GE\":\n         return new GameEvent(json);\n      default:\n         console.log('ERR bad typeCode '+type+' on',json);\n         return null\n      \n   }\n   return null;\n}\nDataObj.make=ZMake;\nfunction ZMakeList(expectedType:string,json:any[],parent:DataObj):DataObj[] {\n   let rslt:DataObj[] = [];\n   for (let i in json){\n      let obj:DataObj = ZMake(expectedType,json[i]);\n      obj.parent=parent;\n      rslt.push(obj); \n   }\n   return rslt;\n}\nDataObj.makeList=ZMakeList;\nfunction ZMakeDict(expectedType:string,json:any,parent:DataObj):{[k:string]:DataObj} {\n   let rslt:{[k:string]:DataObj}={};\n   for (let k in json){\n      let obj:DataObj = ZMake(expectedType,json[k]);\n      obj.parent=parent;\n      rslt[k]=obj; \n   }\n   return rslt;\n}\nDataObj.makeDict=ZMakeDict;\n\nDataObj.classInfo={\n   \"T\":{ \"className\":\"Team\",\"superCode\":\"\", \"keyed\":true,\n      fields: {\n         TeamName:{ type:\"string\", isList:false, isDict:false},\n         SeasonLabel:{ type:\"string\", isList:false, isDict:false},\n         Coach:{ type:\"Person\", isList:false, isDict:false},\n         AssistantCoach:{ type:\"Person\", isList:false, isDict:false},\n         TeamManager:{ type:\"Person\", isList:false, isDict:false},\n      },\n   },\n   \"P\":{ \"className\":\"Person\",\"superCode\":\"\", \"keyed\":true,\n      fields: {\n         FirstName:{ type:\"string\", isList:false, isDict:false},\n         LastName:{ type:\"string\", isList:false, isDict:false},\n         Email:{ type:\"string\", isList:false, isDict:false},\n         Phone:{ type:\"string\", isList:false, isDict:false},\n      },\n   },\n   \"PL\":{ \"className\":\"Player\",\"superCode\":\"\", \"keyed\":true,\n      fields: {\n         Person:{ type:\"Person\", isList:false, isDict:false},\n         JerseyNumber:{ type:\"number\", isList:false, isDict:false},\n         Position:{ type:\"string\", isList:false, isDict:false},\n         SecondaryPosition:{ type:\"string\", isList:false, isDict:false},\n      },\n   },\n   \"G\":{ \"className\":\"Game\",\"superCode\":\"\", \"keyed\":true,\n      fields: {\n         Team:{ type:\"Team\", isList:false, isDict:false},\n         HomeGame:{ type:\"boolean\", isList:false, isDict:false},\n         Date:{ type:\"string\", isList:false, isDict:false},\n         StartTime:{ type:\"number\", isList:false, isDict:false},\n         EndTime:{ type:\"number\", isList:false, isDict:false},\n         WinResult:{ type:\"string\", isList:false, isDict:false},\n         GameEvents:{ type:\"GameEvent\", isList:true, isDict:false},\n      },\n   },\n   \"GE\":{ \"className\":\"GameEvent\",\"superCode\":\"\", \"keyed\":false,\n      fields: {\n         EventType:{ type:\"string\", isList:false, isDict:false},\n         Time:{ type:\"number\", isList:false, isDict:false},\n         Player:{ type:\"Player\", isList:false, isDict:false},\n         HomeScoreIncreased:{ type:\"boolean\", isList:false, isDict:false},\n         AwayScoreIncreased:{ type:\"boolean\", isList:false, isDict:false},\n      },\n   },\n}\n","\n/// <reference path=\"../../aaswZing/Zing/data/RightsManager.ts\"/>\n/// <reference path=\"../../aaswZing/Zing/data/UserManager.ts\"/>\n\nclass AllRightsManager extends RightsManager {\n  constructor(dataSource: DataSource, userManager = new NoUserManager()) {\n    super(dataSource, userManager);\n  }\n  checkGET(key: string, serverContext: ServerContext, done: (granted: boolean) => void) {\n    done(true);\n  }\n\n  checkGETBlob(blobKey: string, serverContext, done: (granted: boolean) => void) {\n    done(true);\n  }\n  checkPUT(obj: DataObj, serverContext: ServerContext, done: (granted: boolean) => void) {\n    done(true);\n  }\n\n  checkPUTBlob(serverContext: ServerContext, done: (granted: boolean) => void) {\n    done(true);\n  }\n  checkDELETE(key: string, serverContext: ServerContext, done: (granted: boolean) => void) {\n    done(true);\n  }\n  checkFIND(typeCode: string, search: Query, serverContext: ServerContext, done: (granted: boolean) => void) {\n    done(true);\n  }\n}\n\nclass NoUserManager extends UserManager {\n  login(userName: string, password: string, done: (err: string, user: DataObj) => void,\n    serverContext: ServerContext) {\n    done(null, null);\n  }\n\n  getUserKey(serverContext?: ServerContext): string {\n    return \"anonymous\";\n  }\n\n}","// these are type declarations use for various parameters and options\n/// <reference path=\"ZUI.ts\"/>\n\ntype KeyString = string;\ntype ZUIVal = DataObj | string | number | boolean | DataObj[] | string[] | number[] | boolean[];\n\ntype Fstring = ()=>string;\ntype StringF = string | Fstring;\ntype StringSetF = (val:string)=>void;\n\ntype Fnumber = ()=>number;\ntype NumberF = number | Fnumber;\ntype NumberSetF = (val:number)=>void;\n\ntype Fboolean = ()=>boolean;\ntype BooleanF = boolean | Fboolean;\ntype BooleanSetF = (val:boolean)=>void;\n\ntype EventF = (event:Event)=>void;\n\ntype FZUI = ()=>ZUI;\ntype ZUIF = ZUI | FZUI;\ntype FZUIList =  ()=>ZUI[];\ntype ZUIListF = ZUI[] | FZUIList;","\n/// <reference path=\"typings/jquery.d.ts\"/>\n/// <reference path=\"./ZUITypes.ts\"/>\n/// <reference path=\"../data/DataObj.ts\"/>\n\nclass ZUI {\n    protected content:ZUI;\n    renderJQ():JQuery{\n        //return this.content.style(this.classStr()).renderJQ();\n        let jq = this.content.renderJQ();\n        let classes = this.classStr();\n        jq.addClass(classes);\n        if (this.css_){\n            jq.attr('style',ZUI.stringVal(this.css_))\n        }\n        return jq;\n    }\n    static pageManager:PageManager;\n    constructor(){\n    }\n    static notifyCount=0;\n    static notify(){ \n        if (this.notifyCount<3){\n            this.notifyCount+=1;\n            try {\n                if (ZUI.pageManager)\n                    ZUI.pageManager.notify();\n            } finally {\n                this.notifyCount-=1;\n            }\n        }\n    }\n    protected css_:StringF;\n    css(c:StringF):ZUI{\n        this.css_=c;\n        return this;\n    }\n    protected applyCSS(jq:JQuery){\n        if (this.css_){\n            let css = ZUI.stringVal(this.css_);\n            jq.attr(\"style\",css);\n        }\n    }\n    protected field_:string;\n    field(f:string):ZUI{\n        this.field_=f;\n        return this;\n    }\n    protected style_:StringF;\n    style(s:StringF):ZUI{\n        this.style_=s;\n        return this;\n    }\n\n    protected hideShow_:BooleanF;\n    hideShow(hs:BooleanF):ZUI{\n        this.hideShow_=hs;\n        return this;\n    }\n    hide():boolean{\n        if (this.hideShow_ instanceof Function){\n            return this.hideShow_();\n        } else {\n            return this.hideShow_;\n        }\n    }\n\n    static stringVal(content:StringF):string {\n        let val = \"\";\n        if (content instanceof Function){\n            val = content();\n        } else {\n            val=content;\n        }\n        if (!val)\n            val=\"\";\n        return val;\n    }\n    static numberVal(content:NumberF):number{\n        let val = 0;\n        if (content instanceof Function){\n            val = content();\n        } else {\n            val=content;\n        }\n        return val;\n    }\n    \n    classStr():string{\n        let str = \"\";\n        if (this.style_){\n            let classes = ZUI.stringVal(this.style_);\n            str =  classes+\" \";\n        } else\n            str =  \"\";\n        if (this.hideShow_){\n            let hs = this.hide();\n            if (hs)\n                str+=\" hidden \";\n        }\n        return str;\n    }\n    \n    uniqueId():string {\n        let id:string = \"i\"+Math.floor(Math.random()*1000000);\n        return id;\n    }\n    waiting():JQuery{\n        return $(\"<div>Waiting</div>\");         // replace this with a spinner icon\n    }\n    error(msg:string):JQuery{\n        return $(`ZUI ERROR ${msg}`)\n    }\n    static setState(fieldName:string,newVal:any){\n        let pm = ZUI.pageManager;\n        if (pm){\n            let cp = pm.curPage;\n            if (cp){\n                let ps = cp.pageState;\n                if (ps) ps[fieldName]=newVal;\n            }\n        }\n    }\n    static getState(fieldName:string):any{\n        let pm = ZUI.pageManager;\n        if (pm){\n            let cp = pm.curPage;\n            if (cp){\n                let ps = cp.pageState;\n                if (ps)  return ps[fieldName];\n            }\n        }\n        return null;\n    }\n    static getUserKey():string{\n        return ZUI.pageManager.getUserManager().getUserKey();\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass TextUI extends ZUI{\n    private textS:StringF;\n    constructor(text:StringF){\n        super();\n        this.textS=text;\n    }\n    renderJQ():JQuery{\n        let val = ZUI.stringVal(this.textS);\n        let jq = $(`<div class='TextUI ${this.classStr()}'>${val}</div>`);\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass ButtonUI extends ZUI{\n    title:StringF;\n    onclick:(event:Event)=>void;\n    enabled:()=>boolean;\n    constructor(title:StringF){\n        super();\n        this.title=title;\n    }\n    click(onclick:(event:Event)=>void):ButtonUI{\n        this.onclick=onclick;\n        return this;\n    }\n    enable(enabled:()=>boolean):ButtonUI {\n        this.enabled=enabled;\n        return this;\n    }\n    renderJQ():JQuery{\n        let title = ZUI.stringVal(this.title);\n        let jq = $(`<button class='ButtonUI ${this.classStr()}' ></button>`);\n        if (this.enabled && !this.enabled()){\n            jq.addClass(\"ButtonUI-disabled\");\n        }\n        jq.html(title);\n        if((!this.enabled || this.enabled()) && this.onclick){\n            jq.click((event)=>{\n                this.onclick(event);\n            })\n        }\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass InputUI extends ZUI {\n    getF_:Fstring;\n    setF_:StringSetF;\n    phF:StringF;\n    fieldType:string;\n    constructor(fieldType?:string){\n        super();\n        this.getF_=null;\n        this.setF_=null;\n        this.phF=null;\n        this.fieldType=fieldType;\n        if (!fieldType)\n            this.fieldType=\"text\";\n    }\n    getF(getFF:Fstring):InputUI{ \n        this.getF_=getFF;\n        return this;\n    }\n    setF(setFF:StringSetF):InputUI{\n        this.setF_=setFF;\n        return this;\n    }\n\n    placeHolder(phF:StringF):InputUI{\n        this.phF=phF;\n        return this;\n    }\n    renderJQ():JQuery {\n        let val = ZUI.stringVal(this.getF_);\n        let ph = ZUI.stringVal(this.phF);\n        let jq = $(`<input type='${this.fieldType}' class='InputUI ${this.classStr()}' value='${val}' placeholder='${ph}'/>`);\n        jq.click((event)=>{\n            event.stopImmediatePropagation()\n        })\n        jq.on(\"change\",(event)=>{\n            let newVal = jq.val();\n            if (this.setF_){\n                this.setF_(<string>newVal);\n                jq.val(this.getF_());\n            }\n        })\n        jq.on(\"paste\",(event)=>{\n            let oe:any = event.originalEvent;\n            let content = oe.clipboardData.getData('text/plain');\n            //DB.msg(`Paste \"${content}`);\n            this.setF_(content);\n        })\n        jq.on('drop',(event)=>{\n            event.preventDefault();\n            let oe:any=event.originalEvent;\n            let data = oe.dataTransfer.getData(\"Text\");\n            //DB.msg(`Drop ${data}`)\n            this.setF_(data);\n        })\n        this.applyCSS(jq);\n        return jq;\n    }   \n}","/// <reference path=\"InputUI.ts\"/>\n\nclass TextFieldUI extends InputUI {\n    getF_:Fstring;\n    setF_:StringSetF;\n    phF:StringF;\n    constructor(fieldType?:\"text\" | \"password\" | \"number\" | \"email\" | \"url\"){\n        super(fieldType);\n        this.getF_=null;\n        this.setF_=null;\n        this.phF=null;\n    }\n\n \n}\n","/// <reference path=\"../data/DataSource.ts\"/>\n/// <reference path=\"ZUI.ts\"/>\n\ntype PageState = { [stateVarName: string]: string };\ntype PageMap = { [pageName: string]: (state: PageState) => Page };\nclass PageManager implements DataMonitor {\n    dataSource: DataSource;\n    pageContentSelector: string;\n    homePage: Page;\n    private static pageMap: PageMap = {};\n    private static curManager: PageManager;\n    curPage: Page;\n    private root: string;\n    constructor(dataSource: DataSource, homePage: Page, pageContentSelector: string) {\n        PageManager.curManager = this;\n        this.dataSource = dataSource;\n        dataSource.setDataMonitor(this);\n        this.homePage = homePage;\n        homePage.pageManager = this;\n        this.curPage = null;\n        this.pageContentSelector = pageContentSelector;\n        let windowPath = window.location.pathname;\n        window.onpopstate = (ev: PopStateEvent) => {\n            this.doPopState(ev.state);\n        }\n\n        this.pageFromURLPath(windowPath);\n        this.notify();\n    }\n    getPageState(): PageState {\n        return this.curPage.pageState;\n    }\n    private static GETPageState(): PageState {\n        return PageManager.curManager.curPage.pageState;\n    }\n    static GOTO(pageName: string, newState: PageState = PageManager.GETPageState()) {\n        PageManager.curManager.goto(pageName, newState);\n    }\n    goto(pageName: string, newState: PageState = this.getPageState()) {\n        if (PageManager.curManager && PageManager.curManager.curPage)\n            newState.__pageName = pageName;\n\n        let newURL = this.setupNextPage(pageName, newState);\n        history.replaceState(newState, null, newURL);\n        PageManager.curManager.notify();\n    }\n    static PUSHTO(pageName: string, newState: PageState = PageManager.GETPageState()) {\n        PageManager.curManager.pushto(pageName, newState);\n    }\n    pushto(pageName: string, newState: PageState = this.getPageState()) {\n        if (PageManager.curManager && PageManager.curManager.curPage)\n            newState.__pageName = pageName;\n        let newURL = this.setupNextPage(pageName, newState);\n        history.pushState(newState, null, newURL);\n        PageManager.curManager.notify();\n    }\n    private setupNextPage(pageName: string, newState: PageState) {\n        let pageF: (state: PageState) => Page = PageManager.pageMap[pageName];\n        if (pageF) {\n            let newPage = pageF(newState);\n            if (newPage) {\n                PageManager.curManager.curPage = newPage;\n                newPage.pageManager = this;\n            } else {\n                DB.msg(`page function on ${pageName} returned no page`, newState);\n            }\n        } else {\n            DB.msg(\"no registerd page for \" + pageName);\n        }\n        let root = PageManager.curManager.root;\n        let queryStr = PageManager.queryFromState(newState);\n        let newURL = root + \"/pg/\" + pageName + queryStr;\n        return newURL;\n    }\n    private static queryFromState(newState: any) {\n        if (typeof newState == \"object\") {\n            let first = true;\n            let queryStr = \"\";\n            for (let paramName in newState) {\n                if (paramName != \"__pageName\") {\n                    let param = newState[paramName];\n                    if (typeof param == \"string\") {\n                        let paramStr = paramName + '=' + param;\n                        paramStr = encodeURI(paramStr);\n                        if (first) {\n                            first = false;\n                            queryStr = \"?\" + paramStr;\n                        } else {\n                            queryStr += \"&\" + paramStr;\n                        }\n                    }\n                }\n            }\n            return queryStr;\n        } else {\n            return \"\";\n        }\n    }\n    getUserManager(): UserManager {\n        let ds = this.dataSource;\n        if (ds) {\n            let rm = ds.getRightsManager();\n            if (rm) {\n                let um = rm.userManager;\n                return um;\n            }\n        }\n        return null;\n    }\n    getUser(done: (user: DataObj) => void) {\n        let um = this.getUserManager();\n        if (um) {\n            um.getUser(done);\n        } else {\n            done(null);\n        }\n    }\n    getUserKey(): string {\n        let um = this.getUserManager();\n        let uk = um.getUserKey();\n        return uk;\n    }\n    notify() {\n        let pageContent = $(this.pageContentSelector);\n        pageContent.empty();\n        if (this.curPage) {\n            let newContent = this.curPage.renderJQ();\n            pageContent.empty();\n            pageContent.append(newContent);\n            PageManager.afterDOMNotify();\n        } else {\n            pageContent.html(\"******************** No Cur Page ***********************\");\n\n        }\n    }\n    static BACK() {\n        PageManager.curManager.back();\n    }\n    back() {\n      history.back();\n      PageManager.curManager.notify();\n    }\n\n    static registerPageFactory(pageName: string, factory: (state: PageState) => Page) {\n        PageManager.pageMap[pageName] = factory;\n    }\n    private doPopState(state: PageState) {\n        if (!state) {\n            let pn = this.homePage.pageName();\n            this.setupNextPage(pn, { __pageName: pn });\n            PageManager.curManager.notify();\n            return;\n        }\n        if (state.__pageName) {\n            this.setupNextPage(state.__pageName, state);\n            PageManager.curManager.notify();\n        }\n    }\n    private pageFromURLPath(windowPath: string) {\n\n        let query = window.location.search;\n        let newState = this.stateFromQuery(query);\n        let parts = windowPath.split(\"/pg/\");\n        let pageName = parts[1] || \"\";\n        this.root = parts[0];\n        if (this.root.length <= 1)\n            this.root = \"/client\";\n        if (!this.getUserKey()) {\n            this.curPage = this.homePage;\n        } else {\n            if (pageName.length == 0) {\n                this.curPage = this.homePage;\n                newState.__pageName = this.homePage.pageName();\n            } else {\n                let newPageF = PageManager.pageMap[pageName];\n                if (newPageF) {\n                    newState.__pageName = pageName;\n                    this.curPage = newPageF(newState);\n                } else {\n                    DB.msg(\"no such page as \" + pageName);\n                }\n            }\n        }\n        this.curPage.pageManager = this;\n        this.notify();\n    }\n    private stateFromQuery(query: string): PageState {\n        if (query.startsWith('?')) {\n            query = query.substr(1, query.length-1);\n        }\n        let rslt: PageState = {};\n        let decQuery = decodeURI(query);\n        let qParts: string[] = decQuery.split(\"&\");\n        for (let i in qParts) {\n            let qPart = qParts[i];\n            let eqParts: string[] = qPart.split(\"=\");\n            let name = eqParts[0];\n            let val = eqParts[1];\n            if (name.length > 0)\n                rslt[name] = val;\n        }\n        return rslt;\n    }\n    private static afterDOMList: any[];\n    static addAfterDOMNotice(noticeF: () => void) {\n        if (!PageManager.afterDOMList) {\n            PageManager.afterDOMList = [];\n        }\n        PageManager.afterDOMList.push(noticeF);\n    }\n    private static afterDOMNotify() {\n        for (let i in PageManager.afterDOMList) {\n            let f = <() => void>PageManager.afterDOMList[i];\n            f();\n        }\n    }\n}\n\nabstract class Page extends ZUI {\n    pageState: PageState;\n    pageManager: PageManager;\n    constructor(pageState: PageState) {\n        super();\n        this.pageState = pageState;\n        this.pageManager = null;\n\n    }\n    notify() {\n        this.pageManager.notify();\n    }\n    getUserManager(): UserManager {\n        let ds = DataObj.globalSource;\n        if (ds) {\n            let rm = ds.getRightsManager();\n            if (rm) {\n                return rm.userManager;\n            }\n        }\n        return null;\n    }\n    getUserKey(): string {\n        let um = this.getUserManager();\n        if (um) {\n            return um.getUserKey(null);\n        }\n        return null;\n    }\n    abstract pageName(): string;\n}","/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"PageManager.ts\"/>\n\nclass TabUI extends ZUI {\n    items:TabUIDesc[];\n    selectedTabIdx:number;\n    constructor(){\n        super();\n        this.items=[];\n        this.selectedTabIdx=0;\n    }\n    tab(tabTitle:string,tabView:ZUIF):TabUI{\n        let desc:TabUIDesc = {tabTitle:tabTitle,tabView:tabView,renderTabView:null};\n        this.items.push(desc);\n        return this;\n    }\n    renderJQ():JQuery{\n        let jq=$(`<div class=\"TabUI ${this.style_}\"></div>`);\n        let tabBar = this.renderTabBar();\n        jq.append(tabBar);\n        if (!this.items[this.selectedTabIdx].renderTabView){\n            if (typeof this.items[this.selectedTabIdx].tabView == 'function'){\n                let tv = (<any>(this.items[this.selectedTabIdx])).tabView()\n                this.items[this.selectedTabIdx].renderTabView=tv;\n            } else {\n                this.items[this.selectedTabIdx].renderTabView=<ZUI>this.items[this.selectedTabIdx].tabView\n            }\n        }\n        let pane = this.items[this.selectedTabIdx].renderTabView.renderJQ();\n        jq.append(pane);\n        this.applyCSS(jq);\n        return jq;\n    }\n    protected renderTabBar(){\n        let bar = $(`<div class=\"TabUI-bar ${this.style_}-bar\"></div>`);\n        for (let i in this.items){\n            let desc = this.items[i];\n            let btn = this.renderTabBtn(i,desc);\n            bar.append(btn);\n        }\n        return bar;\n    }\n    protected renderTabBtn(i,desc:TabUIDesc):JQuery{\n        let btn = $(`<div class=\"TabUI-btn ${this.style_}-btn\">${desc.tabTitle}</div>`);\n        if (i==this.selectedTabIdx){\n            btn.addClass(\"TabUI-selected\");\n            btn.addClass(`${this.style_}-selected`);\n        }\n        PageManager.addAfterDOMNotice(()=>{\n            btn.click(()=>{\n                if (this.selectedTabIdx!=i){\n                    this.selectedTabIdx=i;\n                    if (typeof desc.tabView == 'function'){\n                        desc.renderTabView = desc.tabView();\n                    } else {\n                        desc.renderTabView=desc.tabView\n                    }\n                    ZUI.notify();\n                }\n            })\n        })\n        return btn;\n    }\n}\ntype TabUIDesc = {\n    tabTitle:string,\n    tabView:ZUIF,\n    renderTabView:ZUI\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass DivUI extends ZUI{\n    items: ZUIListF;\n    constructor(items:ZUIListF){\n        super();\n        this.items = items;\n    }\n    renderJQ():JQuery{\n        let items:ZUI[]=null;\n        if (this.items instanceof Function)\n            items = this.items();\n        else\n            items = this.items;\n        let jq = $(`<div class='DivUI ${this.classStr()}'></div>`);\n\n        for (let i in items){\n            let curItem=items[i];\n            let itemJQ = curItem.renderJQ();\n            jq.append(itemJQ);\n        }\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\ntype TypeSwitchUIChoice = {\n    typeCode:string;\n    zui:ZUI;\n}\nclass TypeSwitchUI extends ZUI{\n    choices: TypeSwitchUIChoice[];\n    model:DataObj;\n    constructor(){\n        super();\n        this.choices=[];\n        this.model=null;\n    }\n    choice(typeCode:string, controller:ZUI):TypeSwitchUI{\n        let choice:TypeSwitchUIChoice = {\n            typeCode:typeCode,\n            zui:controller\n        }\n        this.choices.push(choice);\n        return this;\n    }\n    renderJQ():JQuery{\n        let jq = $(`<div class='TypeSwitchUI ${this.classStr()}'></div>`);\n        if (this.model && this.model instanceof DataObj){\n            let tc = this.model.getTypeCode();\n            for (let i in this.choices){\n                let choice = this.choices[i];\n                if (choice.typeCode == tc){\n                    let choiceJQ = choice.zui.renderJQ();\n                    jq.append(choiceJQ);\n                    break;\n                }\n            }\n        }\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass OpenCloseUI extends ZUI{\n    headerZ:ZUI;\n    hideShowFZ:FZUI;\n    hideShowZ:ZUI;\n    hidden:boolean;\n    hideShowJQ:JQuery;\n    arrowBoxJQ:JQuery;\n\n    constructor(headerUI:ZUI,hideShowUI:FZUI,initialOpen?:boolean){\n        super();\n        this.headerZ=headerUI;\n        this.hideShowFZ=hideShowUI;\n        this.hidden=!initialOpen;\n        this.hideShowZ=null;\n    }\n    renderJQ():JQuery{\n        //DB.start(\"OpenCloseUI renderJQ\");\n        let containerJQ = $(`<div class='HideShowUI ${this.classStr()}'></div>`);\n        this.arrowBoxJQ = this.arrowBox();\n        containerJQ.append(this.arrowBoxJQ);\n        let headerJQ = $(\"<div class='HideShowUIHeaderBar'></div>\")\n            .click(()=>{ this.openCloseClick()})\n        containerJQ.append(headerJQ);\n        if (this.headerZ){\n            let headerZ = this.headerZ.renderJQ();\n            headerJQ.append(headerZ);\n        }\n        if (!this.hideShowJQ){\n            this.hideShowJQ = $(`<div class='HideShowUIContent'></div>`);\n        }\n        if (!this.hidden && !this.hideShowZ){\n            this.hideShowZ=this.hideShowFZ();\n        }\n        if (this.hideShowZ){\n            this.hideShowJQ.empty();\n            this.hideShowJQ.append(this.hideShowZ.renderJQ());\n        }\n        \n        containerJQ.append(this.hideShowJQ);\n        this.refreshArrow();\n        //DB.end(\"OpenCloseUI renderJQ\");\n        this.applyCSS(containerJQ);\n        return containerJQ;\n    }\n    protected arrowBox():JQuery{\n        let box = $(\"<div class='arrowbox'></div>\");\n        box.click(()=>{\n            this.openCloseClick();\n        })\n        return box;\n    }\n    protected openCloseClick(){\n        this.hidden=!this.hidden;\n        this.refreshArrow();\n        ZUI.notify();\n    }\n    protected refreshArrow(){\n        if (this.hidden){\n            this.arrowBoxJQ.addClass(\"rightArrowBtn\");\n            this.arrowBoxJQ.removeClass(\"downArrowBtn\");\n            if (this.hideShowJQ)\n                this.hideShowJQ.addClass(\"hidden\");\n        } else {\n            this.arrowBoxJQ.removeClass(\"rightArrowBtn\");\n            this.arrowBoxJQ.addClass(\"downArrowBtn\");\n            if (this.hideShowJQ)\n                this.hideShowJQ.removeClass(\"hidden\");\n        }\n    }\n}\n","/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"DivUI.ts\"/>\n\nclass KeyListUI extends DivUI{\n    protected keyListF:()=>KeyString[];\n    protected itemViewF:(objKey:string)=>ZUI;\n    protected keyMap:{ [objKey:string]:ZUI};\n    protected sortF:(key1:string, key2:string)=>number;\n    constructor(keyListF:()=>KeyString[]){\n        super([]);\n        //DB.msg(\"KeyListUI - const\");\n        this.keyListF=keyListF;\n        this.keyMap={};\n        this.style(\"KeyListUI\");\n    }\n    itemView(itemViewF:(objKey:string)=>ZUI):KeyListUI{\n        this.itemViewF=itemViewF;\n        return this;\n    }\n    sort(sortF:(key1:string, key2:string)=>number):KeyListUI{\n        this.sortF=sortF;\n        return this;\n    }\n    protected buildKeyViewList(){\n        //DB.start(\"KeyListUI.buildKeyViewList\");\n        let newKeyMap:{ [objKey:string]:ZUI} = {};\n        let keyList = this.keyListF();\n        if (keyList && this.sortF){\n            keyList.sort(this.sortF);\n        }\n        this.items=[];\n        for (let i in keyList){\n            let key = keyList[i];\n            let viewZUI = this.keyMap[key];\n            if (!viewZUI){\n                viewZUI = this.itemViewF(key);\n            }\n            newKeyMap[key]=viewZUI;\n            this.items.push(viewZUI);\n        }\n        this.keyMap = newKeyMap;\n        \n        //DB.end(\"KeyListUI.buildKeyViewList\");\n    }\n    renderJQ():JQuery{\n        this.buildKeyViewList();\n        return super.renderJQ();\n    }\n\n}","/// <reference path=\"ZUI.ts\"/>\n\ntype MessageUIContent = { \n    msgType: \"error\" | \"inform\";\n    msg:string;\n}\nclass Messages extends ZUI {\n    messageList:MessageUIContent[];\n    static curMessages:Messages;\n    constructor(){\n        super();\n        this.messageList=[];\n        Messages.curMessages=this;\n    }\n    renderJQ():JQuery{\n        let div = $(`<div class='Messages ${this.classStr()}'></div>`);\n        for (let i in this.messageList){\n            let msg = this.messageList[i];\n            let msgDiv = this.newMessage(msg);\n            div.append(msgDiv);\n        }\n        this.applyCSS(div);\n        return div;\n    }\n    private newMessage(msg:MessageUIContent):JQuery{\n        let mDiv = null;\n        if (msg.msgType==\"error\") \n            mDiv = $(`<div class='MessageError'>${msg.msg}</div>`);\n        else\n            mDiv = $(`<div class='MessageInform'>${msg.msg}</div>`);\n        return mDiv;\n    }\n    static error(msg:string){\n        Messages.curMessages.messageList.push({msgType:\"error\", msg:msg });\n        ZUI.notify();\n    }\n    static inform(msg:string){\n        Messages.curMessages.messageList.push({msgType:\"inform\", msg:msg });\n        ZUI.notify();\n    }\n    static clear(){\n        Messages.curMessages.messageList=[];\n        ZUI.notify();\n    }\n    static hasMessages():boolean{\n        return Messages.curMessages.messageList.length>0;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\n\nclass SelectUI extends ZUI{\n    selectF:()=>string;\n    choices:{ [selectCode:string]:ZUIF};\n    constructor(selectF:()=>string){\n        super();\n        this.selectF=selectF;\n        this.choices={};\n    }\n    choice(selectCode:string,ui:ZUIF):SelectUI{\n        this.choices[selectCode]=ui;\n        return this;\n    }\n    renderJQ():JQuery{\n        let select = this.selectF();\n        let selected = this.choices[select];\n        if (selected) {\n            if (selected instanceof ZUI)\n                return selected.renderJQ();\n            else\n                return selected().renderJQ();\n        } else if (this.choices[\"_default_\"]){\n            let sel = this.choices[\"_default_\"];\n            if (sel instanceof ZUI)\n                return sel.renderJQ();\n            else\n                return sel().renderJQ();\n        } else {\n            return this.error(\"Bad selection \"+select);\n        }\n    }\n}","\nclass Modal {\n    static alert(message:string){\n        let zui = new TextUI(message);\n        Modal.show(zui,{\n            \"OK\":()=>{}\n        });\n    }\n    static confirm(message:string,answer:(yes:boolean)=>void){\n        let zui = new TextUI(message);\n        Modal.show(zui,{\n            \"Yes\":()=>{answer(true)},\n            \"No\":()=>{answer(false)}\n        })\n    }\n    private static saveDisplay:ZUI;\n    private static actions:{ [text:string]:()=>void}\n    private static lastShowMillis:number=0;\n    static show(display:ZUI,actions:{ [text:string]:()=>void}){\n        let now = Date.now();\n        if ((now-this.lastShowMillis)>1000){\n            this.lastShowMillis=now;\n            Modal.saveSelection();\n            Modal.saveDisplay=display;\n            Modal.actions = actions; \n            Modal.notify();\n        }\n    }\n    static notify(){\n        if (Modal.saveDisplay){\n            let overlay = $(\"#modaloverlay\");\n            overlay.addClass(\"Modal\");\n            overlay.empty();\n            let contentDiv = Modal.saveDisplay.renderJQ().addClass(\"Modal-content\");\n            let actionDiv = this.makeActions(Modal.actions).addClass(\"Modal-actbar\");\n            let showBox = $(`<div class=\"Modal-show\"></div>`);\n            showBox.append(contentDiv);\n            showBox.append(actionDiv);\n            overlay.append(showBox);\n            overlay.removeClass(\"hidden\");\n        }\n    }\n    static hide(){\n        Modal.saveDisplay=null;\n        $(\"#modaloverlay\").addClass(\"hidden\");\n    }\n    private static makeActions(actions:{ [text:string]:()=>void}):JQuery{\n        let actList:ZUI[] = [];\n        for (let a in actions){\n            let action =actions[a];\n            let btn = this.btnAction(a,action);\n            actList.push(btn);\n        }\n        let actZui = new DivUI(actList).style(\"Modal-actions\");\n        return actZui.renderJQ();\n    }\n    private static btnAction(text:string, action:()=>void):ZUI{\n        let bz = new ButtonUI(text).click(()=>{\n            Modal.lastShowMillis=0;\n            Modal.restoreSelection();\n            action();\n            Modal.saveDisplay=null;\n            $(\"#modaloverlay\").addClass(\"hidden\");\n        }).style(\"Modal-btn\");\n        return bz;\n    }\n    private static savedSelection:any;\n    private static saveSelection(){\n        if (window.getSelection){\n            var sel = window.getSelection();\n            if (sel.getRangeAt && sel.rangeCount){\n                Modal.savedSelection = sel.getRangeAt(0);\n            }\n        } \n    }\n    private static restoreSelection(){\n        if (Modal.savedSelection){\n            if (window.getSelection){\n                var sel = window.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(Modal.savedSelection);\n            }\n        }\n    }\n}","/// <reference path=\"ButtonUI.ts\"/>\n/// <reference path=\"TextUI.ts\"/>\n/// <reference path=\"DivUI.ts\"/>\n/// <reference path=\"Modal.ts\"/>\n/// <reference path=\"../data/HTTPDataSource.ts\"/>\n\nclass HTMLEditUI extends ZUI{\n    private htmlDiv:JQuery;\n    private saveStatusBar:HTMLEditSaveStatusBar;\n    private isMin:boolean;\n    getF_:Fstring;\n    setF_:StringSetF;\n    constructor(){\n        super();\n        this.getF_=null;\n        this.setF_=null;\n        this.isMin=true;\n        this.saveStatusBar = new HTMLEditSaveStatusBar()\n        this.content = new DivUI([\n            this.toolBar(),\n            this.saveStatusBar\n        ])\n        let divId=\"h\"+Math.floor(10000000*Math.random()+1).toString();\n        this.htmlDiv = $(`<div id=\"${divId}\" class=\"HTMLEditUI-html left col-gn-12\" contentEditable=\"true\"></div>`);\n        PageManager.addAfterDOMNotice(()=>{\n            this.htmlDiv.on(\"blur keyup paste cut\",()=>{\n                this.scheduleSave();\n            })\n        })\n\n        this.htmlDiv.on(\"blur keyup paste cut\",\"#\"+divId,()=>{\n            DB.msg(\"div changed\");\n        })\n        this.style(\"HTMLEditUI\");\n\n    }\n    getF(getFF:Fstring):HTMLEditUI{ \n        this.getF_=getFF;\n        return this;\n    }\n    setF(setFF:StringSetF):HTMLEditUI{\n        this.setF_=setFF;\n        return this;\n    }\n    \n    toolBar():ZUI{\n        let bar = new DivUI([\n            new HTMLEditControl(this,\"undo\",\"l\"),\n            new HTMLEditControl(this,\"bold\"),\n            new HTMLEditControl(this,\"italic\"),\n            new HTMLEditControl(this,\"underline\"),\n            new HTMLEditControl(this,\"subscript\"),\n            new HTMLEditControl(this,\"superscript\",\"r\"),\n\n            new HTMLBlockControl(this,\"h1\",\"<b>H1</b>\",\"l\"),\n            new HTMLBlockControl(this,\"h2\",\"<b>H2</b>\"),\n            new HTMLBlockControl(this,\"h3\",\"<b>H3</b>\"),\n            new HTMLBlockControl(this,\"h4\",\"<b>H4</b>\"),\n            new HTMLBlockControl(this,\"pre\",\"pre\"),\n            new HTMLBlockControl(this,\"p\",\"<b>P</b>\",\"r\"),\n            \n            new HTMLEditControl(this,\"indent\",\"l\"),\n            new HTMLEditControl(this,\"outdent\"),\n            new HTMLEditControl(this,\"insertUnorderedList\",null,\"list-ul\"),\n            new HTMLEditControl(this,\"insertOrderedList\",\"r\",\"list-ol\"),\n            \n            new HTMLEditControl(this,\"createlink\",\"l\",\"link\"),\n            new HTMLEditControl(this,\"unlink\"),\n            new HTMLImageDropControl(this,\"insertimage\",\"r\",\"image\"),\n\n            \n            new HTMLEditControl(this,\"justifyLeft\",\"l\",\"align-left\"),\n            new HTMLEditControl(this,\"justifyCenter\",null,\"align-center\"),\n            new HTMLEditControl(this,\"justifyRight\",null,\"align-right\"),\n            new HTMLEditControl(this,\"justify\",\"r\",\"align-justify\"),\n            //new ButtonUI(\"Less\",()=>{DB.msg(\"LESS\")})\n        ]).style(\"HTMLEditUI-tool\");\n        return bar;\n    }\n    renderJQ():JQuery{\n        let div = this.content.renderJQ();\n        let newHTML = this.getF_();\n        this.htmlDiv.empty();\n        this.htmlDiv.html(newHTML);\n        div.append(this.htmlDiv);\n        this.applyCSS(div);\n        return div;\n    }\n    private saveTimerStarted:boolean = false;\n    private saveContent:string;\n    scheduleSave(){\n        this.saveContent= this.htmlDiv.html();\n        if (this.saveTimerStarted) return;\n        this.saveTimerStarted=true;\n        this.saveStatusBar.set(this.saveTimerStarted);\n        setTimeout(()=>{\n            this.saveTimerStarted=false;\n            this.setF_(this.saveContent);\n            this.saveStatusBar.set(this.saveTimerStarted);\n        },5000)\n    }\n}\nclass HTMLEditSaveStatusBar extends ZUI{\n    div:JQuery;\n    constructor(){\n        super();\n        this.div = $(\"<div class='HTMLEditSaveStatusBar left col-gn-2 offset-gn-2'>--</div>\")\n    }\n    set(saveOn:boolean){\n        this.div.empty();\n        if (saveOn)\n            this.div.html(\"-- save pending --\");\n        else\n            this.div.html(\"-- saved --\");\n    }\n    renderJQ():JQuery{\n        return this.div;\n    }\n}\n\nclass HTMLEditControl extends ButtonUI{\n    parent:HTMLEditUI;\n    cls:string;\n    cmnd:string;\n    st:string;\n    btn:JQuery;\n    constructor(parent:HTMLEditUI,cmnd:string, cap?:string, style?:string){\n        super(`<i class='fas fa-${style?style:cmnd}'></i>`);\n        this.click(()=>{\n            \n            event.stopPropagation();\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            if (cmnd==\"insertimage\" || cmnd==\"createlink\"){\n\t\t\t\tlet url = prompt(\"enter url\",\"http:\\/\\/\");\n\t\t\t\tif (this.validURL(url))\n\t\t\t\t\tdocument.execCommand(cmnd,false,url);\n\t\t\t\telse\n\t\t\t\t\talert(\"Invalid URL \\\"\"+url+\"\\\"\");\n\t\t\t} else {\n\t\t\t\tdocument.execCommand(cmnd,false);\n            }\n            parent.scheduleSave();\n        })\n        this.parent=parent;\n        this.cls=\"htc\";\n        if (cap){\n            this.cls+=\"-\"+cap;\n        }\n        this.cmnd=cmnd;\n        this.st=style;\n        if (!style)\n            this.st=cmnd;\n        this.style(this.cls);\n\n    }\n\n    private validURL(url:string):boolean{\n\t\tif(url && (url.search(\"http:\\/\\/\")==0 || url.search(\"https:\\/\\/\")==0)&& url.search(\"\\/\\/http\")==-1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\n\nclass HTMLImageDropControl extends ZUI{\n    parent:HTMLEditUI;\n    cls:string;\n    cmnd:string;\n    st:string;\n    btn:JQuery;\n    id:string;\n    constructor(parent:HTMLEditUI,cmnd:string, cap?:string, style?:string){\n        super();\n        this.id=this.uniqueId();\n        \n        PageManager.addAfterDOMNotice(()=>{\n            let cnt = $(\"#\"+this.id);\n            cnt.on(\"dragenter dragover dragleave\",(e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                cnt.addClass(\"ImageDropHover\");\n            });\n            cnt.on(\"dragleave\",(e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                cnt.removeClass(\"ImageDropHover\");\n            });\n            cnt.on(\"drop\",(e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                let oe = <any>(e.originalEvent);\n                let files = oe.dataTransfer.files;\n                this.processDroppedFiles(files);\n            })\n        });\n\n        this.parent=parent;\n        this.cls=\"htc\";\n        if (cap){\n            this.cls+=\"-\"+cap;\n        }\n        this.cmnd=cmnd;\n        this.st=style;\n        if (!style)\n            this.st=cmnd;\n        this.style(this.cls);\n\n    }\n    private processDroppedFiles(files:File[]){\n        //DB.msg(\"image drop\",files);\n        let file=files[0];\n        if (file.type.indexOf(\"image\")<0){\n            Modal.alert(`Dropped file of type ${file.type}. Only image files are allowed`);\n        } else {\n            DataObj.PUTFileBlob(file,(err:string,blobKey:string)=>{\n                let url = HTTPDataSource.urlFromBlobKey(blobKey);\n                let alignChoice=\"right\";\n                let width=\"50\";\n                Modal.show(new DivUI([\n                    new DropDownChoiceUI()\n                        .getF(()=>{\n                            return alignChoice;\n                        })\n                        .setF((val:string)=>{\n                            alignChoice=val;\n                            Modal.notify();\n                        })\n                        .choice(\"left\",\"Left\")\n                        .choice(\"right\",\"Right\")\n                        .style(\"ImageModal-align\"),\n                    new TextUI(\"width%\").style(\"ImageModal-widthl\"),\n                    new TextFieldUI(\"number\")\n                        .getF(()=>{ return width})\n                        .setF((val:string)=>{ \n                            width=val;\n                            Modal.notify();\n                        }).style(\"ImageModal-width\"),\n                    new TextUI(()=>{\n                            return `<img src=\"${url}\"  width=\"${width}%\" align=\"${alignChoice}\"/>`\n                        }).style(\"ImageModal-frame\"),\n                ]),{\n                    \"Insert\":()=>{\n                        //DB.msg(`choice ${alignChoice}  width ${width}`)\n                        document.execCommand(\"insertHTML\",false,\n                            `<img src=\"${url}\"  width=\"${width}%\" align=\"${alignChoice}\"/>`);\n                        this.parent.scheduleSave();\n                    },\n                    \"Cancel\":()=>{}\n                })\n                \n            })\n        }\n    }\n\n    renderJQ():JQuery{\n        let title = `<i class='fas fa-${this.st?this.st:this.cmnd}'></i><i>Drop here</i>`;\n        let jq = $(`<div class=\"ButtonUI ${this.classStr()}\">${title}</div>`);\n        jq.attr(\"id\",this.id);\n        this.applyCSS(jq);\n        return jq;\n    }\n\n\n}\nclass HTMLBlockControl extends ButtonUI{\n    cls:string;\n    parent:HTMLEditUI;\n    constructor( parent:HTMLEditUI,param:string, text:string,cap?:string){\n        super(text)\n        this.click(()=>{\n            event.stopPropagation();\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            \n            document.execCommand(\"formatBlock\",false,param);\n            this.parent.scheduleSave();\n        })\n        this.parent=parent;\n        this.cls=\"htc\";\n        if (cap){\n            this.cls+=\"-\"+cap;\n        }\n        this.style(this.cls);\n\n    }\n\n}","/// <reference path=\"DivUI.ts\"/>\n\nclass ClickWrapperUI extends DivUI{\n    onclick:(event:Event)=>void;\n    id:string;\n    constructor(items:ZUIListF){\n        super(items);\n        this.id = this.uniqueId();\n        PageManager.addAfterDOMNotice(()=>{\n            if (this.onclick)\n                $(\"#\"+this.id).click(this.onclick);\n        })\n    }\n    click(onclick:(event:Event)=>void):ClickWrapperUI{\n        this.onclick=onclick;\n        return this;\n    }\n    renderJQ():JQuery {\n        let jq = super.renderJQ();\n        jq.attr(\"id\",this.id);\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass BreakUI extends ZUI{\n    private textS:StringF;\n    constructor(text?:StringF){\n        super();\n        this.textS=text;\n        if (!text)\n            this.textS=\"\";\n    }\n    renderJQ():JQuery{\n        let val = ZUI.stringVal(this.textS);\n        if (!val || val.length==0){\n            val = \"BreakUI\";\n        }\n        let jq = $(`<div class='BreakUI ${this.classStr()}'>${val}</div>`);\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"DivUI.ts\"/>\ntype ObjZUI = {obj:DataObj, zui:ZUI};\nclass ObjListUI extends DivUI{\n    protected objListF:()=>DataObj[];\n    protected itemViewF:(obj:DataObj)=>ZUI;\n    protected objMap:ObjZUI[];\n    protected sortF:(o1:DataObj,o2:DataObj)=>number;\n    constructor(objListF:()=>DataObj[]){\n        super([]);\n        this.objListF=objListF;\n        this.objMap=[];\n        this.style(\"ObjListUI\");\n    }\n    itemView(itemViewF:(obj:DataObj)=>ZUI):ObjListUI{\n        this.itemViewF=itemViewF;\n        return this;\n    }\n    sort(sortF:(obj1:DataObj,obj2:DataObj)=>number):ObjListUI{\n        this.sortF=sortF;\n        return this;\n    }\n    protected buildKeyViewList(){\n        let newObjMap:ObjZUI[]=[];\n        let objList = this.objListF();\n        if (this.sort){\n            objList.sort(this.sortF);\n        }\n        this.items=[];\n        for (let i in objList){\n            let obj = objList[i];\n            let viewZUI = this.findZUI(obj);\n            if (!viewZUI){\n                viewZUI = this.itemViewF(obj);\n            }\n            newObjMap.push({obj:obj,zui:viewZUI});\n            this.items.push(viewZUI);\n        }\n\n        this.objMap = newObjMap;\n    }\n    protected findZUI(obj:DataObj):ZUI{\n        for (let i in this.objMap){\n            let map = this.objMap[i];\n            if (map.obj === obj){\n                return map.zui;\n            }\n        }\n        return null;\n    }\n    renderJQ():JQuery{\n        this.buildKeyViewList();\n        return super.renderJQ();\n    }\n\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass FileDropTargetUI extends ZUI {\n    onDrop:(files:File[])=>void;\n    content:ZUI;\n    hoverStyle_:string;\n    id:string;\n    constructor(content:ZUI){\n        super();\n        this.content=content;\n        this.hoverStyle_=\"FileDropTargetUI-drop\";\n        this.id = this.uniqueId();\n        PageManager.addAfterDOMNotice(()=>{\n            let cnt = $(\"#\"+this.id);\n            cnt.on(\"dragenter dragover dragleave\",(e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                cnt.addClass(this.hoverStyle_);\n            });\n            cnt.on(\"dragleave\",(e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                cnt.removeClass(this.hoverStyle_);\n            });\n            cnt.on(\"drop\",(e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                let oe = <any>(e.originalEvent);\n                let files = oe.dataTransfer.files;\n                if (this.onDrop){\n                    this.onDrop(files);\n                }\n            })\n        });\n    }\n    drop(onDrop:(files:File[])=>void):FileDropTargetUI{\n        this.onDrop=onDrop;\n        return this;\n    }\n    hoverStyle(hStyle:string):FileDropTargetUI{\n        this.hoverStyle_ = hStyle;\n        return this;\n    }\n\n    renderJQ():JQuery{\n        let jq = super.renderJQ();\n        jq.attr(\"id\",this.id);\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass IconButtonUI extends ZUI{\n    private url:string;\n    private onclick:(event:Event)=>void;\n    private iconName:string;\n    private selected_:()=>boolean;\n    private jq:JQuery;\n    constructor(iconName:string,url:string,){\n        super();\n        this.iconName=iconName;\n        this.url=url;\n        this.onclick = onclick;\n    }\n    click(onclick:(event:Event)=>void):IconButtonUI{\n        this.onclick=onclick;\n        return this;\n    }\n    selected(selectedF:()=>boolean):IconButtonUI{\n        this.selected_=selectedF;\n        return this;\n    }\n    getIconName():string {\n        return this.iconName;\n    }\n    renderJQ():JQuery{\n        this.jq = $(`<button class=\"IconButtonUI ${this.classStr()}\"></button>`);\n        this.jq.html(`<img src=\"${this.url}\"/>`);\n        if (this.selected_ && this.selected_())\n            this.jq.addClass(\"IconButtonUI-selected\");\n        else\n            this.jq.removeClass(\"IconButtonUI-selected\");\n        this.jq.click((event:Event)=>{ this.onclick(event)})\n        this.applyCSS(this.jq);\n        return this.jq; \n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass ColorPickerUI extends ZUI {\n    getF_:Fstring;\n    setF_:StringSetF;\n    constructor(){\n        super();\n        this.getF_=null;\n        this.setF_=null;\n    }\n    getF(getFF:Fstring):ColorPickerUI{ \n        this.getF_=getFF;\n        return this;\n    }\n    setF(setFF:StringSetF):ColorPickerUI{\n        this.setF_=setFF;\n        return this;\n    }\n    renderJQ():JQuery {\n        let val = ZUI.stringVal(this.getF_);\n        if (val==\"none\")\n            val=\"#FFFFFF\";\n        let jq = $(`<input type='color' class='ColorPickerUI ${this.classStr()}' value='${val}'/>`);\n\n        jq.on(\"change\",(event)=>{\n            let newVal = jq.val();\n            if (this.setF_){\n                this.setF_(newVal);\n            }\n        })\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass SliderUI extends ZUI {\n    getF_:Fnumber;\n    setF_:NumberSetF;\n    minF_:NumberF;\n    maxF_:NumberF;\n    constructor(min:NumberF,max:NumberF){\n        super();\n        this.getF_=null;\n        this.setF_=null;\n        this.minF_=min;\n        this.maxF_=max;\n    }\n    getF(getFF:Fnumber):SliderUI{ \n        this.getF_=getFF;\n        return this;\n    }\n    setF(setFF:NumberSetF):SliderUI{\n        this.setF_=setFF;\n        return this;\n    }\n    renderJQ():JQuery {\n        let val = ZUI.numberVal(this.getF_);\n        let jq = $(`<input type='range' class='SliderUI ${this.classStr()}' value='${val}'`+\n            ` min='${ZUI.numberVal(this.minF_)}' max='${ZUI.numberVal(this.maxF_)}'/>`);\n\n        jq.on(\"change\",(event)=>{\n            let newVal = Number.parseFloat(<string>jq.val());\n            if (this.setF_){\n                this.setF_(newVal);\n            }\n        })\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass StyleCheckUI extends ZUI{\n    checkVal: ()=>boolean;\n    checkedStyle_:string;\n    clickF:()=>void;\n    constructor(checkVal:()=>boolean){\n        super();\n        this.checkVal=checkVal;\n        this.checkedStyle_=\"StyleCheckUI-checked\";\n        this.clickF=null;\n    }\n    click(clickF:()=>void):StyleCheckUI{\n        this.clickF=clickF;\n        return this;\n    }\n    checkedStyle(checkedStyle:string):StyleCheckUI{\n        this.checkedStyle_=checkedStyle;\n        return this;\n    }\n    renderJQ():JQuery{\n        let checked = this.checkVal();\n        let cStyle=\"StyleCheckUI-checked \"+this.checkedStyle_;\n        if (!checked)\n            if (this.classStr())\n                cStyle=\"StyleCheckUI \"+this.classStr();\n            else\n                cStyle=\"StyleCheckUI\"\n\n        let jq=$(`<div class='${cStyle}'></div>`);\n        jq.click(()=>{\n            if (this.clickF){\n                this.clickF();\n                ZUI.notify();\n            }\n        })\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass DoneIndicatorUI extends ZUI{\n    getF_:Fnumber;\n    barStyle_:string;\n    clickF:()=>void;\n    constructor(getF:Fnumber){\n        super();\n        this.getF_=getF;\n        this.barStyle_=\"\";\n        this.clickF=null;\n    }\n    barStyle(barStyle_:string):DoneIndicatorUI{\n        this.barStyle_=barStyle_;\n        return this;\n    }\n    click(clickF:()=>void):DoneIndicatorUI{\n        this.clickF=clickF;\n        return this;\n    }\n    renderJQ():JQuery{\n        let fraction = this.getF_();\n        if (fraction<0)\n            fraction=0;\n        if (fraction>1)\n            fraction=1;\n        if (fraction>0 && fraction < 0.05)\n            fraction=0.05;\n        if (fraction <1 && fraction > 0.95)\n            fraction = 0.95;\n        let style=\"DoneIndicatorUI\";\n        if (this.clickF)\n            style=\"DoneIndicatorUI-clickable\"\n        let jq=$(`<div class='${style} ${this.classStr()}'></div>`)\n        let slider=$(`<div class='DoneIndicatorUI-slider ${this.barStyle_}'></div>`);\n        slider.css(\"width\",`${fraction*100}%`);\n        jq.append(slider);\n        jq.click(()=>{\n            if (this.clickF){\n                this.clickF();\n                ZUI.notify();\n            }\n        })\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\n\nclass DropDownChoiceUI extends ZUI {\n    getF_:()=>string;\n    setF_:(val:string)=>void;\n    choices: {selectCode:string, label:string}[];\n    constructor(){\n        super();\n        this.choices = [];\n    }\n    getF( f:()=>string):DropDownChoiceUI{\n        this.getF_=f;\n        return this;\n    }\n    setF( f:(val:string)=>void):DropDownChoiceUI{\n        this.setF_=f;\n        return this;\n    }\n    choice(selectCode:string,label:string):DropDownChoiceUI{\n        this.choices.push({selectCode:selectCode,label:label});\n        return this;\n    }\n    renderJQ():JQuery{\n        let select = null;\n        if (this.getF_){\n            select = this.getF_();\n        }\n        let base = $(`<select class=\"DropDownChoiceUI ${this.classStr()}\"></select>`);\n        for (let i in this.choices){\n            let choice = this.choices[i];\n            let cJQ:JQuery = null;\n            if (choice.selectCode==select){\n                cJQ=$(`<option value=\"${choice.selectCode}\" selected>${choice.label}</option>`)\n            } else {\n                cJQ=$(`<option value=\"${choice.selectCode}\">${choice.label}</option>`)\n            }\n            base.append(cJQ);\n        }\n        base.change(()=>{\n            if (this.setF_){\n                this.setF_(base.val());\n            }\n        })\n        this.applyCSS(base);\n        return base;\n    }\n}","/// <reference path=\"InputUI.ts\"/>\n\nclass DateTimeUI extends InputUI {\n    constructor(fieldType: \"date\" | \"datetime-local\" | \"month\" | \"time\" | \"week\"){\n        super(fieldType);\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"PageManager.ts\"/>\n\nclass DragDropWrapperUI extends ZUI {\n    id:string;\n    hoverStyle:string;\n    hoverHighStyle:string;\n    hoverLowStyle:string;\n    payload:any; // drag payload or function to return drag payload\n    doDrop:(payload:any,where: null | \"high\" | \"low\")=>void;\n    constructor(content:ZUI){\n        super();\n        this.content=content;\n        this.id=this.uniqueId();\n        this.hoverStyle=\"DragDropWrapperUI-hover\";\n        this.hoverHighStyle=\"\";\n        this.hoverLowStyle=\"\";\n        PageManager.addAfterDOMNotice(()=>{\n            let cnt = $(\"#\"+this.id);\n            cnt.on(\"dragenter\",(e:JQueryEventObject)=>{\n                this.dragEnter(e);\n            })\n            cnt.on(\"dragover\",(e:JQueryEventObject)=>{\n                this.dragOver(e);\n            })\n            cnt.on(\"dragleave\",(e:JQueryEventObject)=>{\n                this.dragLeave(e);\n            })\n            cnt.on(\"drop\",(e:JQueryEventObject)=>{\n                this.dropEvent(e);\n            })\n            cnt.on(\"dragstart\",(e:JQueryEventObject)=>{\n                this.dragStart(e);\n            })\n        })\n    }\n    protected dragEnter(e:JQueryEventObject){\n        //DB.msg(\"dragEnter\",e);\n    }\n    protected dragOver(e){\n        //DB.msg(\"dragOver\",e);\n        if (this.id == $(e.currentTarget).attr(\"id\")){\n            e.preventDefault();\n            let jq=$(e.currentTarget);\n            let height = jq[0].offsetHeight;\n            jq.removeClass(this.hoverHighStyle);\n            jq.removeClass(this.hoverLowStyle);\n            jq.removeClass(this.hoverStyle);\n            if (this.doDrop){\n                jq.addClass(this.hoverStyle);\n                let y = e.offsetY;\n                if (this.hoverLowStyle && y>height*0.5){\n                    jq.addClass(this.hoverLowStyle);\n                }\n                if (this.hoverHighStyle && y<=height*0.5){\n                    jq.addClass(this.hoverHighStyle);\n                }\n            }\n        }\n        \n    }\n    private eventPayload(event):any{\n        let payloadST=event.originalEvent.dataTransfer.getData(\"zingpayload\");\n        if (payloadST){\n            let payload = JSON.parse(payloadST);\n            return payload;\n        } else {\n            return null;\n        }\n    }\n    protected dragLeave(e:JQueryEventObject){\n        //DB.msg(\"dragLeave\",e);\n        let jq=$(e.currentTarget);\n        jq.removeClass(this.hoverHighStyle);\n        jq.removeClass(this.hoverLowStyle);\n        jq.removeClass(this.hoverStyle);\n    }\n    protected dropEvent(e){\n        //DB.msg(\"dropEvent\",e);\n        let jq=$(e.currentTarget);\n        jq.removeClass(this.hoverHighStyle);\n        jq.removeClass(this.hoverLowStyle);\n        jq.removeClass(this.hoverStyle);\n        if (this.doDrop){\n            let payload = this.eventPayload(e);\n            if (payload){\n                let height = jq[0].offsetHeight;\n                let y=e.offsetY;\n                let where = null;\n                if (y<=height*0.5){\n                    where = \"high\"\n                }\n                if (y>height*0.5){\n                    where = \"low\"\n                }\n                //DB.msg(`y ${y} height ${height} where ${where}`)\n                this.doDrop(payload,where);\n            }\n        }\n    }\n    protected dragStart(e){\n        //DB.msg(\"dragStart\",e);\n        if (this.id == $(e.currentTarget).attr(\"id\")){\n            let payload = this.getPayload();\n            e.originalEvent.dataTransfer.setData(\"zingpayload\",payload)\n        }\n        \n    }\n\n    hover(hvStyle:string):DragDropWrapperUI{\n        this.hoverStyle=hvStyle;\n        return this;\n    }\n    high(hStyle:string):DragDropWrapperUI{\n        this.hoverHighStyle=hStyle;\n        return this;\n    }\n    low(hStyle:string):DragDropWrapperUI{\n        this.hoverLowStyle=hStyle;\n        return this;\n    }\n    private getPayload():string{\n        let rslt=null;\n        if (this.payload && typeof this.payload ===\"function\"){\n            rslt = this.payload();\n        } else {\n            rslt = this.payload;\n        }\n        return JSON.stringify(rslt);\n    }\n    dragPayload(payload:any ):DragDropWrapperUI {  // the data to be transfered in the drag\n                                    // or function to return that data\n        this.payload=payload;\n        return this;\n    }\n\n    drop(doDrop:(payload:any,where?: null | \"high\" | \"low\")=>void):DragDropWrapperUI {\n        this.doDrop=doDrop;\n        return this;\n    }\n\n    renderJQ():JQuery{\n        let jq = super.renderJQ();\n        jq.attr(\"id\",this.id);\n        this.applyCSS(jq);\n        if (this.payload){\n            jq.attr(\"draggable\",\"true\");\n        }\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"ZUITypes.ts\"/>\n\ntype StringSource = string | StringF | string[] ;\nclass ImageUI extends ZUI{\n    private urlSource: StringSource;\n    constructor(urlSource:StringSource){\n        super();\n        this.urlSource=urlSource;\n    } \n    private url():string{\n        let sc = this.urlSource;\n        if (typeof sc == \"function\"){\n            sc = sc();\n        }\n        if (sc instanceof Array){\n            let r = Math.random();\n            let l=sc.length;\n            r = Math.floor(r*l)\n            if (r>=l) r = l-1;\n            sc = sc[r];\n        }\n        return sc;\n    }\n    renderJQ():JQuery {\n        let url = this.url();\n        let jq = $(`<img src=\"${url}\" class=\"ImageUI ${this.classStr()}\"/>`)\n        this.applyCSS(jq);\n        return jq;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n\nclass ProcessLogUI extends ZUI{\n    title:string;\n    private log:string;\n    private indent:number;\n    private n:number;\n    private outOf:number;\n    private timingOn:boolean;\n    private startTimeStack:number[];\n    private lastOverWrite:boolean;\n    constructor(){\n        super();\n        this.clear();\n    }\n    timing(timeOn=true):ProcessLogUI{\n        this.timingOn=timeOn\n        return this;\n    }\n    clear(){\n        this.log=\"\";\n        this.indent=0;\n        this.startTimeStack=[];\n        this.lastOverWrite=false;\n    }\n    msg(msg:string){\n        this.lastOverWrite=false;\n        let theOut = \"\";\n        for (let i=0;i<this.indent;i++){\n            theOut+=\"  \";\n        }\n        theOut+=msg;\n        if (this.timingOn){\n            let date = new Date();\n            let secs = date.getSeconds();\n            let secStr = secs.toFixed(0);\n            if (secStr.length<2)\n                secStr=\"0\"+secStr;\n            theOut=`[${date.getMinutes()}:${secStr}] `+theOut;\n        }\n        this.log=theOut+\"\\n\"+this.log;\n        ZUI.notify();\n    }\n    overWrite(msg:string){\n        if (this.lastOverWrite){\n            let idx = this.log.indexOf(\"\\n\")\n            this.log = this.log.substring(idx+1);\n            this.msg(msg);\n        } else {\n            this.lastOverWrite=true;\n            this.msg(msg);\n        }\n        this.lastOverWrite=true;\n    }\n    start(msg:string){\n        this.msg(\"&gt;\"+msg);\n        this.indent++;\n        let now =Date.now();\n        this.startTimeStack.push(now);\n    }\n    end(msg:string){\n        if (this.timingOn){\n            let now = Date.now();\n            let start = this.startTimeStack.pop();\n            let sec = (now-start)/1000;\n            msg+=` [${sec.toFixed(2)}sec]`\n        }\n        \n        this.indent--;\n        this.msg(\"&lt;\"+msg);\n    }\n    renderJQ():JQuery{\n        let jq= $(`<div class=\"ProcessLogUI ${this.classStr()}\"></div>`)\n        if (this.log && this.log.length>0){\n            let btns=$(`<div style=\"float:right\"></div>`)\n            let clearBtn=$(`<button>clear</button>`)\n            clearBtn.click(()=>{ \n                this.clear()\n                ZUI.notify()\n            })\n            btns.append(clearBtn);\n            jq.append(btns);\n        }\n        let log = $(`<pre class=\"ProcessLogUI-log\"></pre>`);\n        jq.append(log);\n        log.html(this.log);\n        this.applyCSS(jq);\n        log.scrollTop(50);\n        return jq\n    }\n}","\n\nabstract class DataTableUIAbs extends ZUI{\n    protected maxColumns:number;\n    protected maxRows:number;\n    protected firstRow:number;\n    protected lastRow:number;\n    protected firstCol:number;\n    protected lastCol:number;\n    protected nCols:number;\n    protected nRows:number;\n    protected cellEnter:(row:number,col:number)=>void;\n    protected rowInc:number;\n    protected colInc:number;\n    constructor(maxRows=20,maxColumns=10,cellEnter?:(row:number,col:number)=>void){\n        super();\n        this.maxRows=maxRows;\n        this.maxColumns=maxColumns;\n        this.cellEnter=cellEnter;\n    }\n    setMaxes(maxRows:number,maxColumns:number){\n        this.maxRows=maxRows;\n        this.maxColumns=maxColumns;\n        ZUI.notify();\n    }\n    setFirstCol(firstCol:number){\n        this.firstCol=firstCol;\n        ZUI.notify();\n    }\n    setFirstRow(firstRow:number){\n        this.firstRow=firstRow;\n        ZUI.notify();\n    }\n    protected tableStyle():string{ return \"DataTableUI-table \"+this.classStr()};\n    abstract hasData():boolean;\n    protected abstract colHeaderList():string[];\n    protected abstract rowLabelList():string[];\n    protected abstract rowData(row:number,firstCol:number,lastCol:number):any[];\n    renderJQ():JQuery{\n        let table = $(`<table class=\"${this.tableStyle()}\"></table>`)\n        let colHeaderList = this.colHeaderList();\n        let rowLabelList = this.rowLabelList();\n        if (this.hasData()){\n            this.resolveRowsCols(rowLabelList.length,colHeaderList.length);\n            let colHeaders = this.columnHeaderRow(colHeaderList);\n            table.append(colHeaders);\n            if (this.firstRow>0)\n                table.append(this.upRow())\n            for (let row=this.firstRow;row<=this.lastRow;row++){\n                let rowData = this.rowData(row,this.firstCol,this.lastCol);\n                let tableRow = this.tableRow(row,rowLabelList[row],rowData);\n                table.append(tableRow);\n            }\n            if (this.lastRow<this.nRows-1)\n                table.append(this.downRow())\n        }\n        this.applyCSS(table);\n        return table;\n    }\n    protected columnHeaderRow(colHeaderList:string[]):JQuery{\n        let rowJQ = $(`<tr><th></th></tr>`)\n        if (this.firstCol>0)\n            rowJQ.append(this.leftBtn());\n        for (let col=this.firstCol;col<=this.lastCol;col++){\n            let header = colHeaderList[col];\n            let colJQ = $(`<th>${header}</th>`);\n            rowJQ.append(colJQ);\n        }\n        if (this.lastCol<this.nCols-1)\n            rowJQ.append(this.rightBtn());\n        return rowJQ;\n    }\n    protected tableRow(rowIdx:number,rowLabel:string,rowData:any[]):JQuery{\n        let row = $(`<tr><th>${rowLabel}</th></tr>`)\n        if (this.firstCol>0)\n            row.append(this.ellipsis());\n        for (let colIdx=0;colIdx<rowData.length;colIdx++){\n            let d = rowData[colIdx];\n            let ds = \"\";\n            if (d)\n                ds=d.toString();\n            else if (d==0)\n                ds=\"0\";\n            let td=$(`<td>${ds}</td>`)\n            td.mouseenter(()=>{\n                if (this.cellEnter)\n                    this.cellEnter(rowIdx,colIdx)\n            })\n            td.append(td);\n            row.append(td);\n        }\n        if (this.lastCol<this.nCols-1)\n            row.append(this.ellipsis())\n        return row;\n    }\n    protected leftBtn():JQuery{\n        let jq = $(`<th class=\"leftArrowBtn\"></th>`)\n        jq.click(()=>{\n            this.firstCol-=this.colInc\n            ZUI.notify();\n        })\n        return jq;\n    }\n    protected rightBtn():JQuery{\n        let jq = $(`<th class=\"rightArrowBtn\"></th>`)\n        jq.click(()=>{\n            this.firstCol+=this.colInc;\n            ZUI.notify();\n        })\n        return jq;\n    }\n    protected upRow():JQuery{\n        let row = $(`<tr></tr>`)\n        row.append(this.upBtn())\n        if (this.firstCol>0)\n            row.append($(`<td></td>`))\n        for (let col=this.firstCol;col<=this.lastCol;col++){\n            row.append(this.ellipsis())\n        }\n        return row;\n    }\n    protected upBtn():JQuery{\n        let jq = $(`<th class=\"upArrowBtn\"></th>`)\n        jq.click(()=>{\n            this.firstRow-=this.rowInc;\n            ZUI.notify();\n        })\n        return jq;\n    }\n    protected downRow():JQuery{\n        let row = $(`<tr></tr>`)\n        row.append(this.downBtn())\n        if (this.firstCol>0)\n            row.append($(`<td></td>`))\n        for (let col=this.firstCol;col<=this.lastCol;col++){\n            row.append(this.ellipsis())\n        }\n        return row;\n    }\n    protected downBtn():JQuery{\n        let jq = $(`<th class=\"downArrowBtn\"></th>`)\n        jq.click(()=>{\n            this.firstRow+=this.rowInc;\n            ZUI.notify();\n        })\n        return jq;\n    }\n    protected ellipsis():JQuery{\n        let jq = $(`<td class=\"DataTableUI-ell\">...</td>`)\n        return jq;\n    }\n    private resolveRowsCols(nRows:number, nCols:number){\n        this.nRows=nRows;\n        this.nCols=nCols;\n        this.rowInc = Math.floor(this.maxRows*0.8);\n        this.colInc = Math.floor(this.maxColumns*0.8);\n        if (this.firstRow<0) this.firstRow=0;\n        this.lastRow = this.firstRow+this.maxRows-1;\n        if (this.lastRow>=nRows){\n            this.lastRow=nRows-1;\n            this.firstRow=this.lastRow-this.maxRows+1;\n            if (this.firstRow<0) this.firstRow=0;\n        }\n\n        if (this.firstCol<0) this.firstCol=0;\n        this.lastCol = this.firstCol+this.maxColumns-1;\n        if (this.lastCol>=nCols){\n            this.lastCol=nCols-1;\n            this.firstCol = this.lastCol-this.maxColumns+1;\n            if (this.firstCol<0) this.firstCol=0;\n        }\n    }\n}","/// <reference path=\"../share/DB.ts\"/>\n\n\nabstract class DataTableAbs {\n    abstract hasCol(ColName:string):boolean;\n    abstract colName(colIdx:number):string;\n    abstract colIdx(colName:string):number;\n    abstract nRows():number;\n    abstract columnHeaders():string[];\n    abstract nCols():number;\n    abstract get(row:number,col:string):string | number;\n    abstract sortRows(colName:string,descending:boolean);\n    toJSON():DataTableJSON{\n        let rslt:DataTableJSON=[];\n        let nr=this.nRows()\n        let ch = this.columnHeaders();\n        for (let r=0;r<nr;r++){\n            let obj:{[colName:string]:number | string}={};\n            for (let c in ch){\n                let v = this.get(r,c);\n                if (v || (<number>v)==0){\n                    obj[c]=v;\n                } \n            }\n            rslt.push(obj);\n        }\n        return rslt;\n    }\n    \n    getRow(row:number):DataRow{\n        if (row<0 || row>=this.nRows())\n            return null;\n        let dr = new DataRow()\n        for (let c of this.columnHeaders())\n            dr.set(c,this.get(row,c))\n        return dr;\n    }\n    getColumn(col:string):DataColumn{\n        let rslt=new DataColumn(col);\n        let nRows=this.nRows();\n        for (let row=0;row<nRows;row++){\n            rslt.set(row,this.get(row,col))\n        }\n        return rslt;\n    }\n    copy():DataTable{\n        let rslt=new DataTable();\n        let nRows=this.nRows();\n        let ch = this.columnHeaders();\n        for (let row=0;row<nRows;row++){\n            for (let col of ch){\n                let v = this.get(row,col);\n                rslt.set(row,col,v);\n            }\n        }\n        return rslt;\n    }\n    toCSVStr():string{\n        let headStr = this.toCSVHead();\n        let rslt = headStr;\n        for (let r =0;r<this.nRows();r++){\n            let rowStr = this.toCSVRow(r);\n            rslt+=\"\\n\"+rowStr;\n        }\n        return rslt;\n    }\n    private toCSVHead():string{\n        let ch = this.columnHeaders();\n        let rslt = ch[0];\n        for (let c=1;c<ch.length;c++){\n            rslt+=\",\"+ch[c]\n        }\n        return rslt;\n    }\n    private toCSVRow(r):string{\n        let ch = this.columnHeaders();\n        let rslt=\"\";\n        for (let col of ch){\n            let val = this.get(r,col);\n            if (rslt.length==0){\n                rslt+=val;\n            } else {\n                rslt+=\",\"+val;\n            }\n        }\n        return rslt;\n    }\n    valueDensity():number {\n        DB.start(\"valueDensity\");\n        let nFeatures = this.nCols() * this.nRows();\n        let nFound=0;\n        let ch = this.columnHeaders();\n        for (let r=0;r<this.nRows();r++){\n            for (let c in ch){\n                let val = this.get(r,c);\n                if (val!== undefined){\n                    nFound++;\n                }\n            }\n        }\n        DB.end(`valueDensity ${nFound}/${nFeatures} ${nFound/nFeatures*100}%`)\n        return nFound/nFeatures;\n    }\n    \n    columnDensityCount(density:number){\n        let ch = this.columnHeaders();\n        let denseColCount=0;\n        for (let col of ch){\n            let cnt=0;\n            for (let r=0;r<this.nRows();r++){\n                let v = this.get(r,col)\n                if (v)\n                    cnt++\n            }\n            let colDense=cnt/this.nRows();\n            if (colDense>density){\n                denseColCount++\n            }\n        }\n        DB.msg(`has ${denseColCount}/${this.nCols()} with feature density>${density}`)\n    }\n    \n    sum():number{\n        let total=0;\n        let nRows=this.nRows();\n        let ch = this.columnHeaders();\n        for (let r =0;r<nRows;r++){\n            for (let c of ch){\n                let v= <number>this.get(r,c);\n                if (!isNaN(v))\n                    total+=v;\n            }\n        }\n        return total;\n    }\n    count():number{\n        let total=0;\n        let nRows=this.nRows();\n        let ch = this.columnHeaders();\n        for (let r =0;r<nRows;r++){\n            for (let c of ch){\n                let v= this.get(r,c);\n                if (v || v==0)\n                    total++;\n            }\n        }\n        return total;\n    }\n    countNumbers():number{\n        let total=0;\n        let nRows=this.nRows();\n        let ch = this.columnHeaders();\n        for (let r =0;r<nRows;r++){\n            for (let c of ch){\n                let v= this.get(r,c);\n                if (!isNaN(<number>v))\n                    total++;\n            }\n        }\n        return total;\n    }\n    max():number{\n        let foundNum=false;\n        let max:number=0;;\n        let nRows=this.nRows();\n        let ch = this.columnHeaders();\n        for (let r =0;r<nRows;r++){\n            for (let c of ch){\n                let v= <number>this.get(r,c);\n                if (!isNaN(v)){\n                    if (!foundNum){\n                        max=v;\n                        foundNum=true;\n                    }\n                    if (v>max){\n                        max=v;\n                    } \n                }   \n            }\n        }\n        return max;\n    }\n    min():number{\n        let foundNum=false;\n        let min:number=0;\n        let nRows=this.nRows();\n        let ch = this.columnHeaders();\n        for (let r =0;r<nRows;r++){\n            for (let c of ch){\n                let v= <number>this.get(r,c);\n                if (!isNaN(v)){\n                    if (!foundNum){\n                        min=v;\n                        foundNum=true;\n                    }\n                    if (v<min){\n                        min=v;\n                    } \n                }   \n            }\n        }\n        return min;\n    }\n    \n    db(msg?:string,maxColumns=5,maxRows=20){\n        if (msg) DB.start(msg);\n        DB.msg(`(${this.nRows()}x${this.nCols()})`)\n        let rowEll=false;\n        let colEll=false;\n        let cols=this.nCols();\n        if (cols>maxColumns){\n            colEll=true;\n            cols=maxColumns;\n        }\n        let rows=this.nRows();\n        if (rows>maxRows){\n            rowEll=true;\n            rows=maxRows;\n        }\n        let headerStr = \"\\t\";\n        let ch = this.columnHeaders();\n        for (let c=0;c<cols;c++){\n            let col=ch[c];\n            headerStr+=col+\"\\t\";\n        }\n        if(colEll) headerStr+=\"...\"\n        DB.msg(headerStr);\n        for (let r=0;r<rows;r++){\n            let rowStr=`[${r}]:\\t`;\n            for (let c of ch){\n                let val = this.get(r,c);\n                if (typeof val == \"string\"){\n                    rowStr+='\"'+val+'\"\\t';\n                } else {\n                    rowStr+=val+\"\\t\"\n                }\n            }\n            if (colEll) rowStr+=\"...\";\n            DB.msg(rowStr);\n        }\n        if (rowEll) DB.msg(\"...\")\n        if (msg) DB.end(msg);\n    }\n}","\ntype RowTableJSON = {[colName:string]:number | string}\nabstract class DataRowAbs {\n    \n    abstract hasCol(colName:string):boolean;\n    abstract colIdx(colName:string):number;\n    abstract colName(colIndex:number):string;\n    abstract columnHeaders():string[];\n    abstract nCols():number;\n    abstract get(col:string):string | number;\n    abstract sort(descending?:boolean);\n    abstract renameColumns(newNames:{[oldName:string]:string})\n    toJSON():RowTableJSON{\n        let rslt:RowTableJSON={};\n        for (let c in this.columnHeaders()){\n            let val = this.get(c);\n            if (val || (<number>val)==0){\n                rslt[c]=val;\n            }\n        }\n        return rslt;\n    }\n    copy():DataRow{\n        let newDR = new DataRow();\n        for (let colName of this.columnHeaders()){\n            newDR.set(colName,this.get(colName))\n        }\n        return newDR;\n    }\n    \n    sum():number{\n        let total=0;\n        for (let col of this.columnHeaders()){\n            let v = <number>this.get(col);\n            if (!isNaN(v))\n                total+=v;\n        }\n        return total;\n    }\n    sumSquares():number{\n        let total=0;\n        for (let col of this.columnHeaders()){\n            let v = <number>this.get(col);\n            if (!isNaN(v))\n                total+=v*v;\n        }\n        return total;\n    }\n\n    pairProduct(row2:DataRowAbs):DataRow{\n        let rslt=new DataRow();\n        let nc = this.nCols();\n        for (let col of this.columnHeaders()){\n            let v1=<number>this.get(col);\n            let v2=<number>row2.get(col);\n            if (isNaN(v1) || isNaN(v2)){\n                rslt.set(col,0);\n            } else {\n                rslt.set(col,v1*v2)\n            }\n        }\n        return rslt;\n    }\n    dotProduct(row2:DataRowAbs):number {\n        let rslt=0;\n        let nc=this.nCols();\n        for (let col of this.columnHeaders()){\n            let v1=<number>this.get(col);\n            let v2=<number>row2.get(col);\n            if (!isNaN(v1) && !isNaN(v2)){\n                rslt+=v1*v2\n            }\n        }\n        return rslt;\n    }\n    count():number{\n        let total=0;\n        for (let c of this.columnHeaders()){\n            let v=this.get(c);\n            if (v || v==0)\n                total++;\n        }\n        return total;\n    }\n    countNumbers():number{\n        let total=0;\n        for (let c of this.columnHeaders()){\n            let v=this.get(c);\n            if (!isNaN(<number>v))\n                total++;\n        }\n        return total;\n    }\n    max():number{\n        let ch=this.columnHeaders();\n        let max=<number>this.get(ch[0]);\n        for (let c of ch){\n            let v = <number>this.get(c);\n            if (!isNaN(v)){\n                if (v>max){\n                    max=v;\n                } \n            }   \n        }\n        return max;\n    }\n    min():number{\n        let ch=this.columnHeaders();\n        let min=<number>this.get(ch[0]);\n        for (let c of ch){\n            let v = <number>this.get(c);\n            if (!isNaN(v)){\n                if (v<min){\n                    min=v\n                } \n            }   \n        }\n        return min;\n    }\n    \n    subSet(startIdx:number,endIdx:number):DataRow{\n        let rslt = new DataRow();\n        if (startIdx>endIdx){\n            let tmp=startIdx;\n            startIdx=endIdx;\n            endIdx=tmp;\n        }\n        let ch=this.columnHeaders();\n        for (let i=startIdx;i<=endIdx;i++){\n            let colName = ch[i];\n            let v = this.get(colName);\n            rslt.set(colName,v);\n        }\n        return rslt;\n    }\n    \n    db(msg?:string,maxColumns=20){\n        if (msg)\n            DB.start(msg);\n        let cols = this.nCols();\n        let ellipses=false;\n        if (cols>maxColumns){\n            cols=maxColumns;\n            ellipses=true;\n        }\n        let ch=this.columnHeaders();\n        for (let c=0;c<cols;c++){\n            let col = ch[c];\n            let val = this.get(col);\n            if (isNaN(<number>val))\n                DB.msg(`[${col}]:\"${val}\"`)\n            else\n                DB.msg(`[${col}]:${val}`)\n        }\n        if (ellipses) DB.msg(\"...\")\n        if (msg)\n            DB.end(msg)\n    }\n}","/// <reference path=\"DataRowAbs.ts\"/>\n\n\nclass DataRow extends DataRowAbs {\n    protected contents:any[] \n    protected columnHeaderIdxs:{[columnHeader:string]:number}\n    protected orderedColumnHeaders:string[];\n    constructor(headerIdxs?:{[columnHeader:string]:number},contents?:any[]){\n        super();\n        this.columnHeaderIdxs={}\n        if (headerIdxs)\n            for (let col in headerIdxs){\n                this.columnHeaderIdxs[col]=headerIdxs[col]\n            }\n        this.contents=[];\n        if (contents){\n            for (let i in contents){\n                this.contents.push(contents[i])\n            }\n        }    \n    }\n    hasCol(colName:string):boolean{\n        return colName in this.columnHeaderIdxs;\n    }\n    colIdx(colName:string):number{\n        if (this.hasCol(colName))\n            return this.columnHeaderIdxs[colName]\n        else\n            return undefined;\n    }\n    colName(colIndex:number):string{\n        if (colIndex<0 || colIndex>=this.nCols()) return null;\n        return this.orderedColumnHeaders[colIndex]\n    }\n    columnHeaders():string[]{\n        if (!this.orderedColumnHeaders){\n            this.rebuildOrderedColumnHeaders();\n        }\n        return this.orderedColumnHeaders;\n    }\n    protected rebuildOrderedColumnHeaders(){\n        this.orderedColumnHeaders=new Array(this.nCols())\n        for (let col in this.columnHeaderIdxs){\n            let idx=this.columnHeaderIdxs[col];\n            this.orderedColumnHeaders[idx]=col;\n        }\n    }\n    nCols():number{\n        return this.contents.length;\n    }\n    \n    getI(col:number):any{\n        if (col<0 || col>=this.contents.length)\n            return 0;\n        return this.contents[col]\n    }\n    protected setI(col:number,newVal:any){\n        while (col>this.contents.length-1){\n            this.contents.push(0)\n        }\n        this.contents[col]=newVal;\n    }\n    get(col:string):string | number{\n        let colIdx = this.columnHeaderIdxs[col];\n        if (!colIdx && colIdx!=0){\n            return 0;\n        }\n        return this.getI(colIdx)\n    }\n    set(col:string,newVal:any){\n        let colIdx = this.columnHeaderIdxs[col];\n        if (isNaN(colIdx)){\n            colIdx = this.nCols();\n            this.columnHeaderIdxs[col]=colIdx;\n            if (this.orderedColumnHeaders)\n                this.orderedColumnHeaders.push(col);\n            else\n                this.rebuildOrderedColumnHeaders();\n        }\n        this.setI(colIdx,newVal);\n    }\n    addTo(col:string,newVal:number){\n        let oldVal=this.get(col);\n        if (isNaN(<number>oldVal)){\n            this.set(col,newVal)\n        } else {\n            this.set(col,<number>oldVal+newVal)\n        }\n    }\n    static fromJSON(json:RowTableJSON):DataRow{\n        let rslt=new DataRow();\n        for (let c in json){\n            rslt.set(c,json[c])\n        }\n        return rslt;\n    }\n    \n    scalerMult(scaler:number){\n        for (let c in this.contents){\n            if (!isNaN(this.contents[c])){\n                this.contents[c]*=scaler;\n            }   \n        }\n    }\n    \n    renameColumns(newNames:{[oldName:string]:string}){\n        for (let oldName in newNames){\n            let newName = newNames[oldName];\n            if (oldName in this.columnHeaderIdxs){\n                let idx = this.columnHeaderIdxs[oldName]\n                delete this.columnHeaderIdxs[oldName]\n                this.columnHeaderIdxs[newName]=idx;\n            } else {\n                DB.msg(\"DataRow.renameColumns no such column named \"+oldName)\n            }\n        }\n        this.rebuildOrderedColumnHeaders();\n    }\n    sort(descending=false){\n        let sortList:{ val:any, col:string}[]=[];\n        for (let col in this.columnHeaderIdxs){\n            sortList.push({ val:this.get(col),col:col})\n        }\n        \n        sortList.sort((a,b)=>{\n            let r=0;\n            if (typeof a.val===\"string\"){\n                r=a.val.localeCompare(b.val);\n            } else {\n                r=a.val-b.val;\n            }\n            if (descending)\n                r=-r;\n            return r;\n        })\n        this.contents=[];\n        this.columnHeaderIdxs={}\n        for (let i=0;i<sortList.length;i++){\n            let sl=sortList[i];\n            this.set(sl.col,sl.val);\n        }\n        \n        this.rebuildOrderedColumnHeaders();\n    }\n}","\n\nabstract class DataColumnAbs {\n    \n    protected columnName:string;\n    constructor(columnName:string){\n        this.columnName=columnName;\n    }\n    abstract nValues():number;\n    abstract get(row:number):string | number;\n\n    name():string { return this.columnName}\n    toJSON():(string|number)[]{\n        let rslt:(string|number)[] = [];\n        let nRows=this.nValues();\n        for (let r=0;r<nRows;r++){\n            rslt.push(this.get(r))\n        }\n        return rslt;\n    }\n    copy():DataColumn{\n        let newDC = new DataColumn(this.name());\n        let nRows = this.nValues();\n        for (let row=0;row<nRows;row++){\n            newDC.set(row,this.get(row));\n        }\n        return newDC;\n    }\n    sum():number{\n        let total = 0;\n        let nRows = this.nValues();\n        for (let r=0;r<nRows;r++){\n            let v = <number>this.get(r);\n            if (!isNaN(v))\n                total+=v;\n        }\n        return total;\n    }\n    sumSquares():number{\n        let total = 0;\n        let nRows = this.nValues();\n        for (let r=0;r<nRows;r++){\n            let v = <number>this.get(r);\n            if (!isNaN(v))\n                total+=v*v;\n        }\n        return total;\n    }\n    pairProduct(col2:DataColumn):DataColumn{\n        let rslt=new DataColumn(this.columnName+\"*\"+col2.columnName);\n        let nr = this.nValues();\n        for (let r=0;r<nr;r++){\n            let v1=<number>this.get(r);\n            let v2=<number>col2.get(r);\n            if (isNaN(v1) || isNaN(v2)){\n                rslt.set(r,0);\n            } else {\n                rslt.set(r,v1*v2)\n            }\n        }\n        return rslt;\n    }\n    dotProduct(col2:DataColumn):number {\n        let rslt=0;\n        let nr = this.nValues();\n        for (let r=0;r<nr;r++){\n            let v1=<number>this.get(r);\n            let v2=<number>col2.get(r);\n            if (!isNaN(v1) && !isNaN(v2)){\n                rslt+=v1*v2\n            }\n        }\n        return rslt;\n    }\n    count():number{\n        let total=0;\n        let nRows = this.nValues();\n        for (let r=0;r<nRows;r++){\n            let v=this.get(r);\n            if (v || v==0)\n                total++;\n        }\n        return total;\n    }\n    countNumbers():number{\n        let total=0;\n        let nRows = this.nValues();\n        for (let r=0;r<nRows;r++){\n            let v=<number>this.get(r);\n            if (!isNaN(v))\n                total++;\n        }\n        return total;\n    }\n    max():number{\n        let max=<number>this.get(0);\n        let nRows = this.nValues();\n        for (let r=0;r<nRows;r++){\n            let v=<number>this.get(r);\n            if (v>max){\n                max=v;\n            }   \n        }\n        return max;\n    }\n    min():number{\n        let min:number=<number>this.get(0)\n        let nRows = this.nValues();\n        for (let r=0;r<nRows;r++){\n            let v=<number>this.get(r);\n            if (!isNaN(v)){\n                if (v<min){\n                    min=v\n                } \n            }   \n        }\n        return min;\n    }\n    \n    db(msg?:string,maxRows=20){\n        if (msg)\n            DB.start(msg);\n        let rows = this.nValues();\n        let ellipses=false;\n        if (rows>maxRows){\n            rows=maxRows;\n            ellipses=true;\n        }\n       \n        for (let r=0;r<rows;r++){\n            DB.msg(`[${r}]:\"${this.get(r)}\"`)\n        }\n        if (ellipses) DB.msg(\"...\")\n        if (msg)\n            DB.end(msg)\n    }\n}","/// <reference path=\"DataColumnAbs.ts\"/>\n\nclass DataColumn extends DataColumnAbs{\n    protected contents:any[]\n    constructor(columnName:string,contents?:any[]){\n        super(columnName);\n        this.contents=[];\n        if (contents){\n            for (let i in contents){\n                this.contents.push(contents[i]);\n            }\n        }\n    }\n    \n    nValues():number{\n        return this.contents.length;\n    }\n    static fromJSON(colName:string,json:(string | number)[]):DataColumn{\n        let rslt = new DataColumn(colName);\n        for (let r=0;r<json.length;r++){\n            rslt.set(r,json[r]);\n        }\n        return rslt;\n    }\n    get(row:number):string | number{\n        if (row<0 || row>=this.contents.length)\n            return 0;\n        return this.contents[row]\n    }\n    set(row:number,newVal:string | number){\n        if (row<0) return;\n        while (row>this.contents.length-1)\n            this.contents.push(0);\n        this.contents[row]=newVal;\n    }\n    addTo(row:number,newVal:number){\n        let oldV = this.get(row);\n        if (isNaN(<number>oldV)){\n            this.set(row,newVal);\n        } else {\n            this.set(row,<number>oldV+newVal);\n        }\n    }\n    \n    scalerMult(scaler:number){\n        for (let c in this.contents){\n            if (!isNaN(this.contents[c])){\n                this.contents[c]*=scaler;\n            }   \n        }\n    }\n}","/// <reference path=\"DataTableAbs.ts\"/>\n/// <reference path=\"DataRow.ts\"/>\n/// <reference path=\"DataColumn.ts\"/>\n\ntype DataTableJSON = {[colName:string]:string | number }[]\nclass DataTable extends DataTableAbs {\n    protected contents:any[][] // [row,column]\n    columnHeaderIdxs:{[columnHeader:string]:number}\n    protected orderedColumnHeaders:string[]\n    constructor(contents?:any[][],headers?:string[]){\n        super();\n        if (contents && headers){\n            if (contents.length>0 && contents[0].length != headers.length){\n                DB.msg(\"DataTable const wrong number of headers for data\");\n                return;\n            }\n            this.contents=contents;\n            this.columnHeaderIdxs={};\n            for (let i=0;i<headers.length;i++){\n                this.columnHeaderIdxs[headers[i]]=i;\n            }\n        } else {\n            this.contents=[];\n            this.columnHeaderIdxs={};\n        }\n        this.rebuildOrderedColumnHeaders();\n    }\n    fromCSVStr(str:string,noHeaders?:boolean):DataTable{\n        if (noHeaders){\n            this.csvNoHeadFromStr(str);\n        } else {\n            this.csvHeadFromStr(str);\n        }\n        return this;\n    }\n    \n    hasCol(colName:string):boolean{\n        return colName in this.columnHeaderIdxs;\n    }\n    colName(colIdx:number):string{\n        if (!this.orderedColumnHeaders)\n            this.rebuildOrderedColumnHeaders()\n        return this.orderedColumnHeaders[colIdx]\n    }\n    colIdx(colName:string):number{\n        let idx =this.columnHeaderIdxs[colName]\n        if (idx || idx==0)\n            return idx;\n        else\n            return -1;\n    }\n    columnIndex():{[colname:string]:number}{\n        return this.columnHeaderIdxs;\n    }\n    nRows():number{\n        return this.contents.length;\n    }\n    columnHeaders():string[]{\n        if (!this.orderedColumnHeaders){\n            this.rebuildOrderedColumnHeaders();\n        }\n        return this.orderedColumnHeaders;\n    }\n    nCols():number{\n        return this.orderedColumnHeaders.length;\n    }\n    static fromJSON(json:DataTableJSON):DataTable{\n        let rslt = new DataTable();\n        let nr = json.length;\n        for (let r=0;r<nr;r++){\n            let obj = json[r];\n            for (let c in obj){\n                let val = obj[c];\n                rslt.set(r,c,val)\n            }\n        }\n        return rslt\n    }\n    private csvHeadFromStr(data:string){\n        this.contents=[];\n        let rows:string[] = data.split(\"\\n\");\n        let headerRow:string = this.trimReturnChars(rows[0]);\n        let columnNames:string[] = this.splitRow(headerRow);\n        this.buildColumnHeaders(columnNames);\n        for (let r=1;r<rows.length;r++){\n            let row =this.trimReturnChars(rows[r])\n            if (row.length>0){\n                let cells=this.splitRow(row);\n                this.contents.push(cells);\n            }\n        }\n        this.rebuildOrderedColumnHeaders();\n        //DB.msg(\"contents\",this.contents);\n    }\n    \n    private csvNoHeadFromStr(data:string){\n        this.contents=[];\n        let rows:string[] = data.split(\"\\n\");\n        for (let r=0;r<rows.length;r++){\n            let row =this.trimReturnChars(rows[r])\n            if (row.length>0){\n                let cells=this.splitRow(row);\n                for (let c in cells){\n                    let colName=\"H\"+c;\n                    this.set(r,colName,cells[c])\n                }\n            }\n        }\n        this.rebuildOrderedColumnHeaders();\n        //DB.msg(\"contents\",this.contents);\n    }\n    private trimReturnChars(row:string){\n        if (row.length>0 && row.charAt(row.length-1)==\"\\r\")\n            return row.substring(0,row.length-1);\n        else\n            return row;\n    }\n    private splitRow(row:string):string[]{\n        if (row.charCodeAt(0)>300){\n            row=row.slice(1);\n        }\n        let rslt:string[]=[];\n        let charIdx=0;\n        let endIdx=0;\n        let sub=\"\";\n        while (charIdx<row.length){\n            //DB.msg(row.substring(charIdx,50))\n            switch (row.charAt(charIdx)){\n                case '\"':\n                    endIdx = row.indexOf('\"',charIdx+1);\n                    if (endIdx<0){\n                        sub = row.substring(charIdx+1,row.length-1);\n                        charIdx=row.length;\n                    } else {\n                        sub = row.substring(charIdx+1,endIdx);\n                        charIdx=endIdx+2;\n                    }\n                    rslt.push(sub);\n                    break;\n                case \"'\":\n                    endIdx = row.indexOf(\"'\",charIdx+1);\n                    if (endIdx<0){\n                        sub = row.substring(charIdx+1,row.length-1);\n                        charIdx=row.length;\n                    } else {\n                        sub = row.substring(charIdx+1,endIdx);\n                        charIdx=endIdx+2;\n                    }\n                    rslt.push(sub);\n                    break;\n                default:\n                    if (row.charAt(charIdx)==\",\"){\n                        sub = undefined;\n                        charIdx++;\n                    } else {\n                        endIdx = row.indexOf(',',charIdx+1);\n                        if (endIdx<0){\n                            sub = row.substring(charIdx,row.length);\n                            charIdx=row.length;\n                        } else {\n                            sub = row.substring(charIdx,endIdx);\n                            charIdx=endIdx+1;\n                        }\n                    }\n                    rslt.push(sub);\n                    break;\n            }\n        }\n        return rslt;\n    }\n    private buildColumnHeaders(headers:string[]){\n        this.columnHeaderIdxs={};\n        for (let i=0;i<headers.length;i++){\n            this.columnHeaderIdxs[headers[i]]=i;\n        }\n    }\n    getI(row:number,col:number):any{\n        if (row<0 || row>=this.contents.length)\n            return 0;\n        let contRow = this.contents[row];\n        if (col<0 || col>=contRow.length)\n            return 0;\n        return this.contents[row][col]\n    }\n    protected setI(row:number,col:number,newVal:any){\n        if (row<0) return;\n        if (row>=this.contents.length){\n            if ((row-this.contents.length>20)){\n                let oldLength=this.contents.length;\n                this.contents.length=row+1;\n                for (let i=oldLength;i<this.contents.length;i++){\n                    this.contents[i]=[];\n                }\n            } else {\n                while (row>this.contents.length-1)\n                    this.contents.push([]);\n            }\n        }\n        \n        let contRow = this.contents[row];\n        if (col>=contRow.length){\n            if ((col-contRow.length)>20){\n                let oldLength=contRow.length;\n                contRow.length=col+1;\n                for (let i=oldLength;i<contRow.length;i++)\n                    contRow[i]=0;\n            } else {\n                while (col>contRow.length-1){\n                    contRow.push(0)\n                }\n            }\n        }\n        this.contents[row][col]=newVal;\n    }\n    get(row:number,col:string):string | number{\n        let colIdx = this.columnHeaderIdxs[col];\n        if (!colIdx && colIdx!=0){\n            return 0;\n        }\n        return this.getI(row,colIdx)\n    }\n    set(row:number,col:string,newVal:string | number){\n        let colIdx = this.columnHeaderIdxs[col];\n        if (isNaN(colIdx)){\n            colIdx = this.nCols();\n            this.columnHeaderIdxs[col]=colIdx;\n            if (!this.orderedColumnHeaders)\n                this.rebuildOrderedColumnHeaders()\n            else\n                this.orderedColumnHeaders.push(col);\n        }\n        this.setI(row,colIdx,newVal);\n    }\n    addTo(row:number,col:string,newVal:number){\n        let oldVal = this.get(row,col);\n        if (isNaN(<number>oldVal)){\n            this.set(row,col,newVal);\n        } else {\n            this.set(row,col,<number>oldVal+newVal);\n        }\n    }\n    \n    renameColumns(newNames:{[oldName:string]:string}){\n        for (let oldName in newNames){\n            let newName = newNames[oldName];\n            if (oldName in this.columnHeaderIdxs){\n                let idx = this.columnHeaderIdxs[oldName]\n                delete this.columnHeaderIdxs[oldName]\n                this.columnHeaderIdxs[newName]=idx;\n            } else {\n                DB.msg(\"DataTable.renameColumns no such column named \"+oldName)\n            }\n        }\n        this.rebuildOrderedColumnHeaders();\n    }\n    sortRows(colName:string,descending=false){\n        if (!(colName in this.columnHeaderIdxs)){\n            DB.msg(\"DataTable.sortRows no such column \"+colName)\n            return;\n        }\n        let colIdx:number = this.columnHeaderIdxs[colName]\n        this.contents.sort((a,b)=>{\n            let aVal = a[colIdx]\n            let bVal = b[colIdx]\n            switch(typeof aVal){\n                case \"number\":\n                    let vr=aVal-bVal;\n                    if (descending) vr=-vr;\n                    return vr;\n                case \"string\":\n                    let r = aVal.localeCompare(bVal);\n                    if (descending) r=-r;\n                    return r;\n                default:\n                    return 0;\n            }\n        })\n    }\n    protected rebuildOrderedColumnHeaders(){\n        let len = Object.keys(this.columnHeaderIdxs).length;\n        this.orderedColumnHeaders=new Array(len)\n        for (let col in this.columnHeaderIdxs){\n            let idx=this.columnHeaderIdxs[col];\n            this.orderedColumnHeaders[idx]=col;\n        }\n    }\n\n    replaceNulls(fractionOfColumnMin=0){\n        if (fractionOfColumnMin==0){\n            let nc = this.nCols();\n            for (let c=0;c<nc;c++){\n                for (let r=0;r<this.contents.length;r++){\n                    let v = this.getI(r,c);\n                    if (!v){\n                        this.setI(r,c,0);\n                    }\n                }\n            }\n        } else {\n            let nc = this.nCols();\n            for (let c=0;c<nc;c++){\n                let min = 10000000;\n                for (let r=0;r<this.contents.length;r++){\n                    let v = this.getI(r,c);\n                    if (v && v<min){\n                        min=v;\n                    }\n                }\n                min = min*fractionOfColumnMin;\n                for (let r=0;r<this.contents.length;r++){\n                    let v = this.getI(r,c);\n                    if (!v){\n                        this.setI(r,c,min);\n                    }\n                }\n            }\n        }\n    }\n    parseNumbers(){\n        let nr=this.nRows();\n        for (let row=0;row<nr;row++){\n            for (let col in this.columnHeaderIdxs){\n                let v=this.get(row,col);\n                if (typeof v == \"string\"){\n                    let nv = parseFloat(v);\n                    if (!isNaN(nv)){\n                        this.set(row,col,nv);\n                    }\n                }\n            }\n        }\n    }\n    averageNormalizeByRow():DataTable{\n        let rslt = new DataTable([],this.columnHeaders());\n        let nr=this.nRows();\n        for (let row=0;row<nr;row++){\n            let sum=0;\n            let count=0;\n            let nc = this.columnHeaders().length;\n            for (let col=0;col<nc;col++){\n                let v = this.getI(row,col);\n                if (typeof v==\"number\"){\n                    sum+=v;\n                    count++;\n                }\n            }\n            if (count>0){\n                let avg = sum/count;\n                for (let col in this.columnHeaderIdxs){\n                    let v = this.get(row,col);\n                    if (typeof v==\"number\"){\n                        v=v/avg;\n                        rslt.set(row,col,v);\n                    } else {\n                        rslt.set(row,col,v);\n                    }\n                }\n            }\n        }\n        return rslt;\n    }\n    scalerMult(scaler:number){\n        for (let r in this.contents){\n            let row=this.contents[r];\n            for (let c in row){\n                if (!isNaN(row[c])){\n                    row[c]*=scaler;\n                }   \n            }\n        }\n    }\n}\n","/// <reference path=\"DataTableUIAbs.ts\"/>\n/// <reference path=\"../analysis/DataTable.ts\"/>\n\nclass DataTableUI extends DataTableUIAbs {\n    protected dataTable:DataTableAbs;\n    constructor(maxRows=20,maxCols=10,cellEnter?:(row:number,col:number)=>void){\n        super(maxRows,maxCols,cellEnter);\n\n    }\n    setData(dataTable:DataTableAbs){\n        this.dataTable=dataTable;\n        this.firstRow=0;\n        this.firstCol=0;\n        //dataTable.db();\n        ZUI.notify();\n    }\n    getData():DataTableAbs{\n        return this.dataTable;\n    }\n    hasData(): boolean {\n        if (this.dataTable) return true;\n        return false;\n    }\n    protected colHeaderList(): string[] {\n        if (this.dataTable){\n            return this.dataTable.columnHeaders();\n        } else {\n            return null;\n        }\n    }\n    protected rowLabelList(): string[] {\n        if (this.dataTable){\n            let rll:string[] = [];\n            let nr=this.dataTable.nRows();\n            for (let row=0;row<nr;row++){\n                let rowLabel = (row+1).toFixed(0);\n                rll.push(rowLabel);\n            }\n            return rll;\n        }\n        return null;\n    }\n    protected rowData(row: number, firstCol: number, lastCol: number): any[] {\n        if (this.dataTable){\n            let ch = this.dataTable.columnHeaders();\n            let rowData:any[] = [];\n            for (let col=firstCol;col<=lastCol;col++){\n                let colName=ch[col];\n                let v = this.dataTable.get(row,colName);\n\n                rowData.push(v);\n            }\n            return rowData;\n        } else {\n            return null;\n        }\n    }\n    \n}","\ntype DataTableRowLabeledJSON={[rowLabel:string]:{[colLabel:string]:(string | number)}}\n\nabstract class DataTableRowLabeledAbs {\n    abstract hasCol(colName:string):boolean;\n    abstract hasRow(rowName:string):boolean;\n    abstract nRows():number;\n    abstract rowLabel(rowIdx:number):string;\n    abstract rowIdx(rowLabel:string):number;\n    abstract rowLabels():string[];\n    abstract columnHeaders():string[];\n    abstract nCols():number;\n    abstract colName(colIdx:number):string;\n    abstract colIdx(colName:string):number;\n    abstract get(row:string,col:string):string|number;\n    abstract renameColumns(newNames:{[oldName:string]:string})\n    abstract relabelRows(newLabels:{[oldLabel:string]:string})\n\n    copy():DataTableRowLabeled{\n        let rslt = new DataTableRowLabeled();\n        let rl=this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r in rl){\n            for (let c in ch){\n                let v = this.get(r,c);\n                rslt.set(r,c,v);\n            }\n        }\n        return rslt;\n    }\n    toJSON():DataTableRowLabeledJSON{\n        let rslt:DataTableRowLabeledJSON={};\n        let rl=this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r of rl){\n            let rowObj:{[colName:string]:(string | number)} = {};\n            for (let c of ch){\n                let v = this.get(r,c);\n                if (v || (<number>v)==0)\n                    rowObj[c]=v;\n            }\n            rslt[r]=rowObj;\n        }\n        return rslt;\n    }\n    sum():number{\n        let total=0;\n        let rl = this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r of rl){\n            for (let c of ch){\n                let v = <number>this.get(r,c);\n                if (!isNaN(v))\n                    total+=v;\n            }\n        }\n        return total;\n    }\n    count():number{\n        let total=0;\n        let rl = this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r of rl){\n            for (let c of ch){\n                let v = <number>this.get(r,c);\n                if (v || 0==(v))\n                    total++;\n            }\n        }\n        return total;\n    }\n    countNumbers():number{\n        let total=0;\n        let rl = this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r of rl){\n            for (let c of ch){\n                let v = <number>this.get(r,c);\n                if (!isNaN(v))\n                    total++;\n            }\n        }\n        return total;\n    }\n    max():number{\n        let foundNum=false;\n        let max:number=0;\n        let rl = this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r of rl){\n            for (let c of ch){\n                let v = <number>this.get(r,c);\n                if (!isNaN(v)){\n                    if (!foundNum){\n                        max=v;\n                        foundNum=true;\n                    }\n                    if (v>max){\n                        max=v;\n                    } \n                }   \n            }\n        }\n        return max;\n    }\n    min():number{\n        let foundNum=false;\n        let min:number=0;\n        let rl = this.rowLabels();\n        let ch = this.columnHeaders();\n        for (let r of rl){\n            for (let c of ch){\n                let v = <number>this.get(r,c);\n                if (!isNaN(v)){\n                    if (!foundNum){\n                        min=v;\n                        foundNum=true;\n                    }\n                    if (v<min){\n                        min=v;\n                    } \n                }   \n            }\n        }\n        return min;\n    }\n    \n    db(msg?:string,maxColumns=5,maxRows=20){\n        if (msg) DB.start(msg);\n        DB.msg(`(${this.nRows()}x${this.nCols()})`)\n        let rowEll=false;\n        let colEll=false;\n        let cols=this.nCols();\n        if (cols>maxColumns){\n            colEll=true;\n            cols=maxColumns;\n        }\n        let rows=this.nRows();\n        if (rows>maxRows){\n            rowEll=true;\n            rows=maxRows;\n        }\n        let headerStr = \"\\t\";\n        let ch = this.columnHeaders();\n        let rl = this.rowLabels();\n        for (let c=0;c<cols;c++){\n            let col=ch[c];\n            headerStr+=col+\"\\t\";\n        }\n        if(colEll) headerStr+=\"...\"\n        DB.msg(headerStr);\n\n\n        for (let r=0;r<rows;r++){\n            let rowStr=`[${rl[r]}]:\\t`;\n            for (let c=0;c<cols;c++){\n                let val = this.get(this.rowLabel(r),this.colName(c));\n                if (typeof val == \"string\"){\n                    rowStr+='\"'+val+'\"\\t';\n                } else {\n                    rowStr+=val+\"\\t\"\n                }\n            }\n            if (colEll) rowStr+=\"...\";\n            DB.msg(rowStr);\n        }\n        if (rowEll) DB.msg(\"...\")\n        if (msg) DB.end(msg);\n    }\n}","/// <reference path=\"DataTableRowLabeledAbs.ts\"/>\n\n\nclass DataTableRowLabeled extends DataTableRowLabeledAbs{\n    \n    protected contents:any[][] // [row,column]\n    protected columnHeaderIdxs:{[columnHeader:string]:number}\n    protected orderedColumnHeaders:string[]\n    protected rowLabelIdxs:{[rowHeader:string]:number}\n    protected orderedRowLabels:string[];\n    constructor(){\n        super();\n        this.contents=[];\n        this.columnHeaderIdxs={};\n        this.rowLabelIdxs={};\n        this.orderedColumnHeaders=[];\n        this.orderedRowLabels=[]\n    }\n    rowIndexes():{[rowHeader:string]:number}{ return this.rowLabelIdxs}\n    colIndexes():{[colName:string]:number} {return this.columnHeaderIdxs}\n    hasCol(colName:string):boolean{\n        return colName in this.columnHeaderIdxs;\n    }\n    hasRow(rowName:string):boolean{\n        return rowName in this.rowLabelIdxs;\n    }\n    nRows():number{\n        return this.contents.length;\n    }\n    rowLabels():string[]{\n        if (!this.orderedRowLabels)\n            this.rebuildOrderedRowLabels();\n        return this.orderedRowLabels;\n    }\n    rowLabel(rowIdx:number):string{\n        return this.orderedRowLabels[rowIdx]\n    }\n    rowIdx(rowLabel:string):number{\n        return this.rowLabelIdxs[rowLabel]\n    }\n    columnHeaders():string[]{\n        if (!this.orderedColumnHeaders){\n            this.rebuildOrderedColumnHeaders();\n        }\n        return this.orderedColumnHeaders;\n    }\n    nCols():number{\n        return this.orderedColumnHeaders.length;\n    }\n    colName(colIdx:number):string {\n        return this.orderedColumnHeaders[colIdx];\n    }\n    colIdx(colName:string):number{\n        return this.columnHeaderIdxs[colName]\n    }\n    static fromJSON(json:DataTableRowLabeledJSON):DataTableRowLabeled{\n        let rslt = new DataTableRowLabeled();\n        for (let r in json){\n            let row = json[r];\n            for (let c in row){\n                let v = row[c];\n                rslt.set(r,c,v);\n            }\n        }\n        return rslt;\n    }\n    getI(row:number,col:number):any{\n        if (row<0 || row>=this.contents.length)\n            return 0;\n        let contRow = this.contents[row];\n        if (col<0 || col>=contRow.length)\n            return 0;\n        return this.contents[row][col]\n    }\n    protected setI(row:number,col:number,newVal:any){\n        if (row<0) return;\n        while (row>this.contents.length-1)\n            this.contents.push([]);\n        let contRow = this.contents[row];\n        while (col>contRow.length-1){\n            contRow.push(0)\n        }\n        this.contents[row][col]=newVal;\n    }\n    get(row:string,col:string):string | number {\n        let rowIdx=this.rowLabelIdxs[row];\n        if (!rowIdx && rowIdx!=0)\n            return 0;\n        let colIdx = this.columnHeaderIdxs[col];\n        if (!colIdx && colIdx!=0){\n            return 0;\n        }\n        return this.getI(rowIdx,colIdx)\n    }\n    set(row:string,col:string,newVal:string|number){\n        let rowIdx = this.rowLabelIdxs[row];\n        if (isNaN(rowIdx)){\n            rowIdx = this.nRows();\n            this.rowLabelIdxs[row]=rowIdx;\n            if (!this.orderedRowLabels)\n                this.rebuildOrderedRowLabels()\n            else\n                this.orderedRowLabels.push(row);\n        }\n        let colIdx = this.columnHeaderIdxs[col];\n        if (isNaN(colIdx)){\n            colIdx = this.nCols();\n            this.columnHeaderIdxs[col]=colIdx;\n            if (!this.orderedColumnHeaders)\n                this.rebuildOrderedColumnHeaders()\n            else\n                this.orderedColumnHeaders.push(col);\n        }\n        this.setI(rowIdx,colIdx,newVal);\n    }\n    addTo(row:string,col:string,newVal:number){\n        let oldVal = this.get(row,col);\n        if (isNaN(<number>oldVal)){\n            this.set(row,col,newVal);\n        } else {\n            this.set(row,col,<number>oldVal+newVal);\n        }\n    }\n    getRow(row:string):DataRow{\n        let dr = new DataRow();\n        for (let col in this.columnHeaderIdxs){\n            dr.set(col,this.get(row,col))\n        }\n        return dr;\n    }\n    getCol(col:string):DataColumn{\n        let dc = new DataColumn(col);\n        let idx=0;\n        for (let row in this.rowLabelIdxs){\n            dc.set(idx++,this.get(row,col))\n        }\n        return dc;\n    }\n    \n    renameColumns(newNames:{[oldName:string]:string}){\n        for (let oldName in newNames){\n            let newName = newNames[oldName];\n            if (oldName in this.columnHeaderIdxs){\n                let idx = this.columnHeaderIdxs[oldName]\n                delete this.columnHeaderIdxs[oldName]\n                this.columnHeaderIdxs[newName]=idx;\n            } else {\n                DB.msg(\"DataTableRowLabeled.renameColumns no such column named \"+oldName)\n            }\n        }\n        this.rebuildOrderedColumnHeaders();\n    }\n    relabelRows(newNames:{[oldName:string]:string}){\n        for (let oldName in newNames){\n            let newName = newNames[oldName];\n            if (oldName in this.rowLabelIdxs){\n                let idx = this.rowLabelIdxs[oldName]\n                delete this.rowLabelIdxs[oldName]\n                this.rowLabelIdxs[newName]=idx;\n            } else {\n                DB.msg(\"DataTableRowLabeled.renameRows no such row named \"+oldName)\n            }\n        }\n        this.rebuildOrderedRowLabels();\n    }\n    protected rebuildOrderedColumnHeaders(){\n        let len = Object.keys(this.columnHeaderIdxs).length;\n        this.orderedColumnHeaders=new Array(len)\n        for (let col in this.columnHeaderIdxs){\n            let idx=this.columnHeaderIdxs[col];\n            this.orderedColumnHeaders[idx]=col;\n        }\n    }\n    protected rebuildOrderedRowLabels(){\n        let len = Object.keys(this.rowLabelIdxs).length;\n        this.orderedRowLabels=new Array(len)\n        for (let row in this.rowLabelIdxs){\n            let idx=this.rowLabelIdxs[row];\n            this.orderedRowLabels[idx]=row;\n        }\n    }\n    \n    scalerMult(scaler:number){\n        for (let r in this.contents){\n            let row=this.contents[r];\n            for (let c in row){\n                if (!isNaN(row[c])){\n                    row[c]*=scaler;\n                }   \n            }\n        }\n    }\n}","/// <reference path=\"DataTableUI.ts\"/>\n/// <reference path=\"../analysis/DataTableRowLabeled.ts\"/>\n\nclass DataTableRowLabeledUI extends DataTableUIAbs{\n    protected dataTable:DataTableRowLabeled;\n    private rowLabels:string[];\n    constructor(maxRows=20,maxCols=10,cellEnter?:(row:number,col:number)=>void){\n        super(maxRows,maxCols,cellEnter);\n\n    }\n    \n    setData(dataTable:DataTableRowLabeled){\n        this.dataTable=dataTable;\n        this.firstRow=0;\n        this.firstCol=0;\n        ZUI.notify();\n    }\n    hasData(): boolean {\n        if (this.dataTable) return true;\n        return false;\n    }\n    protected colHeaderList(): string[] {\n        if (this.dataTable){\n            return this.dataTable.columnHeaders();\n        } else {\n            return null;\n        }\n    }\n\n    protected rowLabelList(): string[] {\n        if (this.dataTable){\n            let rowLabels = this.dataTable.rowLabels();\n            this.rowLabels= rowLabels;\n        } else\n            this.rowLabels= null;\n        return this.rowLabels;\n    }\n    protected rowData(row: number, firstCol: number, lastCol: number): any[] {\n        if (this.dataTable){\n            let rowLabel = this.rowLabels[row];\n            let ch = this.dataTable.columnHeaders();\n            let rowData:any[]=[];\n            for (let col=firstCol;col<=lastCol;col++){\n                let colName=ch[col];\n                let v = this.dataTable.get(rowLabel,colName);\n                \n                rowData.push(v);\n            }\n            return rowData;\n        } else {\n            return null;\n        }\n    }\n    \n}","\n\nclass ChartUI extends ZUI {\n    private width:number;\n    private height:number;\n    private setWidth:number;\n    private setHeight:number;\n    private canvas:JQuery;\n    private chartLeft:number;\n    private chartRight:number;\n    private chartTop:number;\n    private chartBottom:number;\n    private yAxisWidth:number;\n    private xAxisHeight:number;\n    protected xMax:number;\n    protected yMax:number;\n    protected xMin:number;\n    protected yMin:number;\n\n    private nYTicks:number;\n    private nXTicks:number;\n\n    private showYAxis:boolean;\n    private showXAxis:boolean;\n\n    private drawLineColor:string;\n    private drawLineWidth:number;\n    private graphics:CanvasRenderingContext2D;\n\n    private dataType:string;\n    private dataRow:DataRowAbs;\n    private eventsSetup:boolean;\n    private colHoverCallback:(col:string)=>void;\n    private lastHoverIdx:number;\n    private downX:number;\n\n    private startColRange:number;\n    private endColRange:number;\n    private colRangeCallback:(startCol:number,endCol:number)=>void;\n\n    private onClick:(colIdx:number)=>void;\n\n    constructor(){\n        super();\n        this.setWidth=100;\n        this.setHeight=50;\n        this.yAxisWidth=50;\n        this.xAxisHeight=20\n        this.nYTicks=10;\n        this.nXTicks=10;\n        this.eventsSetup=false;\n        this.showYAxis=true;\n        this.drawLineColor=\"#FF0000\";\n        this.drawLineWidth=2;\n        this.startColRange=-1;\n        this.endColRange=-1;\n        PageManager.addAfterDOMNotice(()=>{\n            if (!this.eventsSetup && this.canvas){\n                this.setupEventListeners();\n                this.eventsSetup=true;\n            }\n        })\n    }\n    size(width:number,height:number):ChartUI{\n        this.setWidth=width;\n        this.setHeight=height;\n        return this;\n    }\n    gridSize(nXTicks:number,nYTicks:number):ChartUI{\n        this.nXTicks=nXTicks;\n        this.nYTicks=nYTicks;\n        return this;\n    }\n    setDataRow(dataRow:DataRowAbs){\n        this.dataType=\"row\";\n        this.dataRow=dataRow;\n        \n        ZUI.notify();\n    }\n    colHover(colHoverCallback:(colName:string)=>void):ChartUI{\n        this.colHoverCallback=colHoverCallback;\n        return this;\n    }\n    colRangeSelect(colRangeCallback:(colStart:number,colEnd:number)=>void):ChartUI{\n        this.colRangeCallback=colRangeCallback;\n        return this;\n    }\n    click(onClick:(colIdx:number)=>void):ChartUI{\n        this.onClick=onClick;\n        return this;\n    }\n    xAxis(show=true):ChartUI{\n        this.showXAxis=show;\n        return this;\n    }\n    yAxis(show=true):ChartUI{\n        this.showYAxis=show;\n        return this;\n    }\n    line(lc:string,width=4):ChartUI{\n        this.drawLineColor=lc;\n        this.drawLineWidth=width;\n        return this;\n    }\n    private toX(x:number):number{\n        let newX= this.chartLeft+(x-this.xMin)/(this.xMax-this.xMin)\n            *(this.chartRight-this.chartLeft);\n        \n        //DB.msg(`x${x} fromX${this.fromX(newX)}`)\n        return newX;\n    }\n    private fromX(x:number):number{\n        let newX = (x*2-this.chartLeft)/(this.chartRight-this.chartLeft)\n            *(this.xMax-this.xMin)+this.xMin;\n        return newX;\n    } \n    private eventX(event:Event):number{\n        let x=0;\n        if (event instanceof MouseEvent){\n            x = (<MouseEvent>event).clientX;\n        } else if (event instanceof TouchEvent){\n            x=(<TouchEvent>event).changedTouches[0].pageX\n        } else {\n            let oe = (<any>event).originalEvent\n            if (oe){\n                x = oe.clientX;\n            } \n        }\n        let rect = this.canvas[0].getBoundingClientRect();\n        x = x-rect.left;\n        return x;\n    }\n    private eventToChartX(event:Event):number {\n        let x=this.eventX(event);\n        x=this.fromX(x);\n        return x;\n    }\n    private toY(y:number):number{\n        let newY = this.chartBottom+(y-this.yMin)/(this.yMax-this.yMin)\n            *(this.chartTop-this.chartBottom);\n        //DB.msg(`y${y} fromY${this.fromY(newY)}`)\n        return newY;\n    }\n    private fromY(y:number):number{\n        let newY = (y*2-this.chartBottom)/(this.chartTop-this.chartBottom)\n            * (this.yMax-this.yMin)+this.yMin;\n        return newY;\n    }\n    private eventY(event:Event):number{\n        let y=0;\n        if (event instanceof MouseEvent){\n            y = (<MouseEvent>event).clientY;\n        } else if (event instanceof TouchEvent){\n            y=(<TouchEvent>event).changedTouches[0].pageY\n        } else {\n            let oe = (<any>event).originalEvent\n            if (oe){\n                y = oe.clientY;\n            } \n        }\n        let rect = this.canvas[0].getBoundingClientRect();\n        y = y-rect.top;\n        return y;\n    }\n    private eventToChartY(event:Event):number {\n        let y=this.eventY(event);\n        y=this.fromY(y);\n        return y;\n    }\n    private mouseMove(event:Event){\n        let x = this.eventToChartX(event);\n        let y = this.eventToChartY(event);\n        if (this.colRangeCallback){\n            if ((<any>event).originalEvent)\n                event=(<any>event).originalEvent;\n            if (event instanceof MouseEvent){\n                let me = <MouseEvent>event;\n                if (me.which==1){\n                    this.expandRange(x);\n                    this.paint();\n                }\n            }\n        }\n        if (this.colHoverCallback){\n            if (x<this.xMin || x>this.xMax) return;\n            let colIdx = Math.floor(x+0.5);\n            if (colIdx!=this.lastHoverIdx){\n                this.lastHoverIdx=colIdx;\n                if (this.dataRow){\n                    let colName = this.dataRow.columnHeaders()[colIdx]\n                    this.colHoverCallback(colName);\n                }\n            }\n        }\n        //DB.msg(`mouseMove [${x},${y}]`)\n    }\n    expandRange(x:number){\n        if (x<this.xMin)\n            x=this.xMin;\n        if (x>this.xMax)\n            x=this.xMax;\n        x=Math.floor(x+0.5)\n        if (this.startColRange<0)\n            this.startColRange=x;\n        if (this.endColRange<0)\n            this.endColRange=x;\n        if (x<this.startColRange)\n            this.startColRange=x;\n        if (x>this.endColRange)\n            this.endColRange=x;\n    }\n    private mouseDown(event:Event){\n        this.downX=this.eventX(event);\n        if (this.colRangeCallback){\n            let x=this.eventToChartX(event);\n            if (x<this.xMin)\n                this.expandRange(this.xMin);\n            else if (x>this.xMax)\n                this.expandRange(this.xMax);\n            else\n                this.expandRange(x);\n            this.paint();\n        } else {\n            this.startColRange=this.endColRange=-1;\n        }\n    }\n    private mouseUp(event:Event){\n        let upX = this.eventX(event);\n        let dx=upX-this.downX;\n        if (dx<0) dx=-dx;\n        if (this.colRangeCallback){\n            let x=this.eventToChartX(event);\n            this.expandRange(x);\n            if (this.startColRange>=0){\n                let start=Math.floor(this.startColRange+0.5)\n                let end=Math.floor(this.endColRange+0.5);\n                if (dx>4)\n                    this.colRangeCallback(start,end)\n            }\n            this.startColRange=this.endColRange=-1;\n            this.paint();\n        }\n        if (this.onClick){\n            let x = Math.floor(this.eventToChartX(event)+0.5);\n            if (dx<=4)\n                this.onClick(x);\n        }\n    }\n    private mouseEnter(event:Event){\n        if (this.colRangeCallback){\n            if (event instanceof MouseEvent){\n                if ((<MouseEvent>event).which==1){\n                    let x = this.eventToChartX(event);\n                    this.expandRange(x);\n                    this.paint();\n                }\n            }\n        }\n    }\n    private mouseLeave(event:Event){\n        this.startColRange=this.endColRange=-1;\n        this.paint();\n    }\n    private calculateChartArea(){\n        this.chartLeft=this.yAxisWidth+2;\n        this.chartRight=this.width-2;\n        let m = this.graphics.measureText(\"A\");\n        let textPad = (m.actualBoundingBoxAscent+m.actualBoundingBoxDescent);\n        this.chartTop=2+textPad;\n        this.chartBottom=this.height-this.xAxisHeight-textPad;\n    }\n    private calculateAxesSpace(){\n        if (this.dataType){\n            switch(this.dataType){\n                case \"row\":\n                    this.computeRowAxes();\n                    return;\n                default:\n                    break;\n            }\n        }\n        this.yAxisWidth=0;\n        this.xAxisHeight=0;\n    }\n    protected calculateDataBounds(){\n        if (this.dataType){\n            switch(this.dataType){\n                case \"row\":\n                    this.rowBounds();\n                    return;\n                default:\n                    break;\n            }\n        }\n        this.xMin=-10;\n        this.yMin=-1;\n        this.xMax=100;\n        this.yMax=1;\n    }\n\n    private paint(){\n        let g=this.graphics;\n        g.font=ChartUI.labelFont;\n        this.calculateDataBounds();\n        this.calculateAxesSpace();\n        this.calculateChartArea();\n        g.strokeStyle=\"#000000\";\n        g.clearRect(0,0,this.width,this.height)\n        this.paintSelection();\n        this.paintGrid();\n        this.paintAxes();\n        g.strokeRect(this.chartLeft,this.chartTop,\n            this.chartRight-this.chartLeft,this.chartBottom-this.chartTop);\n        if (this.dataType){\n            switch(this.dataType){\n                case \"row\":\n                    this.paintRow();\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    private paintGrid(){\n        let g=this.graphics;\n        g.font=ChartUI.labelFont;\n        let xWidth = this.xMax-this.xMin\n        let xStride = (xWidth)/this.nXTicks;\n        let yWidth = this.yMax-this.yMin;\n        let yStride = yWidth/this.nYTicks;\n        g.strokeStyle=\"#888888\";\n        let saveDash = g.getLineDash();\n        let saveWidth = g.lineWidth;\n        g.lineWidth=3;\n        g.setLineDash([6,9])\n        g.beginPath();\n        if (xStride>0){\n            for (let x=xStride;x<xWidth;x+=xStride){\n                g.moveTo(this.toX(x),this.toY(this.yMin));\n                g.lineTo(this.toX(x),this.toY(this.yMax))\n            }\n        }\n        if (yStride>0){\n            for (let y=yStride;y<yWidth;y+=yStride){\n                g.moveTo(this.toX(this.xMin),this.toY(y));\n                g.lineTo(this.toX(this.xMax),this.toY(y))\n            }\n        }\n        g.stroke();\n        g.setLineDash(saveDash);\n        g.lineWidth=saveWidth;\n    }\n    private paintAxes(){\n        if (this.dataType){\n            switch(this.dataType){\n                case \"row\":\n                    this.paintRowAxes();\n                    return;\n                default:\n                    break;\n            }\n        }\n        return;\n    }\n    private paintSelection(){\n        if (this.startColRange<0) return;\n        let start = this.toX(this.startColRange-0.5);\n        let end = this.toX(this.endColRange+0.5);\n        let g=this.graphics;\n        let saveFill=g.fillStyle;\n        g.fillStyle= \"rgba(200,200,200,0.2)\";\n        g.fillRect(start,this.chartTop,end-start,this.chartBottom-this.chartTop);\n        g.fillStyle=saveFill;\n    }\n    private paintRow(){\n        let g=this.graphics;\n        let saveStroke = g.strokeStyle;\n        let saveWidth = g.lineWidth;\n        g.strokeStyle=this.drawLineColor;\n        g.lineWidth=this.drawLineWidth;\n        g.beginPath();\n        let nc=this.dataRow.nCols();\n        let ch=this.dataRow.columnHeaders();\n        let gap=true;\n        for (let cIdx = 0; cIdx<nc;cIdx++){\n            let v = <number>this.dataRow.get(ch[cIdx])\n\n            if (isNaN(v)){\n            } else {\n                if (gap){\n                    g.moveTo(this.toX(cIdx),this.toY(v))\n                    gap=false;\n                } else {\n                    g.lineTo(this.toX(cIdx),this.toY(v));\n                }\n            }\n        }\n        g.stroke();\n        g.strokeStyle=saveStroke;\n        g.lineWidth=saveWidth;\n    }\n    private static yLabelOffset = 2;\n    private static labelFont = \"30px Arial\"\n    private paintRowAxes(){\n        let g = this.graphics;\n        let saveAlign = g.textAlign;\n        let saveBase = g.textBaseline;\n        g.fillStyle=\"#000000\"\n        if (this.showYAxis){\n            g.textAlign=\"end\"\n            g.textBaseline=\"middle\"\n            let yWidth = this.yMax-this.yMin;\n            let yStride = yWidth/this.nYTicks;\n            if (yStride==0){\n                let label=this.yMax.toString();\n                g.fillText(label,this.chartLeft-ChartUI.yLabelOffset,this.chartTop);\n                g.fillText(label,this.chartLeft-ChartUI.yLabelOffset,this.chartBottom);\n            } else {\n                let decimals=this.estimateDecimals(yStride);\n                for (let y=this.yMin;y<=this.yMax;y+=yStride){\n                    let label = y.toFixed(decimals);\n                    if (decimals>10)\n                        label=y.toString();\n                    g.fillText(label,this.chartLeft-ChartUI.yLabelOffset,this.toY(y))\n                }\n            }\n        }\n        if (this.showXAxis){\n            g.textAlign=\"center\";\n            g.textBaseline=\"bottom\";\n            let xWidth = this.xMax-this.xMin;\n            let xStride = xWidth/this.nXTicks;\n            if (xStride==0){\n                let label = this.xMax.toString();\n                g.fillText(label,this.chartLeft,this.height);\n            } else {\n                let ch = this.dataRow.columnHeaders();\n                for (let x=this.xMin;x<this.xMax;x+=xStride){\n                    let colIdx = Math.floor(x+0.5)\n                    let label = ch[colIdx]//xLabel.toFixed(decimals);\n                    g.fillText(label,this.toX(x),this.height);\n                }\n            }\n        }\n        g.textAlign=saveAlign;\n        g.textBaseline=saveBase;\n    }\n    private rowBounds(){\n        this.xMin=0;\n        this.xMax=this.dataRow.nCols()-1;\n        this.yMin=this.dataRow.min();\n        this.yMax=this.dataRow.max();\n    }\n    private computeRowAxes(){\n        this.computeRowYAxis();\n        this.computeRowXAxis();\n    }\n    private computeRowYAxis(){\n        if (this.showYAxis){\n            let g=this.graphics;\n            let yWidth = this.yMax-this.yMin;\n            let yStride = yWidth/this.nYTicks;\n            if (yStride==0){\n                let label=this.yMax.toString();\n                let width=g.measureText(label).width+ChartUI.yLabelOffset;\n                this.yAxisWidth=width;\n            } else {\n                let decimals=this.estimateDecimals(yStride);\n                this.yAxisWidth=0;\n                for (let y=0;y<=yWidth;y+=yStride){\n                    let label = y.toFixed(decimals);\n                    if (decimals>10)\n                        label=y.toString();\n                    let width=g.measureText(label).width+ChartUI.yLabelOffset;\n                    if (width>this.yAxisWidth)\n                        this.yAxisWidth=width;\n                }\n            }\n        } else {\n            this.yAxisWidth=0;\n        }\n    }\n    private computeRowXAxis(){\n        if (this.showXAxis){\n            let g = this.graphics;\n            let m = g.measureText(\"A\");\n            this.xAxisHeight=m.actualBoundingBoxAscent+m.actualBoundingBoxDescent;\n            \n        } else {\n            this.xAxisHeight=0;\n        }\n    }\n    private estimateDecimals(range:number):number{\n        let decimals = 0;\n        let nr = range;\n        while (nr<1){\n            nr*=10;\n            decimals ++\n            if (decimals>10) return decimals;\n        }\n        return decimals;\n    }\n\n    setupEventListeners(){\n        let canvas:JQuery = this.canvas;\n        canvas.mousemove((event: Event) => {\n            try {\n                event.preventDefault();\n                this.mouseMove(event);\n            } catch (e) { DB.msg(\"mousemove ERR\",e); }\n        });\n        canvas.mouseup((event:Event)=>{\n            try {\n                event.preventDefault();\n                this.mouseUp(event)\n            }catch (e) {DB.msg(\"mouseup Err\",e)}\n        })\n        canvas.mousedown((event:Event)=>{\n            try {\n                event.preventDefault();\n                this.mouseDown(event)\n            }catch (e) {DB.msg(\"mousedown Err\",e)}\n        })\n        \n        canvas.mouseleave((event:Event)=>{\n            try {\n                event.preventDefault();\n                this.mouseLeave(event)\n            }catch (e) {DB.msg(\"mouseleave Err\",e)}\n        })\n        canvas.mouseenter((event:Event)=>{\n            try {\n                event.preventDefault();\n                this.mouseEnter(event)\n            }catch (e) {DB.msg(\"mouseenter Err\",e)}\n        })\n    }\n    renderJQ():JQuery{\n        this.eventsSetup=false;\n        this.canvas= $(`<canvas class=\"ChartUI ${this.classStr()}\" width=${this.setWidth}px height=${this.setHeight}px style=\"width:${this.setWidth}px;height:${this.setHeight}\"></canvas>`);\n        this.width=this.setWidth*2;\n        (<any>this.canvas[0]).width=this.width;\n        this.height=this.setHeight*2;\n        (<any>this.canvas[0]).height=this.height;\n        this.graphics = (<HTMLCanvasElement>this.canvas[0]).getContext(\"2d\")\n        this.paint();\n        this.applyCSS(this.canvas);\n        return this.canvas;\n    }\n}","\ntype DiffEditCode = \"start\" | \"match\" | \"replace\" | \"skipFrom\" | \"addTo\"\nclass LineDiff {\n    private lFrom:string[];\n    private lTo:string[];\n    private heap:DiffEdit[];\n    private addMemory:{[hash:number]:DiffEdit}\n    private patch:DiffEdit[];\n    private fromLineReplaced_:{[fromLine:number]:boolean}\n    private fromLineSkipped_:{[fromLine:number]:boolean}\n    private toLineDeleted_:{[fromLine:number]:boolean}\n    constructor(from:string,to:string){\n        this.lFrom=from.split(\"\\n\");\n        this.lTo=to.split(\"\\n\")\n        this.patch = this.editsForS1IntoS2();\n        this.indexPatch();\n    }\n    getPatch():DiffEdit[]{\n        return this.patch;\n    }\n    fromLineReplaced(fromLine:number):boolean { return this.fromLineReplaced_[fromLine]}\n    fromLineSkipped(fromLine:number):boolean { return this.fromLineSkipped_[fromLine]}\n    toLineDeleted(fromLine:number):boolean { return this.toLineDeleted_[fromLine]}\n    protected indexPatch(){\n        this.fromLineReplaced_={};\n        this.fromLineSkipped_={};\n        this.toLineDeleted_={};\n        if (this.patch){\n            for (let i=0;i<this.patch.length;i++){\n                let edit = this.patch[i];\n                switch(edit.edit){\n                    case \"start\":\n                        break;\n                    case \"match\":\n                        break;\n                    case \"replace\":\n                        this.fromLineReplaced_[edit.fromIdx]=true;\n                        break;\n                    case \"skipFrom\":\n                        this.fromLineSkipped_[edit.fromIdx]=true;\n                        break;\n                    case \"addTo\":\n                        this.toLineDeleted_[edit.fromIdx]=true;\n                        break;\n                }\n            }\n        }\n    }\n    private editsForS1IntoS2():DiffEdit[]{\n        this.heap=[ ]\n        this.addMemory={}\n        let top = new DiffEdit(0,0,\"start\",0)\n        while (top.fromIdx<this.lFrom.length || top.toIdx<this.lTo.length){\n            if (top.fromIdx<this.lFrom.length){\n                let skip = new DiffEdit(top.fromIdx+1,top.toIdx,\"skipFrom\",top.totalCost+1,top);\n                this.add(skip);\n            }\n            if (top.toIdx<this.lTo.length){\n                let add = new DiffEdit(top.fromIdx,top.toIdx+1,\"addTo\",top.totalCost+1,top);\n                this.add(add);\n            }\n            if (top.fromIdx<this.lFrom.length && top.toIdx<this.lTo.length){\n                let mc = this.matchCost(top.fromIdx,top.toIdx);\n                let edit:DiffEditCode=\"replace\";\n                if (mc==0)\n                    edit=\"match\"\n                let match = new DiffEdit(top.fromIdx+1,top.toIdx+1,edit,\n                    top.totalCost+2*mc,top);\n                this.add(match);\n            }\n            top = this.get();\n        }\n        let rslt = this.reverseEdits(top);\n        return rslt;\n    }\n    protected matchCost(fromIdx:number,toIdx:number):number{ \n            // returns 0 for no cost (match) and 1 for complete missmatch or in between\n        let fromS = this.lFrom[fromIdx];\n        let toS = this.lTo[toIdx];\n        if (fromS==toS)\n            return 0\n        else\n            return 0.99999\n    }\n    private reverseEdits(top:DiffEdit):DiffEdit[]{\n        if (top && top.edit!=\"start\"){\n            let prev:DiffEdit[] = this.reverseEdits(top.prevState);\n            top.fromIdx--;\n            top.toIdx--;\n            prev.push(top);\n            return prev;\n        } else {\n            return [];\n        }\n    }\n    private add(edit:DiffEdit){\n        let hash = edit.hash();\n        let mem = this.addMemory[hash];\n        if (mem && mem.totalCost<=edit.totalCost) \n            return;\n        this.addMemory[hash]=edit;\n        let lastIdx = this.heap.length;\n        this.heap.push(edit);\n        while (lastIdx>0){\n            let upIdx = Math.floor(lastIdx/2);\n            if (this.heap[lastIdx].totalCost<this.heap[upIdx].totalCost){\n                this.exchange(lastIdx,upIdx);\n                lastIdx=upIdx;\n            } else {\n                lastIdx=-1;\n            }\n        }\n    }\n    private exchange(i1:number,i2:number){\n        let tmp = this.heap[i1];\n        this.heap[i1]=this.heap[i2]\n        this.heap[i2]=tmp;\n    }\n    private get():DiffEdit{\n        if (this.heap.length>0){\n            let rslt = this.heap[0];\n            this.heap[0]=this.heap.pop();\n            let idx=0;\n            while (idx<this.heap.length){\n                let left = idx*2+1;\n                if (left<this.heap.length&&this.heap[left].totalCost<this.heap[idx].totalCost){\n                    this.exchange(left,idx);\n                    idx=left;\n                } else {\n                    let right = left+1;\n                    if (right<this.heap.length&&this.heap[right].totalCost<this.heap[idx].totalCost){\n                        this.exchange(right,idx);\n                        idx=right;\n                    } else {\n                        idx=this.heap.length;\n                    }\n                }\n            }\n            return rslt;\n        } else {\n            return null;\n        }\n    }\n    applyEditFromTo(edits:DiffEdit[]):string{\n        let rslt=\"\";\n        for (let i=0;i<edits.length;i++){\n            let edit = edits[i];\n            switch (edit.edit){\n                case \"start\":\n                    break;\n                //case \"addFrom\":\n                case \"match\":\n                case \"replace\":\n                    rslt=this.addLine(rslt,this.lTo[edit.toIdx])\n                    break;\n                case \"addTo\":\n                    rslt=this.addLine(rslt,this.lTo[edit.toIdx])\n                    break;\n                case \"skipFrom\":\n                //case \"skipTo\":\n                    break;\n            }\n        }\n        return rslt;\n    }\n    private addLine(str:string,addStr:string):string{\n        if (str && str.length>0){\n            return str+\"\\n\"+addStr;\n        } else {\n            return addStr;\n        }\n    }\n}\n\nclass DiffEdit {\n    fromIdx:number;\n    toIdx:number;\n    edit:DiffEditCode;\n    totalCost:number;\n    prevState:DiffEdit;\n    constructor(fromIdx:number,toIdx:number,edit:DiffEditCode,totalCost:number,prevState?:DiffEdit){\n        this.fromIdx=fromIdx;\n        this.toIdx=toIdx;\n        this.edit=edit;\n        this.totalCost=totalCost;\n        this.prevState=prevState;\n    }\n    hash():number{\n        return this.fromIdx*10000+this.toIdx;\n    }\n}","/// <reference path=\"LineDiff.ts\"/>\n\nclass StringDiff {\n    private lFrom:string;\n    private lTo:string;\n    private heap:DiffEdit[];\n    private addMemory:{[hash:number]:DiffEdit}\n    private patch:DiffEdit[];\n    private fromCharReplaced_:{[fromLine:number]:boolean}\n    private fromCharSkipped_:{[fromLine:number]:boolean}\n    private toCharDeleted_:{[fromLine:number]:boolean}\n    constructor(from:string,to:string){\n        this.lFrom=from;\n        this.lTo=to\n        this.patch = this.editsForS1IntoS2();\n        this.indexPatch();\n    }\n    getPatch():DiffEdit[]{\n        return this.patch;\n    }\n    fromCharReplaced(fromLine:number):boolean { return this.fromCharReplaced_[fromLine]}\n    fromCharSkipped(fromLine:number):boolean { return this.fromCharSkipped_[fromLine]}\n    toCharDeleted(fromLine:number):boolean { return this.toCharDeleted_[fromLine]}\n    protected indexPatch(){\n        this.fromCharReplaced_={};\n        this.fromCharSkipped_={};\n        this.toCharDeleted_={};\n        if (this.patch){\n            for (let i=0;i<this.patch.length;i++){\n                let edit = this.patch[i];\n                switch(edit.edit){\n                    case \"start\":\n                        break;\n                    case \"match\":\n                        break;\n                    case \"replace\":\n                        this.fromCharReplaced_[edit.fromIdx]=true;\n                        break;\n                    case \"skipFrom\":\n                        this.fromCharSkipped_[edit.fromIdx]=true;\n                        break;\n                    case \"addTo\":\n                        this.toCharDeleted_[edit.fromIdx]=true;\n                        break;\n                }\n            }\n        }\n    }\n    private editsForS1IntoS2():DiffEdit[]{\n        this.heap=[ ]\n        this.addMemory={}\n        let top = new DiffEdit(0,0,\"start\",0)\n        while (top.fromIdx<this.lFrom.length || top.toIdx<this.lTo.length){\n            if (top.fromIdx<this.lFrom.length){\n                let skip = new DiffEdit(top.fromIdx+1,top.toIdx,\"skipFrom\",top.totalCost+1,top);\n                this.add(skip);\n            }\n            if (top.toIdx<this.lTo.length){\n                let add = new DiffEdit(top.fromIdx,top.toIdx+1,\"addTo\",top.totalCost+1,top);\n                this.add(add);\n            }\n            if (top.fromIdx<this.lFrom.length && top.toIdx<this.lTo.length){\n                let mc = this.matchCost(top.fromIdx,top.toIdx);\n                let edit:DiffEditCode=\"replace\";\n                if (mc==0)\n                    edit=\"match\"\n                let match = new DiffEdit(top.fromIdx+1,top.toIdx+1,edit,\n                    top.totalCost+2*mc,top);\n                this.add(match);\n            }\n            top = this.get();\n        }\n        let rslt = this.reverseEdits(top);\n        return rslt;\n    }\n    protected matchCost(fromIdx:number,toIdx:number):number{ \n            // returns 0 for no cost (match) and 1 for complete missmatch or in between\n        let fromS = this.lFrom.charCodeAt(fromIdx);\n        let toS = this.lTo.charCodeAt(toIdx);\n        if (fromS==toS)\n            return 0\n        else\n            return 0.99999\n    }\n    private reverseEdits(top:DiffEdit):DiffEdit[]{\n        if (top && top.edit!=\"start\"){\n            let prev:DiffEdit[] = this.reverseEdits(top.prevState);\n            top.fromIdx--;\n            top.toIdx--;\n            prev.push(top);\n            return prev;\n        } else {\n            return [];\n        }\n    }\n    private add(edit:DiffEdit){\n        let hash = edit.hash();\n        let mem = this.addMemory[hash];\n        if (mem && mem.totalCost<=edit.totalCost) \n            return;\n        this.addMemory[hash]=edit;\n        let lastIdx = this.heap.length;\n        this.heap.push(edit);\n        while (lastIdx>0){\n            let upIdx = Math.floor(lastIdx/2);\n            if (this.heap[lastIdx].totalCost<this.heap[upIdx].totalCost){\n                this.exchange(lastIdx,upIdx);\n                lastIdx=upIdx;\n            } else {\n                lastIdx=-1;\n            }\n        }\n    }\n    private exchange(i1:number,i2:number){\n        let tmp = this.heap[i1];\n        this.heap[i1]=this.heap[i2]\n        this.heap[i2]=tmp;\n    }\n    private get():DiffEdit{\n        if (this.heap.length>0){\n            let rslt = this.heap[0];\n            this.heap[0]=this.heap.pop();\n            let idx=0;\n            while (idx<this.heap.length){\n                let left = idx*2+1;\n                if (left<this.heap.length&&this.heap[left].totalCost<this.heap[idx].totalCost){\n                    this.exchange(left,idx);\n                    idx=left;\n                } else {\n                    let right = left+1;\n                    if (right<this.heap.length&&this.heap[right].totalCost<this.heap[idx].totalCost){\n                        this.exchange(right,idx);\n                        idx=right;\n                    } else {\n                        idx=this.heap.length;\n                    }\n                }\n            }\n            return rslt;\n        } else {\n            return null;\n        }\n    }\n    applyEditFromTo(edits:DiffEdit[]):string{\n        let rslt=\"\";\n        for (let i=0;i<edits.length;i++){\n            let edit = edits[i];\n            switch (edit.edit){\n                case \"start\":\n                    break;\n                //case \"addFrom\":\n                case \"match\":\n                case \"replace\":\n                    rslt+=this.lTo.charAt(edit.toIdx)\n                    break;\n                case \"addTo\":\n                    rslt+=this.lTo.charAt(edit.toIdx)\n                    break;\n                case \"skipFrom\":\n                //case \"skipTo\":\n                    break;\n            }\n        }\n        return rslt;\n    }\n}","/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"../textprocessing/package.ts\"/>\n\nclass TextEditUI extends ZUI {\n    private editType:\"text\"|\"html\"|\"code\";\n    private getF_:Fstring;\n    private getBaseF_:Fstring;\n    private setF_:(text:string)=>void;\n    private jq:JQuery;\n    private sourceText:string;\n    private baseText:string;\n    private beforeSel:{\n        startLine:number,startOffset:number,endLine:number,endOffset:number\n    }\n    private afterSel:{\n        startLine:number,startOffset:number,endLine:number,endOffset:number\n    }\n    private nLines:number;\n    private keyCode:number;\n    private majorEventInput:boolean;\n    constructor(editType?:\"text\"|\"html\"|\"code\"){\n        super();\n        this.editType=editType;\n        if (!editType){\n            this.editType=\"text\";\n        }\n    }\n    setText(text:string){\n        this.sourceText=text;\n        if (this.jq){\n            let html = this.renderTextIntoHTML(text,this.baseText);\n            this.jq.html(html);\n        }\n    }\n    getText():string{\n        if (this.jq){\n            this.sourceText=this.renderHTMLIntoText();\n        }\n        return this.sourceText;\n    }\n    setBase(text:string){\n        this.baseText=text;\n        if (this.jq){\n            let html = this.renderTextIntoHTML(this.sourceText,this.baseText);\n            this.jq.html(html);\n        }\n    }\n    setF(eif:(text:string)=>void):TextEditUI{\n        this.setF_=eif;\n        return this;\n    }\n    private renderTextIntoHTML(text:string,baseText:string):string{\n        let lines:string[] = [];\n        if (text)\n            lines = text.split(\"\\n\");\n        let rslt=\"\";\n        let ld:LineDiff=null;\n        if (baseText){\n            ld = new LineDiff(text,baseText);\n        }\n        for (let i=0;i<lines.length;i++){\n            let line = lines[i];\n            let changeStyles=\"\";\n            if (ld){\n                if (ld.fromLineReplaced(i))\n                    changeStyles+=\" TextEditUI-flr\"\n                if (ld.fromLineSkipped(i))\n                    changeStyles+=\" TextEditUI-fls\"\n                if (ld.toLineDeleted(i))\n                    changeStyles+=\" TextEditUI-tld\"\n            }\n            let html=`<div class=\"TextEditUI-line ${changeStyles}\" zel=\"${i}\" contenteditable>${line}</div>`\n            rslt+=html;\n        }\n        this.nLines=lines.length;\n        return rslt;\n    }\n\n    private extractSelection():{\n        startLine:number,startOffset:number,endLine:number,endOffset:number\n    }{\n        \n        let sel=document.getSelection()\n        let range=sel.getRangeAt(0)\n        let startEl:Element = range.startContainer.parentElement;\n        let startLine:number = parseInt(startEl.getAttribute(\"zel\"));\n        let startOffset:number=range.startOffset;\n        let endEl = range.endContainer.parentElement;\n        let endLine:number = parseInt(endEl.getAttribute(\"zel\"));\n        let endOffset:number = range.endOffset;\n        return {startLine:startLine,startOffset:startOffset,endLine:endLine,endOffset:endOffset}\n    }\n    private renderHTMLIntoText():string{\n        let rslt = '';\n        let first=true;\n        this.jq.find(\"div\").each((index:number,elem:Element)=>{\n            let html=elem.innerHTML;\n            if (first){\n                first=false;\n                rslt=html;\n            } else {\n                rslt+=\"\\n\"+html;\n            }\n        });\n        return rslt;\n    }\n    renderJQ():JQuery{\n        this.getText();\n        let val=ZUI.stringVal(this.getF_);\n        if (!val)\n            val=\"\";\n        this.jq=$(`<div class=\"TextEditUI-${this.editType} ${this.classStr()}\" contenteditable>${val}</div>`);\n        this.jq.on(\"input\",(event:JQueryEventObject)=>{\n            //DB.msg(\"cont.input\",event.keyCode)\n            //DB.msg(\"cont.text\",this.getText())\n            this.afterSel=this.extractSelection();\n            this.handleMajorEventChange();\n        })\n        this.jq.on('keydown',(event:JQueryEventObject)=>{\n            this.beforeSel=this.extractSelection();\n            this.keyCode=event.keyCode;\n            this.majorEventInput=false;\n            if (event.ctrlKey) this.majorEventInput=true;\n            //DB.msg(\"cont.keydown\",event.keyCode)\n            if (event.keyCode==9){\n                event.preventDefault();\n                this.handleTab();\n            } else if (event.keyCode==13){\n                event.preventDefault();\n                this.handleReturn();\n            } \n            //DB.msg(\"keydowncode\",event.keyCode)\n        });\n        this.jq.on(\"blur\",()=>{\n            this.majorEventInput=true;\n            this.handleMajorEventChange();\n        })\n        let html = this.renderTextIntoHTML(this.sourceText,this.baseText)\n        this.jq.html(html);\n        this.applyCSS(this.jq);\n        return this.jq;\n    }\n    private handleMajorEventChange(){\n        let majorEvent = false;\n        let nChildren = this.jq.children.length;\n        if (this.nLines!=nChildren)\n            majorEvent=true;\n        if (this.beforeSel.startLine!=this.beforeSel.endLine)\n            majorEvent=true;\n        if (this.afterSel.startLine!=this.afterSel.endLine)\n            majorEvent=true;\n        if (this.beforeSel.endLine!=this.afterSel.endLine)\n            majorEvent=true;\n        if (this.beforeSel.startLine!=this.afterSel.startLine)\n            majorEvent=true;\n        if (!this.keyCode)\n            majorEvent=true;\n        if (this.majorEventInput)\n            majorEvent=true;\n        if (majorEvent){\n            if (this.setF_){\n                let text = this.renderHTMLIntoText();\n                this.setF_(text);\n                this.setText(text);\n                let zel=this.afterSel.endLine.toFixed();\n                let children = this.jq[0].children;\n                let selLineEl = children[this.afterSel.endLine]\n                let selLineTxt = selLineEl.innerHTML;\n                //let selLine = this.jq[0].children[this.afterSel.endLine][0]\n                let range=new Range();\n                //let selLineEl=selLine[0];\n                let offset = this.afterSel.endOffset;\n                if (selLineTxt.length<offset){\n                    offset=offset-selLineTxt.length-1;\n                    selLineEl=children[this.afterSel.endLine+1]\n                }\n                range.setStart(selLineEl.firstChild,offset);\n                range.setEnd(selLineEl.firstChild,offset);\n                let sel = document.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }\n        }\n    }\n    private handleTab(){\n        let sel=document.getSelection()\n        let r=sel.getRangeAt(0)\n        r.deleteContents();\n        document.execCommand(\"insertHTML\",false,\"\\t\")\n        r.collapse();\n        //DB.msg(\"tabtext \"+this.getText().length,this.getText())\n    }\n    \n    private handleReturn(){\n        let sel=document.getSelection()\n        let r=sel.getRangeAt(0)\n        let startLineText = r.startContainer.parentElement.innerHTML;\n        let whiteSpace=\"\";\n        let i=0;\n        while(startLineText.charAt(i)<=\" \" && i<startLineText.length){\n            whiteSpace+=startLineText.charAt(i);\n            i++;\n        }\n        r.deleteContents();\n        document.execCommand(\"insertHTML\",false,\"\\r\"+whiteSpace)\n        r.collapse();\n        this.afterSel=this.extractSelection();\n        this.majorEventInput=true;\n        this.handleMajorEventChange()\n        //DB.msg(\"rettext \"+this.getText().length,this.getText())\n    }\n}","\n/// <reference path=\"../../../aaswZing/Zing/zui/refs.ts\"/>\n\nclass HomePage extends Page {\n\tcreatingTeam\n\n\tconstructor(pageState: PageState) {\n\t\tsuper(pageState);\n\n\t\tthis.content = new DivUI([\n\t\t\tnew TextUI(\"Home Page\"),\n\t\t\tnew ButtonUI(\"Create Team\")\n\t\t\t\t.click(() => {\n\t\t\t\t\tthis.creatingTeam = true;\n\t\t\t\t\tthis.notify();\n\t\t\t\t\tTeam.makeNew(\"New Team\", (err, team) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tPageManager.PUSHTO(\"team\", { teamKey: team._key });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.creatingTeam = false;\n\t\t\t\t\t\tthis.notify();\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.enable(() => !this.creatingTeam),\n\t\t\tnew DivUI(() => { return this.teamList() }),\n\t\t]);\n\t}\n\n\tprivate teamList(): ZUI[] {\n\t\tlet tKeys: string[] = Team.allTeams();\n\t\tif (tKeys) {\n\t\t\tlet teams: Team[] = <Team[]>Team.cGETm(tKeys);\n\t\t\tif (teams) {\n\t\t\t\treturn teams.map((team) => (new ClickWrapperUI([\n\t\t\t\t\tnew TextUI(team.getTeamName())\n\t\t\t\t]).click(() => {\n\t\t\t\t\tDB.msg(`edit ${team.getTeamName()}`)\n\t\t\t\t\tPageManager.PUSHTO(\"team\", { teamKey: team._key })\n\t\t\t\t}).style(\"team-list-item\")\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tpageName(): string {\n\t\treturn \"home\";\n\t}\n\n}\nPageManager.registerPageFactory(\"home\", (state: PageState) => {\n\treturn new HomePage(state);\n})","\n/// <reference path=\"../../../aaswZing/Zing/zui/refs.ts\"/>\n/// <reference path=\"../../models/Person.ts\"/>\n\ntype PersonCardOptions = {\n  size?: string\n  inEditMode?: () => boolean\n  onToggleEditMode?: (editMode: boolean) => void\n  onRemove?: () => void\n}\n\nconst defaultPersonCardOptions: PersonCardOptions = {\n  size: 'full',\n  inEditMode: () => false,\n  onToggleEditMode: null,\n  onRemove: null,\n}\n\nclass PersonCard extends ZUI {\n\n  constructor(personKey: string, options: PersonCardOptions = {}) {\n    super();\n    const opts = { ...defaultPersonCardOptions, ...options };\n    const person = Person.cGET(personKey)\n    if (!person) {\n      this.content = new DivUI(() => ([\n        new TextUI('Loading...').style('LoadingText')\n      ])).style('ShadowedCard');\n      return;\n    }\n    if (opts.size === 'full') {\n      this.content = new DivUI(() => ([\n        new TextUI('First Name:').style('Label'),\n        opts.inEditMode()\n          ? new TextFieldUI().getF(() => person.getFirstName()).setF((newName => { person.setFirstName(newName) })).placeHolder('Bob')\n          : new TextUI(person.getFirstName()).style('Value'),\n        new TextUI('Last Name:').style('Label'),\n        opts.inEditMode()\n          ? new TextFieldUI().getF(() => person.getLastName()).setF((newName => { person.setLastName(newName) })).placeHolder('Smith')\n          : new TextUI(person.getLastName()).style('Value'),\n        new TextUI('Email:').style('Label'),\n        opts.inEditMode()\n          ? new TextFieldUI().getF(() => person.getEmail()).setF((newEmail => { person.setEmail(newEmail) })).placeHolder('name@example.com')\n          : new TextUI(person.getEmail()).style('Value'),\n        new TextUI('Phone:').style('Label'),\n        opts.inEditMode()\n          ? new TextFieldUI().getF(() => person.getPhone()).setF((newPhone => { person.setPhone(newPhone) })).placeHolder('888-333-4444')\n          : new TextUI(person.getPhone()).style('Value'),\n        opts.onToggleEditMode && new ClickWrapperUI([\n          new TextUI('✎')\n        ]).click(() => { opts.onToggleEditMode(!opts.inEditMode()) }).style('LinkText'),\n        opts.onRemove && new ClickWrapperUI([\n          new TextUI('✕')\n        ]).click(() => { opts.onRemove() }).style('LinkText')\n      ])).style('ShadowedCard');\n    } else { // if (opts.size === 'mini') {\n      this.content = new DivUI(() => ([\n        new TextUI('No one').style('EmptyText')\n      ])).style('ShadowedCard');\n    }\n  }\n\n}","\n/// <reference path=\"../../../aaswZing/Zing/zui/refs.ts\"/>\n/// <reference path=\"../../models/Person.ts\"/>\n\ntype PersonSelectorOptions = {\n  getSelected: () => string\n  onSelect: (personKey: string) => void\n  nullable?: boolean,\n  allowAddNew?: boolean\n  addNewLabel?: string\n}\n\nconst defaultPersonSelectorOptions: PersonSelectorOptions = {\n  getSelected: () => (''),\n  onSelect: () => { },\n  nullable: true,\n  allowAddNew: true,\n  addNewLabel: 'Add New Person'\n}\n\nclass PersonSelector extends ZUI {\n\n  constructor(options: PersonSelectorOptions = defaultPersonSelectorOptions) {\n    super();\n    const opts = { ...defaultPersonSelectorOptions, ...options };\n    const personKeys = Person.allPersons();\n    const personList = Person.cGETm(personKeys) as Person[];\n    const dropdown = new DropDownChoiceUI()\n      .getF(opts.getSelected)\n      .setF(this.handleSelect(opts));\n    const duplicateNames = {}\n    personList.forEach((person: Person) => {\n      if (person.getFullName() in duplicateNames) {\n        duplicateNames[person.getFullName()] = true;\n      } else {\n        duplicateNames[person.getFullName()] = false;\n      }\n    });\n    if (opts.nullable) {\n      dropdown.choice('', '-- Select a Person --');\n    }\n    personList.forEach((person) => dropdown.choice(person._key, person.getDescription(duplicateNames[person.getFullName()])));\n    if (opts.allowAddNew) {\n      dropdown.choice('add-new-person', opts.addNewLabel);\n    }\n    this.content = dropdown;\n  }\n\n  handleSelect(opts: PersonSelectorOptions) {\n    return (personKey: string) => {\n      if (personKey === 'add-new-person') {\n        const newPerson = new Person({});\n        newPerson.PUT((err: string, person: Person) => {\n          opts.onSelect(person._key);\n        });\n        return;\n      }\n      opts.onSelect(personKey);\n    }\n  }\n}","\n/// <reference path=\"../../../aaswZing/Zing/zui/PageManager.ts\"/>\n/// <reference path=\"../../../aaswZing/Zing/zui/refs.ts\"/>\n/// <reference path=\"../../models/Team.ts\"/>\n/// <reference path=\"../views/PersonCard.ts\"/>\n/// <reference path=\"../views/PersonSelector.ts\"/>\n\nclass TeamPage extends Page {\n  inEditMode: boolean = false\n  teamKey: string\n\n  constructor(pageState: PageState) {\n    super(pageState);\n    this.teamKey = pageState.teamKey;\n    const team = Team.cGET(this.teamKey);\n    if (!team) {\n      this.content = new DivUI([]);\n      return;\n    }\n    this.content = new DivUI([\n      new ClickWrapperUI([new TextUI(\"< Back\")])\n        .click(() => {\n          history.back();\n        }),\n      new TextUI(\"Manage Team\"),\n      new TextFieldUI()\n        .getF(() => { return team.getTeamName() })\n        .setF((newName) => { team.setTeamName(newName) })\n        .placeHolder(\"Name of the team\"),\n      team.getCoach()\n        ? new PersonCard(team.getCoach(), {\n          onToggleEditMode: (mode: boolean) => { this.inEditMode = mode; this.notify() },\n          inEditMode: () => this.inEditMode,\n          onRemove: () => { team.setCoach(null); }\n        })\n        : new PersonSelector({\n          getSelected: () => (team.getCoach()),\n          onSelect: (personKey: string) => { this.setCoach(personKey); },\n          allowAddNew: true\n        })\n    ]);\n  }\n\n  private setCoach(personKey: string) {\n    const team = Team.cGET(this.teamKey);\n    if (team) {\n      team.setCoach(personKey);\n    }\n  }\n\n  pageName(): string {\n    return \"team\";\n  }\n\n}\nPageManager.registerPageFactory(\"team\", (state: PageState) => {\n  if (!state.teamKey) {\n    PageManager.PUSHTO(\"home\", { Message: \"Team Id required to create or edit a team.\" });\n  }\n  return new TeamPage(state);\n})","/// <reference path=\"../../aaswZing/Zing/data/clientRefs.ts\"/>\n/// <reference path=\"../models/ZMake.ts\"/>\n/// <reference path=\"../common/AllRightsManager.ts\"/>\n/// <reference path=\"pages/package.ts\"/>\n\nlet httpSource = new HTTPDataSource(window.location.origin + \"/\");\nlet source = new CacheDataSource(httpSource);\n\nDataObj.globalSource = source;\nlet rm: RightsManager = new AllRightsManager(source);\nsource.setRightsManager(rm);\nZUI.pageManager = new PageManager(source,\n  new HomePage({}), \"#content\");","/// <reference path=\"../share/DB.ts\"/>\n/// <reference path=\"./DataObj.ts\"/>\n/// <reference path=\"./DataSource.ts\"/>\n/// <reference path=\"./HTTPDataSource.ts\"/>\n/// <reference path=\"./MemDataSource.ts\"/>\n/// <reference path=\"./CacheDataSource.ts\"/>\n","/// <reference path=\"LineDiff.ts\"/>\n/// <reference path=\"StringDiff.ts\"/>","/// <reference path=\"../data/DataObj.ts\"/>\n/// <reference path=\"ZUI.ts\"/>\n/// <reference path=\"TextUI.ts\"/>\n/// <reference path=\"ButtonUI.ts\"/>\n/// <reference path=\"TextFieldUI.ts\"/>\n/// <reference path=\"TabUI.ts\"/>\n/// <reference path=\"DivUI.ts\"/>\n/// <reference path=\"TypeSwitchUI.ts\"/>\n/// <reference path=\"OpenCloseUI.ts\"/>\n/// <reference path=\"KeyListUI.ts\"/>\n/// <reference path=\"PageManager.ts\"/>\n/// <reference path=\"Messages.ts\"/>\n/// <reference path=\"SelectUI.ts\"/>\n/// <reference path=\"HTMLEditUI.ts\"/>\n/// <reference path=\"ClickWrapperUI.ts\"/>\n/// <reference path=\"BreakUI.ts\"/>\n/// <reference path=\"Modal.ts\"/>\n/// <reference path=\"ObjListUI.ts\"/>\n/// <reference path=\"FileDropTargetUI.ts\"/>\n/// <reference path=\"IconButtonUI.ts\"/>\n/// <reference path=\"ColorPickerUI.ts\"/>\n/// <reference path=\"SliderUI.ts\"/>\n/// <reference path=\"StyleCheckUI.ts\"/>\n/// <reference path=\"DoneIndicatorUI.ts\"/>\n/// <reference path=\"DropDownChoiceUI.ts\"/>\n/// <reference path=\"DateTimeUI.ts\"/>\n/// <reference path=\"DragDropWrapperUI.ts\"/>\n/// <reference path=\"ImageUI.ts\"/>\n/// <reference path=\"ProcessLogUI.ts\"/>\n/// <reference path=\"DataTableUI.ts\"/>\n/// <reference path=\"DataTableRowLabeledUI.ts\"/>\n/// <reference path=\"ChartUI.ts\"/>\n/// <reference path=\"TextEditUI.ts\"/>\n","/// <reference path=\"HomePage.ts\" />\n/// <reference path=\"TeamPage.ts\" />"]}